// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/audio/AudioDeviceSetup.proto

#ifndef PROTOBUF_rec_2faudio_2fAudioDeviceSetup_2eproto__INCLUDED
#define PROTOBUF_rec_2faudio_2fAudioDeviceSetup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
void protobuf_AssignDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
void protobuf_ShutdownFile_rec_2faudio_2fAudioDeviceSetup_2eproto();

class AudioDeviceSetupProto;

// ===================================================================

class AudioDeviceSetupProto : public ::google::protobuf::Message {
 public:
  AudioDeviceSetupProto();
  virtual ~AudioDeviceSetupProto();
  
  AudioDeviceSetupProto(const AudioDeviceSetupProto& from);
  
  inline AudioDeviceSetupProto& operator=(const AudioDeviceSetupProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioDeviceSetupProto& default_instance();
  
  void Swap(AudioDeviceSetupProto* other);
  
  // implements Message ----------------------------------------------
  
  AudioDeviceSetupProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioDeviceSetupProto& from);
  void MergeFrom(const AudioDeviceSetupProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string output_device_name = 1;
  inline bool has_output_device_name() const;
  inline void clear_output_device_name();
  static const int kOutputDeviceNameFieldNumber = 1;
  inline const ::std::string& output_device_name() const;
  inline void set_output_device_name(const ::std::string& value);
  inline void set_output_device_name(const char* value);
  inline void set_output_device_name(const char* value, size_t size);
  inline ::std::string* mutable_output_device_name();
  
  // optional string input_device_name = 2;
  inline bool has_input_device_name() const;
  inline void clear_input_device_name();
  static const int kInputDeviceNameFieldNumber = 2;
  inline const ::std::string& input_device_name() const;
  inline void set_input_device_name(const ::std::string& value);
  inline void set_input_device_name(const char* value);
  inline void set_input_device_name(const char* value, size_t size);
  inline ::std::string* mutable_input_device_name();
  
  // optional double sample_rate = 3;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 3;
  inline double sample_rate() const;
  inline void set_sample_rate(double value);
  
  // optional uint64 buffer_size = 4;
  inline bool has_buffer_size() const;
  inline void clear_buffer_size();
  static const int kBufferSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 buffer_size() const;
  inline void set_buffer_size(::google::protobuf::uint64 value);
  
  // optional bytes input_channels = 5;
  inline bool has_input_channels() const;
  inline void clear_input_channels();
  static const int kInputChannelsFieldNumber = 5;
  inline const ::std::string& input_channels() const;
  inline void set_input_channels(const ::std::string& value);
  inline void set_input_channels(const char* value);
  inline void set_input_channels(const void* value, size_t size);
  inline ::std::string* mutable_input_channels();
  
  // optional bool use_default_input_channels = 6;
  inline bool has_use_default_input_channels() const;
  inline void clear_use_default_input_channels();
  static const int kUseDefaultInputChannelsFieldNumber = 6;
  inline bool use_default_input_channels() const;
  inline void set_use_default_input_channels(bool value);
  
  // optional bytes output_channels = 7;
  inline bool has_output_channels() const;
  inline void clear_output_channels();
  static const int kOutputChannelsFieldNumber = 7;
  inline const ::std::string& output_channels() const;
  inline void set_output_channels(const ::std::string& value);
  inline void set_output_channels(const char* value);
  inline void set_output_channels(const void* value, size_t size);
  inline ::std::string* mutable_output_channels();
  
  // optional bool use_default_output_channels = 8;
  inline bool has_use_default_output_channels() const;
  inline void clear_use_default_output_channels();
  static const int kUseDefaultOutputChannelsFieldNumber = 8;
  inline bool use_default_output_channels() const;
  inline void set_use_default_output_channels(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.audio.AudioDeviceSetupProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* output_device_name_;
  static const ::std::string _default_output_device_name_;
  ::std::string* input_device_name_;
  static const ::std::string _default_input_device_name_;
  double sample_rate_;
  ::google::protobuf::uint64 buffer_size_;
  ::std::string* input_channels_;
  static const ::std::string _default_input_channels_;
  bool use_default_input_channels_;
  ::std::string* output_channels_;
  static const ::std::string _default_output_channels_;
  bool use_default_output_channels_;
  friend void  protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
  friend void protobuf_AssignDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
  friend void protobuf_ShutdownFile_rec_2faudio_2fAudioDeviceSetup_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AudioDeviceSetupProto* default_instance_;
};
// ===================================================================


// ===================================================================

// AudioDeviceSetupProto

// optional string output_device_name = 1;
inline bool AudioDeviceSetupProto::has_output_device_name() const {
  return _has_bit(0);
}
inline void AudioDeviceSetupProto::clear_output_device_name() {
  if (output_device_name_ != &_default_output_device_name_) {
    output_device_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AudioDeviceSetupProto::output_device_name() const {
  return *output_device_name_;
}
inline void AudioDeviceSetupProto::set_output_device_name(const ::std::string& value) {
  _set_bit(0);
  if (output_device_name_ == &_default_output_device_name_) {
    output_device_name_ = new ::std::string;
  }
  output_device_name_->assign(value);
}
inline void AudioDeviceSetupProto::set_output_device_name(const char* value) {
  _set_bit(0);
  if (output_device_name_ == &_default_output_device_name_) {
    output_device_name_ = new ::std::string;
  }
  output_device_name_->assign(value);
}
inline void AudioDeviceSetupProto::set_output_device_name(const char* value, size_t size) {
  _set_bit(0);
  if (output_device_name_ == &_default_output_device_name_) {
    output_device_name_ = new ::std::string;
  }
  output_device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioDeviceSetupProto::mutable_output_device_name() {
  _set_bit(0);
  if (output_device_name_ == &_default_output_device_name_) {
    output_device_name_ = new ::std::string;
  }
  return output_device_name_;
}

// optional string input_device_name = 2;
inline bool AudioDeviceSetupProto::has_input_device_name() const {
  return _has_bit(1);
}
inline void AudioDeviceSetupProto::clear_input_device_name() {
  if (input_device_name_ != &_default_input_device_name_) {
    input_device_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AudioDeviceSetupProto::input_device_name() const {
  return *input_device_name_;
}
inline void AudioDeviceSetupProto::set_input_device_name(const ::std::string& value) {
  _set_bit(1);
  if (input_device_name_ == &_default_input_device_name_) {
    input_device_name_ = new ::std::string;
  }
  input_device_name_->assign(value);
}
inline void AudioDeviceSetupProto::set_input_device_name(const char* value) {
  _set_bit(1);
  if (input_device_name_ == &_default_input_device_name_) {
    input_device_name_ = new ::std::string;
  }
  input_device_name_->assign(value);
}
inline void AudioDeviceSetupProto::set_input_device_name(const char* value, size_t size) {
  _set_bit(1);
  if (input_device_name_ == &_default_input_device_name_) {
    input_device_name_ = new ::std::string;
  }
  input_device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioDeviceSetupProto::mutable_input_device_name() {
  _set_bit(1);
  if (input_device_name_ == &_default_input_device_name_) {
    input_device_name_ = new ::std::string;
  }
  return input_device_name_;
}

// optional double sample_rate = 3;
inline bool AudioDeviceSetupProto::has_sample_rate() const {
  return _has_bit(2);
}
inline void AudioDeviceSetupProto::clear_sample_rate() {
  sample_rate_ = 0;
  _clear_bit(2);
}
inline double AudioDeviceSetupProto::sample_rate() const {
  return sample_rate_;
}
inline void AudioDeviceSetupProto::set_sample_rate(double value) {
  _set_bit(2);
  sample_rate_ = value;
}

// optional uint64 buffer_size = 4;
inline bool AudioDeviceSetupProto::has_buffer_size() const {
  return _has_bit(3);
}
inline void AudioDeviceSetupProto::clear_buffer_size() {
  buffer_size_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 AudioDeviceSetupProto::buffer_size() const {
  return buffer_size_;
}
inline void AudioDeviceSetupProto::set_buffer_size(::google::protobuf::uint64 value) {
  _set_bit(3);
  buffer_size_ = value;
}

// optional bytes input_channels = 5;
inline bool AudioDeviceSetupProto::has_input_channels() const {
  return _has_bit(4);
}
inline void AudioDeviceSetupProto::clear_input_channels() {
  if (input_channels_ != &_default_input_channels_) {
    input_channels_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& AudioDeviceSetupProto::input_channels() const {
  return *input_channels_;
}
inline void AudioDeviceSetupProto::set_input_channels(const ::std::string& value) {
  _set_bit(4);
  if (input_channels_ == &_default_input_channels_) {
    input_channels_ = new ::std::string;
  }
  input_channels_->assign(value);
}
inline void AudioDeviceSetupProto::set_input_channels(const char* value) {
  _set_bit(4);
  if (input_channels_ == &_default_input_channels_) {
    input_channels_ = new ::std::string;
  }
  input_channels_->assign(value);
}
inline void AudioDeviceSetupProto::set_input_channels(const void* value, size_t size) {
  _set_bit(4);
  if (input_channels_ == &_default_input_channels_) {
    input_channels_ = new ::std::string;
  }
  input_channels_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioDeviceSetupProto::mutable_input_channels() {
  _set_bit(4);
  if (input_channels_ == &_default_input_channels_) {
    input_channels_ = new ::std::string;
  }
  return input_channels_;
}

// optional bool use_default_input_channels = 6;
inline bool AudioDeviceSetupProto::has_use_default_input_channels() const {
  return _has_bit(5);
}
inline void AudioDeviceSetupProto::clear_use_default_input_channels() {
  use_default_input_channels_ = false;
  _clear_bit(5);
}
inline bool AudioDeviceSetupProto::use_default_input_channels() const {
  return use_default_input_channels_;
}
inline void AudioDeviceSetupProto::set_use_default_input_channels(bool value) {
  _set_bit(5);
  use_default_input_channels_ = value;
}

// optional bytes output_channels = 7;
inline bool AudioDeviceSetupProto::has_output_channels() const {
  return _has_bit(6);
}
inline void AudioDeviceSetupProto::clear_output_channels() {
  if (output_channels_ != &_default_output_channels_) {
    output_channels_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& AudioDeviceSetupProto::output_channels() const {
  return *output_channels_;
}
inline void AudioDeviceSetupProto::set_output_channels(const ::std::string& value) {
  _set_bit(6);
  if (output_channels_ == &_default_output_channels_) {
    output_channels_ = new ::std::string;
  }
  output_channels_->assign(value);
}
inline void AudioDeviceSetupProto::set_output_channels(const char* value) {
  _set_bit(6);
  if (output_channels_ == &_default_output_channels_) {
    output_channels_ = new ::std::string;
  }
  output_channels_->assign(value);
}
inline void AudioDeviceSetupProto::set_output_channels(const void* value, size_t size) {
  _set_bit(6);
  if (output_channels_ == &_default_output_channels_) {
    output_channels_ = new ::std::string;
  }
  output_channels_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AudioDeviceSetupProto::mutable_output_channels() {
  _set_bit(6);
  if (output_channels_ == &_default_output_channels_) {
    output_channels_ = new ::std::string;
  }
  return output_channels_;
}

// optional bool use_default_output_channels = 8;
inline bool AudioDeviceSetupProto::has_use_default_output_channels() const {
  return _has_bit(7);
}
inline void AudioDeviceSetupProto::clear_use_default_output_channels() {
  use_default_output_channels_ = false;
  _clear_bit(7);
}
inline bool AudioDeviceSetupProto::use_default_output_channels() const {
  return use_default_output_channels_;
}
inline void AudioDeviceSetupProto::set_use_default_output_channels(bool value) {
  _set_bit(7);
  use_default_output_channels_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2faudio_2fAudioDeviceSetup_2eproto__INCLUDED
