// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/audio/util/BufferManager.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {

namespace {

const ::google::protobuf::Descriptor* BufferManagerDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferManagerDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2faudio_2futil_2fBufferManager_2eproto() {
  protobuf_AddDesc_rec_2faudio_2futil_2fBufferManager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/audio/util/BufferManager.proto");
  GOOGLE_CHECK(file != NULL);
  BufferManagerDesc_descriptor_ = file->message_type(0);
  static const int BufferManagerDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, reallocate_shrinkage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, source_samples_per_thumbnail_sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, min_preload_size_),
  };
  BufferManagerDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferManagerDesc_descriptor_,
      BufferManagerDesc::default_instance_,
      BufferManagerDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferManagerDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferManagerDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2faudio_2futil_2fBufferManager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferManagerDesc_descriptor_, &BufferManagerDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2faudio_2futil_2fBufferManager_2eproto() {
  delete BufferManagerDesc::default_instance_;
  delete BufferManagerDesc_reflection_;
}

void protobuf_AddDesc_rec_2faudio_2futil_2fBufferManager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"rec/audio/util/BufferManager.proto\022\tre"
    "c.audio\"\263\001\n\021BufferManagerDesc\022\020\n\010max_siz"
    "e\030\001 \001(\004\022!\n\024reallocate_shrinkage\030\002 \001(\001:\0030"
    ".9\0220\n#source_samples_per_thumbnail_sampl"
    "e\030\003 \001(\r:\003512\022\027\n\nchunk_size\030\004 \001(\r:\003512\022\036\n"
    "\020min_preload_size\030\005 \001(\r:\0041024", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/audio/util/BufferManager.proto", &protobuf_RegisterTypes);
  BufferManagerDesc::default_instance_ = new BufferManagerDesc();
  BufferManagerDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2faudio_2futil_2fBufferManager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2faudio_2futil_2fBufferManager_2eproto {
  StaticDescriptorInitializer_rec_2faudio_2futil_2fBufferManager_2eproto() {
    protobuf_AddDesc_rec_2faudio_2futil_2fBufferManager_2eproto();
  }
} static_descriptor_initializer_rec_2faudio_2futil_2fBufferManager_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BufferManagerDesc::kMaxSizeFieldNumber;
const int BufferManagerDesc::kReallocateShrinkageFieldNumber;
const int BufferManagerDesc::kSourceSamplesPerThumbnailSampleFieldNumber;
const int BufferManagerDesc::kChunkSizeFieldNumber;
const int BufferManagerDesc::kMinPreloadSizeFieldNumber;
#endif  // !_MSC_VER

BufferManagerDesc::BufferManagerDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BufferManagerDesc::InitAsDefaultInstance() {
}

BufferManagerDesc::BufferManagerDesc(const BufferManagerDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BufferManagerDesc::SharedCtor() {
  _cached_size_ = 0;
  max_size_ = GOOGLE_ULONGLONG(0);
  reallocate_shrinkage_ = 0.9;
  source_samples_per_thumbnail_sample_ = 512u;
  chunk_size_ = 512u;
  min_preload_size_ = 1024u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferManagerDesc::~BufferManagerDesc() {
  SharedDtor();
}

void BufferManagerDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferManagerDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferManagerDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferManagerDesc_descriptor_;
}

const BufferManagerDesc& BufferManagerDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2futil_2fBufferManager_2eproto();  return *default_instance_;
}

BufferManagerDesc* BufferManagerDesc::default_instance_ = NULL;

BufferManagerDesc* BufferManagerDesc::New() const {
  return new BufferManagerDesc;
}

void BufferManagerDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_size_ = GOOGLE_ULONGLONG(0);
    reallocate_shrinkage_ = 0.9;
    source_samples_per_thumbnail_sample_ = 512u;
    chunk_size_ = 512u;
    min_preload_size_ = 1024u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferManagerDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 max_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_size_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_reallocate_shrinkage;
        break;
      }
      
      // optional double reallocate_shrinkage = 2 [default = 0.9];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reallocate_shrinkage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reallocate_shrinkage_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_samples_per_thumbnail_sample;
        break;
      }
      
      // optional uint32 source_samples_per_thumbnail_sample = 3 [default = 512];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_samples_per_thumbnail_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_samples_per_thumbnail_sample_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chunk_size;
        break;
      }
      
      // optional uint32 chunk_size = 4 [default = 512];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_size_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_preload_size;
        break;
      }
      
      // optional uint32 min_preload_size = 5 [default = 1024];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_preload_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_preload_size_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferManagerDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 max_size = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->max_size(), output);
  }
  
  // optional double reallocate_shrinkage = 2 [default = 0.9];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->reallocate_shrinkage(), output);
  }
  
  // optional uint32 source_samples_per_thumbnail_sample = 3 [default = 512];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_samples_per_thumbnail_sample(), output);
  }
  
  // optional uint32 chunk_size = 4 [default = 512];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chunk_size(), output);
  }
  
  // optional uint32 min_preload_size = 5 [default = 1024];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_preload_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferManagerDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 max_size = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->max_size(), target);
  }
  
  // optional double reallocate_shrinkage = 2 [default = 0.9];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->reallocate_shrinkage(), target);
  }
  
  // optional uint32 source_samples_per_thumbnail_sample = 3 [default = 512];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_samples_per_thumbnail_sample(), target);
  }
  
  // optional uint32 chunk_size = 4 [default = 512];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chunk_size(), target);
  }
  
  // optional uint32 min_preload_size = 5 [default = 1024];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_preload_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferManagerDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 max_size = 1;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_size());
    }
    
    // optional double reallocate_shrinkage = 2 [default = 0.9];
    if (has_reallocate_shrinkage()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 source_samples_per_thumbnail_sample = 3 [default = 512];
    if (has_source_samples_per_thumbnail_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_samples_per_thumbnail_sample());
    }
    
    // optional uint32 chunk_size = 4 [default = 512];
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_size());
    }
    
    // optional uint32 min_preload_size = 5 [default = 1024];
    if (has_min_preload_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_preload_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferManagerDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferManagerDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferManagerDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferManagerDesc::MergeFrom(const BufferManagerDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_max_size(from.max_size());
    }
    if (from._has_bit(1)) {
      set_reallocate_shrinkage(from.reallocate_shrinkage());
    }
    if (from._has_bit(2)) {
      set_source_samples_per_thumbnail_sample(from.source_samples_per_thumbnail_sample());
    }
    if (from._has_bit(3)) {
      set_chunk_size(from.chunk_size());
    }
    if (from._has_bit(4)) {
      set_min_preload_size(from.min_preload_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferManagerDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferManagerDesc::CopyFrom(const BufferManagerDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferManagerDesc::IsInitialized() const {
  
  return true;
}

void BufferManagerDesc::Swap(BufferManagerDesc* other) {
  if (other != this) {
    std::swap(max_size_, other->max_size_);
    std::swap(reallocate_shrinkage_, other->reallocate_shrinkage_);
    std::swap(source_samples_per_thumbnail_sample_, other->source_samples_per_thumbnail_sample_);
    std::swap(chunk_size_, other->chunk_size_);
    std::swap(min_preload_size_, other->min_preload_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferManagerDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferManagerDesc_descriptor_;
  metadata.reflection = BufferManagerDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace rec

// @@protoc_insertion_point(global_scope)
