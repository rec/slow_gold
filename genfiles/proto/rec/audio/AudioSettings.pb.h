// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/audio/AudioSettings.proto

#ifndef PROTOBUF_rec_2faudio_2fAudioSettings_2eproto__INCLUDED
#define PROTOBUF_rec_2faudio_2fAudioSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2faudio_2fAudioSettings_2eproto();
void protobuf_AssignDesc_rec_2faudio_2fAudioSettings_2eproto();
void protobuf_ShutdownFile_rec_2faudio_2fAudioSettings_2eproto();

class AudioSettings;

enum AudioSettings_FileType {
  AudioSettings_FileType_AIFF = 0,
  AudioSettings_FileType_FLAC = 1,
  AudioSettings_FileType_OGG = 2,
  AudioSettings_FileType_WAV = 3,
  AudioSettings_FileType_COUNT = 4
};
bool AudioSettings_FileType_IsValid(int value);
const AudioSettings_FileType AudioSettings_FileType_FileType_MIN = AudioSettings_FileType_AIFF;
const AudioSettings_FileType AudioSettings_FileType_FileType_MAX = AudioSettings_FileType_COUNT;
const int AudioSettings_FileType_FileType_ARRAYSIZE = AudioSettings_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioSettings_FileType_descriptor();
inline const ::std::string& AudioSettings_FileType_Name(AudioSettings_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioSettings_FileType_descriptor(), value);
}
inline bool AudioSettings_FileType_Parse(
    const ::std::string& name, AudioSettings_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioSettings_FileType>(
    AudioSettings_FileType_descriptor(), name, value);
}
// ===================================================================

class AudioSettings : public ::google::protobuf::Message {
 public:
  AudioSettings();
  virtual ~AudioSettings();
  
  AudioSettings(const AudioSettings& from);
  
  inline AudioSettings& operator=(const AudioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioSettings& default_instance();
  
  void Swap(AudioSettings* other);
  
  // implements Message ----------------------------------------------
  
  AudioSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioSettings& from);
  void MergeFrom(const AudioSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AudioSettings_FileType FileType;
  static const FileType AIFF = AudioSettings_FileType_AIFF;
  static const FileType FLAC = AudioSettings_FileType_FLAC;
  static const FileType OGG = AudioSettings_FileType_OGG;
  static const FileType WAV = AudioSettings_FileType_WAV;
  static const FileType COUNT = AudioSettings_FileType_COUNT;
  static inline bool FileType_IsValid(int value) {
    return AudioSettings_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    AudioSettings_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    AudioSettings_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    AudioSettings_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return AudioSettings_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return AudioSettings_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return AudioSettings_FileType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional double master_tune = 1;
  inline bool has_master_tune() const;
  inline void clear_master_tune();
  static const int kMasterTuneFieldNumber = 1;
  inline double master_tune() const;
  inline void set_master_tune(double value);
  
  // optional .rec.audio.AudioSettings.FileType file_type_for_save = 2 [default = AIFF];
  inline bool has_file_type_for_save() const;
  inline void clear_file_type_for_save();
  static const int kFileTypeForSaveFieldNumber = 2;
  inline ::rec::audio::AudioSettings_FileType file_type_for_save() const;
  inline void set_file_type_for_save(::rec::audio::AudioSettings_FileType value);
  
  // @@protoc_insertion_point(class_scope:rec.audio.AudioSettings)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double master_tune_;
  int file_type_for_save_;
  friend void  protobuf_AddDesc_rec_2faudio_2fAudioSettings_2eproto();
  friend void protobuf_AssignDesc_rec_2faudio_2fAudioSettings_2eproto();
  friend void protobuf_ShutdownFile_rec_2faudio_2fAudioSettings_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AudioSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// AudioSettings

// optional double master_tune = 1;
inline bool AudioSettings::has_master_tune() const {
  return _has_bit(0);
}
inline void AudioSettings::clear_master_tune() {
  master_tune_ = 0;
  _clear_bit(0);
}
inline double AudioSettings::master_tune() const {
  return master_tune_;
}
inline void AudioSettings::set_master_tune(double value) {
  _set_bit(0);
  master_tune_ = value;
}

// optional .rec.audio.AudioSettings.FileType file_type_for_save = 2 [default = AIFF];
inline bool AudioSettings::has_file_type_for_save() const {
  return _has_bit(1);
}
inline void AudioSettings::clear_file_type_for_save() {
  file_type_for_save_ = 0;
  _clear_bit(1);
}
inline ::rec::audio::AudioSettings_FileType AudioSettings::file_type_for_save() const {
  return static_cast< ::rec::audio::AudioSettings_FileType >(file_type_for_save_);
}
inline void AudioSettings::set_file_type_for_save(::rec::audio::AudioSettings_FileType value) {
  GOOGLE_DCHECK(::rec::audio::AudioSettings_FileType_IsValid(value));
  _set_bit(1);
  file_type_for_save_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::audio::AudioSettings_FileType>() {
  return ::rec::audio::AudioSettings_FileType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2faudio_2fAudioSettings_2eproto__INCLUDED
