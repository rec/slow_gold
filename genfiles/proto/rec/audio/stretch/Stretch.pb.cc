// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/audio/stretch/Stretch.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {
namespace stretch {

namespace {

const ::google::protobuf::Descriptor* Stretch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stretch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Stretch_Strategy_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2faudio_2fstretch_2fStretch_2eproto() {
  protobuf_AddDesc_rec_2faudio_2fstretch_2fStretch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/audio/stretch/Stretch.proto");
  GOOGLE_CHECK(file != NULL);
  Stretch_descriptor_ = file->message_type(0);
  static const int Stretch_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, time_disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, pitch_disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, passthrough_when_disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, time_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, time_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, pitch_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, semitone_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, detune_cents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, bands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, filter_overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, prefill_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, next_buffer_fill_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, inactive_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, thread_priority_),
  };
  Stretch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stretch_descriptor_,
      Stretch::default_instance_,
      Stretch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stretch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stretch));
  Stretch_Strategy_descriptor_ = Stretch_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2faudio_2fstretch_2fStretch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stretch_descriptor_, &Stretch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2faudio_2fstretch_2fStretch_2eproto() {
  delete Stretch::default_instance_;
  delete Stretch_reflection_;
}

void protobuf_AddDesc_rec_2faudio_2fstretch_2fStretch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::audio::source::protobuf_AddDesc_rec_2faudio_2fsource_2fStereo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rec/audio/stretch/Stretch.proto\022\021rec.a"
    "udio.stretch\032\035rec/audio/source/Stereo.pr"
    "oto\"\330\004\n\007Stretch\022B\n\010strategy\030\022 \001(\0162#.rec."
    "audio.stretch.Stretch.Strategy:\013AUDIO_MA"
    "GIC\022\034\n\rtime_disabled\030\001 \001(\010:\005false\022\035\n\016pit"
    "ch_disabled\030\002 \001(\010:\005false\022\'\n\031passthrough_"
    "when_disabled\030\003 \001(\010:\004true\022\025\n\ntime_scale\030"
    "\004 \001(\001:\0011\022\031\n\014time_percent\030\005 \001(\001:\003100\022\032\n\013s"
    "ample_rate\030\006 \001(\001:\00544100\022\023\n\010channels\030\007 \001("
    "\r:\0012\022\026\n\013pitch_scale\030\010 \001(\001:\0011\022\031\n\016semitone"
    "_shift\030\t \001(\001:\0010\022\027\n\014detune_cents\030\n \001(\001:\0010"
    "\022\023\n\005bands\030\013 \001(\r:\0042048\022\031\n\016filter_overlap\030"
    "\014 \001(\r:\0011\022\030\n\nchunk_size\030\r \001(\r:\0041024\022\033\n\014pr"
    "efill_size\030\016 \001(\r:\00515000\022$\n\025next_buffer_f"
    "ill_size\030\017 \001(\r:\00515000\022\036\n\022inactive_wait_t"
    "ime\030\020 \001(\005:\002-1\022\032\n\017thread_priority\030\021 \001(\r:\001"
    "4\"+\n\010Strategy\022\017\n\013AUDIO_MAGIC\020\000\022\016\n\nSOUNDT"
    "OUCH\020\001", 686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/audio/stretch/Stretch.proto", &protobuf_RegisterTypes);
  Stretch::default_instance_ = new Stretch();
  Stretch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2faudio_2fstretch_2fStretch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2faudio_2fstretch_2fStretch_2eproto {
  StaticDescriptorInitializer_rec_2faudio_2fstretch_2fStretch_2eproto() {
    protobuf_AddDesc_rec_2faudio_2fstretch_2fStretch_2eproto();
  }
} static_descriptor_initializer_rec_2faudio_2fstretch_2fStretch_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Stretch_Strategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stretch_Strategy_descriptor_;
}
bool Stretch_Strategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Stretch_Strategy Stretch::AUDIO_MAGIC;
const Stretch_Strategy Stretch::SOUNDTOUCH;
const Stretch_Strategy Stretch::Strategy_MIN;
const Stretch_Strategy Stretch::Strategy_MAX;
const int Stretch::Strategy_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Stretch::kStrategyFieldNumber;
const int Stretch::kTimeDisabledFieldNumber;
const int Stretch::kPitchDisabledFieldNumber;
const int Stretch::kPassthroughWhenDisabledFieldNumber;
const int Stretch::kTimeScaleFieldNumber;
const int Stretch::kTimePercentFieldNumber;
const int Stretch::kSampleRateFieldNumber;
const int Stretch::kChannelsFieldNumber;
const int Stretch::kPitchScaleFieldNumber;
const int Stretch::kSemitoneShiftFieldNumber;
const int Stretch::kDetuneCentsFieldNumber;
const int Stretch::kBandsFieldNumber;
const int Stretch::kFilterOverlapFieldNumber;
const int Stretch::kChunkSizeFieldNumber;
const int Stretch::kPrefillSizeFieldNumber;
const int Stretch::kNextBufferFillSizeFieldNumber;
const int Stretch::kInactiveWaitTimeFieldNumber;
const int Stretch::kThreadPriorityFieldNumber;
#endif  // !_MSC_VER

Stretch::Stretch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stretch::InitAsDefaultInstance() {
}

Stretch::Stretch(const Stretch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stretch::SharedCtor() {
  _cached_size_ = 0;
  strategy_ = 0;
  time_disabled_ = false;
  pitch_disabled_ = false;
  passthrough_when_disabled_ = true;
  time_scale_ = 1;
  time_percent_ = 100;
  sample_rate_ = 44100;
  channels_ = 2u;
  pitch_scale_ = 1;
  semitone_shift_ = 0;
  detune_cents_ = 0;
  bands_ = 2048u;
  filter_overlap_ = 1u;
  chunk_size_ = 1024u;
  prefill_size_ = 15000u;
  next_buffer_fill_size_ = 15000u;
  inactive_wait_time_ = -1;
  thread_priority_ = 4u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stretch::~Stretch() {
  SharedDtor();
}

void Stretch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stretch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stretch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stretch_descriptor_;
}

const Stretch& Stretch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2fstretch_2fStretch_2eproto();  return *default_instance_;
}

Stretch* Stretch::default_instance_ = NULL;

Stretch* Stretch::New() const {
  return new Stretch;
}

void Stretch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strategy_ = 0;
    time_disabled_ = false;
    pitch_disabled_ = false;
    passthrough_when_disabled_ = true;
    time_scale_ = 1;
    time_percent_ = 100;
    sample_rate_ = 44100;
    channels_ = 2u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pitch_scale_ = 1;
    semitone_shift_ = 0;
    detune_cents_ = 0;
    bands_ = 2048u;
    filter_overlap_ = 1u;
    chunk_size_ = 1024u;
    prefill_size_ = 15000u;
    next_buffer_fill_size_ = 15000u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    inactive_wait_time_ = -1;
    thread_priority_ = 4u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stretch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool time_disabled = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_disabled_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pitch_disabled;
        break;
      }
      
      // optional bool pitch_disabled = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pitch_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pitch_disabled_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_passthrough_when_disabled;
        break;
      }
      
      // optional bool passthrough_when_disabled = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passthrough_when_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passthrough_when_disabled_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_scale;
        break;
      }
      
      // optional double time_scale = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_scale_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_time_percent;
        break;
      }
      
      // optional double time_percent = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_percent_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_sample_rate;
        break;
      }
      
      // optional double sample_rate = 6 [default = 44100];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channels;
        break;
      }
      
      // optional uint32 channels = 7 [default = 2];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_pitch_scale;
        break;
      }
      
      // optional double pitch_scale = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pitch_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_scale_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_semitone_shift;
        break;
      }
      
      // optional double semitone_shift = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_semitone_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &semitone_shift_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_detune_cents;
        break;
      }
      
      // optional double detune_cents = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_detune_cents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &detune_cents_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bands;
        break;
      }
      
      // optional uint32 bands = 11 [default = 2048];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bands_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_filter_overlap;
        break;
      }
      
      // optional uint32 filter_overlap = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_overlap_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_chunk_size;
        break;
      }
      
      // optional uint32 chunk_size = 13 [default = 1024];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_size_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_prefill_size;
        break;
      }
      
      // optional uint32 prefill_size = 14 [default = 15000];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefill_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefill_size_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_next_buffer_fill_size;
        break;
      }
      
      // optional uint32 next_buffer_fill_size = 15 [default = 15000];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_buffer_fill_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_buffer_fill_size_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_inactive_wait_time;
        break;
      }
      
      // optional int32 inactive_wait_time = 16 [default = -1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactive_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inactive_wait_time_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_thread_priority;
        break;
      }
      
      // optional uint32 thread_priority = 17 [default = 4];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_priority_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_strategy;
        break;
      }
      
      // optional .rec.audio.stretch.Stretch.Strategy strategy = 18 [default = AUDIO_MAGIC];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::audio::stretch::Stretch_Strategy_IsValid(value)) {
            set_strategy(static_cast< ::rec::audio::stretch::Stretch_Strategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stretch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool time_disabled = 1 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->time_disabled(), output);
  }
  
  // optional bool pitch_disabled = 2 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pitch_disabled(), output);
  }
  
  // optional bool passthrough_when_disabled = 3 [default = true];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passthrough_when_disabled(), output);
  }
  
  // optional double time_scale = 4 [default = 1];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_scale(), output);
  }
  
  // optional double time_percent = 5 [default = 100];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->time_percent(), output);
  }
  
  // optional double sample_rate = 6 [default = 44100];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sample_rate(), output);
  }
  
  // optional uint32 channels = 7 [default = 2];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channels(), output);
  }
  
  // optional double pitch_scale = 8 [default = 1];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pitch_scale(), output);
  }
  
  // optional double semitone_shift = 9 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->semitone_shift(), output);
  }
  
  // optional double detune_cents = 10 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->detune_cents(), output);
  }
  
  // optional uint32 bands = 11 [default = 2048];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bands(), output);
  }
  
  // optional uint32 filter_overlap = 12 [default = 1];
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->filter_overlap(), output);
  }
  
  // optional uint32 chunk_size = 13 [default = 1024];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->chunk_size(), output);
  }
  
  // optional uint32 prefill_size = 14 [default = 15000];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->prefill_size(), output);
  }
  
  // optional uint32 next_buffer_fill_size = 15 [default = 15000];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->next_buffer_fill_size(), output);
  }
  
  // optional int32 inactive_wait_time = 16 [default = -1];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->inactive_wait_time(), output);
  }
  
  // optional uint32 thread_priority = 17 [default = 4];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->thread_priority(), output);
  }
  
  // optional .rec.audio.stretch.Stretch.Strategy strategy = 18 [default = AUDIO_MAGIC];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->strategy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stretch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool time_disabled = 1 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->time_disabled(), target);
  }
  
  // optional bool pitch_disabled = 2 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pitch_disabled(), target);
  }
  
  // optional bool passthrough_when_disabled = 3 [default = true];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passthrough_when_disabled(), target);
  }
  
  // optional double time_scale = 4 [default = 1];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_scale(), target);
  }
  
  // optional double time_percent = 5 [default = 100];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->time_percent(), target);
  }
  
  // optional double sample_rate = 6 [default = 44100];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sample_rate(), target);
  }
  
  // optional uint32 channels = 7 [default = 2];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channels(), target);
  }
  
  // optional double pitch_scale = 8 [default = 1];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pitch_scale(), target);
  }
  
  // optional double semitone_shift = 9 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->semitone_shift(), target);
  }
  
  // optional double detune_cents = 10 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->detune_cents(), target);
  }
  
  // optional uint32 bands = 11 [default = 2048];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bands(), target);
  }
  
  // optional uint32 filter_overlap = 12 [default = 1];
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->filter_overlap(), target);
  }
  
  // optional uint32 chunk_size = 13 [default = 1024];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->chunk_size(), target);
  }
  
  // optional uint32 prefill_size = 14 [default = 15000];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->prefill_size(), target);
  }
  
  // optional uint32 next_buffer_fill_size = 15 [default = 15000];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->next_buffer_fill_size(), target);
  }
  
  // optional int32 inactive_wait_time = 16 [default = -1];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->inactive_wait_time(), target);
  }
  
  // optional uint32 thread_priority = 17 [default = 4];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->thread_priority(), target);
  }
  
  // optional .rec.audio.stretch.Stretch.Strategy strategy = 18 [default = AUDIO_MAGIC];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->strategy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stretch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.audio.stretch.Stretch.Strategy strategy = 18 [default = AUDIO_MAGIC];
    if (has_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy());
    }
    
    // optional bool time_disabled = 1 [default = false];
    if (has_time_disabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool pitch_disabled = 2 [default = false];
    if (has_pitch_disabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool passthrough_when_disabled = 3 [default = true];
    if (has_passthrough_when_disabled()) {
      total_size += 1 + 1;
    }
    
    // optional double time_scale = 4 [default = 1];
    if (has_time_scale()) {
      total_size += 1 + 8;
    }
    
    // optional double time_percent = 5 [default = 100];
    if (has_time_percent()) {
      total_size += 1 + 8;
    }
    
    // optional double sample_rate = 6 [default = 44100];
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 channels = 7 [default = 2];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double pitch_scale = 8 [default = 1];
    if (has_pitch_scale()) {
      total_size += 1 + 8;
    }
    
    // optional double semitone_shift = 9 [default = 0];
    if (has_semitone_shift()) {
      total_size += 1 + 8;
    }
    
    // optional double detune_cents = 10 [default = 0];
    if (has_detune_cents()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 bands = 11 [default = 2048];
    if (has_bands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bands());
    }
    
    // optional uint32 filter_overlap = 12 [default = 1];
    if (has_filter_overlap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_overlap());
    }
    
    // optional uint32 chunk_size = 13 [default = 1024];
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_size());
    }
    
    // optional uint32 prefill_size = 14 [default = 15000];
    if (has_prefill_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefill_size());
    }
    
    // optional uint32 next_buffer_fill_size = 15 [default = 15000];
    if (has_next_buffer_fill_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_buffer_fill_size());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 inactive_wait_time = 16 [default = -1];
    if (has_inactive_wait_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inactive_wait_time());
    }
    
    // optional uint32 thread_priority = 17 [default = 4];
    if (has_thread_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_priority());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stretch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stretch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stretch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stretch::MergeFrom(const Stretch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_strategy(from.strategy());
    }
    if (from._has_bit(1)) {
      set_time_disabled(from.time_disabled());
    }
    if (from._has_bit(2)) {
      set_pitch_disabled(from.pitch_disabled());
    }
    if (from._has_bit(3)) {
      set_passthrough_when_disabled(from.passthrough_when_disabled());
    }
    if (from._has_bit(4)) {
      set_time_scale(from.time_scale());
    }
    if (from._has_bit(5)) {
      set_time_percent(from.time_percent());
    }
    if (from._has_bit(6)) {
      set_sample_rate(from.sample_rate());
    }
    if (from._has_bit(7)) {
      set_channels(from.channels());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pitch_scale(from.pitch_scale());
    }
    if (from._has_bit(9)) {
      set_semitone_shift(from.semitone_shift());
    }
    if (from._has_bit(10)) {
      set_detune_cents(from.detune_cents());
    }
    if (from._has_bit(11)) {
      set_bands(from.bands());
    }
    if (from._has_bit(12)) {
      set_filter_overlap(from.filter_overlap());
    }
    if (from._has_bit(13)) {
      set_chunk_size(from.chunk_size());
    }
    if (from._has_bit(14)) {
      set_prefill_size(from.prefill_size());
    }
    if (from._has_bit(15)) {
      set_next_buffer_fill_size(from.next_buffer_fill_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_inactive_wait_time(from.inactive_wait_time());
    }
    if (from._has_bit(17)) {
      set_thread_priority(from.thread_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stretch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stretch::CopyFrom(const Stretch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stretch::IsInitialized() const {
  
  return true;
}

void Stretch::Swap(Stretch* other) {
  if (other != this) {
    std::swap(strategy_, other->strategy_);
    std::swap(time_disabled_, other->time_disabled_);
    std::swap(pitch_disabled_, other->pitch_disabled_);
    std::swap(passthrough_when_disabled_, other->passthrough_when_disabled_);
    std::swap(time_scale_, other->time_scale_);
    std::swap(time_percent_, other->time_percent_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(channels_, other->channels_);
    std::swap(pitch_scale_, other->pitch_scale_);
    std::swap(semitone_shift_, other->semitone_shift_);
    std::swap(detune_cents_, other->detune_cents_);
    std::swap(bands_, other->bands_);
    std::swap(filter_overlap_, other->filter_overlap_);
    std::swap(chunk_size_, other->chunk_size_);
    std::swap(prefill_size_, other->prefill_size_);
    std::swap(next_buffer_fill_size_, other->next_buffer_fill_size_);
    std::swap(inactive_wait_time_, other->inactive_wait_time_);
    std::swap(thread_priority_, other->thread_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stretch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stretch_descriptor_;
  metadata.reflection = Stretch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stretch
}  // namespace audio
}  // namespace rec

// @@protoc_insertion_point(global_scope)
