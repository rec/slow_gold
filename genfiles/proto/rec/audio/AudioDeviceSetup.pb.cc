// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/audio/AudioDeviceSetup.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {

namespace {

const ::google::protobuf::Descriptor* AudioDeviceSetupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioDeviceSetupProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2faudio_2fAudioDeviceSetup_2eproto() {
  protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/audio/AudioDeviceSetup.proto");
  GOOGLE_CHECK(file != NULL);
  AudioDeviceSetupProto_descriptor_ = file->message_type(0);
  static const int AudioDeviceSetupProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, output_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, input_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, input_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, use_default_input_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, output_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, use_default_output_channels_),
  };
  AudioDeviceSetupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioDeviceSetupProto_descriptor_,
      AudioDeviceSetupProto::default_instance_,
      AudioDeviceSetupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDeviceSetupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioDeviceSetupProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2faudio_2fAudioDeviceSetup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioDeviceSetupProto_descriptor_, &AudioDeviceSetupProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2faudio_2fAudioDeviceSetup_2eproto() {
  delete AudioDeviceSetupProto::default_instance_;
  delete AudioDeviceSetupProto_reflection_;
}

void protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n rec/audio/AudioDeviceSetup.proto\022\trec."
    "audio\"\362\001\n\025AudioDeviceSetupProto\022\032\n\022outpu"
    "t_device_name\030\001 \001(\t\022\031\n\021input_device_name"
    "\030\002 \001(\t\022\023\n\013sample_rate\030\003 \001(\001\022\023\n\013buffer_si"
    "ze\030\004 \001(\004\022\026\n\016input_channels\030\005 \001(\014\022\"\n\032use_"
    "default_input_channels\030\006 \001(\010\022\027\n\017output_c"
    "hannels\030\007 \001(\014\022#\n\033use_default_output_chan"
    "nels\030\010 \001(\010", 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/audio/AudioDeviceSetup.proto", &protobuf_RegisterTypes);
  AudioDeviceSetupProto::default_instance_ = new AudioDeviceSetupProto();
  AudioDeviceSetupProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2faudio_2fAudioDeviceSetup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2faudio_2fAudioDeviceSetup_2eproto {
  StaticDescriptorInitializer_rec_2faudio_2fAudioDeviceSetup_2eproto() {
    protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();
  }
} static_descriptor_initializer_rec_2faudio_2fAudioDeviceSetup_2eproto_;


// ===================================================================

const ::std::string AudioDeviceSetupProto::_default_output_device_name_;
const ::std::string AudioDeviceSetupProto::_default_input_device_name_;
const ::std::string AudioDeviceSetupProto::_default_input_channels_;
const ::std::string AudioDeviceSetupProto::_default_output_channels_;
#ifndef _MSC_VER
const int AudioDeviceSetupProto::kOutputDeviceNameFieldNumber;
const int AudioDeviceSetupProto::kInputDeviceNameFieldNumber;
const int AudioDeviceSetupProto::kSampleRateFieldNumber;
const int AudioDeviceSetupProto::kBufferSizeFieldNumber;
const int AudioDeviceSetupProto::kInputChannelsFieldNumber;
const int AudioDeviceSetupProto::kUseDefaultInputChannelsFieldNumber;
const int AudioDeviceSetupProto::kOutputChannelsFieldNumber;
const int AudioDeviceSetupProto::kUseDefaultOutputChannelsFieldNumber;
#endif  // !_MSC_VER

AudioDeviceSetupProto::AudioDeviceSetupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioDeviceSetupProto::InitAsDefaultInstance() {
}

AudioDeviceSetupProto::AudioDeviceSetupProto(const AudioDeviceSetupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioDeviceSetupProto::SharedCtor() {
  _cached_size_ = 0;
  output_device_name_ = const_cast< ::std::string*>(&_default_output_device_name_);
  input_device_name_ = const_cast< ::std::string*>(&_default_input_device_name_);
  sample_rate_ = 0;
  buffer_size_ = GOOGLE_ULONGLONG(0);
  input_channels_ = const_cast< ::std::string*>(&_default_input_channels_);
  use_default_input_channels_ = false;
  output_channels_ = const_cast< ::std::string*>(&_default_output_channels_);
  use_default_output_channels_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioDeviceSetupProto::~AudioDeviceSetupProto() {
  SharedDtor();
}

void AudioDeviceSetupProto::SharedDtor() {
  if (output_device_name_ != &_default_output_device_name_) {
    delete output_device_name_;
  }
  if (input_device_name_ != &_default_input_device_name_) {
    delete input_device_name_;
  }
  if (input_channels_ != &_default_input_channels_) {
    delete input_channels_;
  }
  if (output_channels_ != &_default_output_channels_) {
    delete output_channels_;
  }
  if (this != default_instance_) {
  }
}

void AudioDeviceSetupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioDeviceSetupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioDeviceSetupProto_descriptor_;
}

const AudioDeviceSetupProto& AudioDeviceSetupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2fAudioDeviceSetup_2eproto();  return *default_instance_;
}

AudioDeviceSetupProto* AudioDeviceSetupProto::default_instance_ = NULL;

AudioDeviceSetupProto* AudioDeviceSetupProto::New() const {
  return new AudioDeviceSetupProto;
}

void AudioDeviceSetupProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (output_device_name_ != &_default_output_device_name_) {
        output_device_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (input_device_name_ != &_default_input_device_name_) {
        input_device_name_->clear();
      }
    }
    sample_rate_ = 0;
    buffer_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(4)) {
      if (input_channels_ != &_default_input_channels_) {
        input_channels_->clear();
      }
    }
    use_default_input_channels_ = false;
    if (_has_bit(6)) {
      if (output_channels_ != &_default_output_channels_) {
        output_channels_->clear();
      }
    }
    use_default_output_channels_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioDeviceSetupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string output_device_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_device_name().data(), this->output_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input_device_name;
        break;
      }
      
      // optional string input_device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_device_name().data(), this->input_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sample_rate;
        break;
      }
      
      // optional double sample_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buffer_size;
        break;
      }
      
      // optional uint64 buffer_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_input_channels;
        break;
      }
      
      // optional bytes input_channels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_default_input_channels;
        break;
      }
      
      // optional bool use_default_input_channels = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_default_input_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_default_input_channels_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_output_channels;
        break;
      }
      
      // optional bytes output_channels = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_use_default_output_channels;
        break;
      }
      
      // optional bool use_default_output_channels = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_default_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_default_output_channels_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioDeviceSetupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string output_device_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_device_name().data(), this->output_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->output_device_name(), output);
  }
  
  // optional string input_device_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_device_name().data(), this->input_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input_device_name(), output);
  }
  
  // optional double sample_rate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sample_rate(), output);
  }
  
  // optional uint64 buffer_size = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buffer_size(), output);
  }
  
  // optional bytes input_channels = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->input_channels(), output);
  }
  
  // optional bool use_default_input_channels = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_default_input_channels(), output);
  }
  
  // optional bytes output_channels = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->output_channels(), output);
  }
  
  // optional bool use_default_output_channels = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_default_output_channels(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioDeviceSetupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string output_device_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_device_name().data(), this->output_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_device_name(), target);
  }
  
  // optional string input_device_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_device_name().data(), this->input_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_device_name(), target);
  }
  
  // optional double sample_rate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sample_rate(), target);
  }
  
  // optional uint64 buffer_size = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buffer_size(), target);
  }
  
  // optional bytes input_channels = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->input_channels(), target);
  }
  
  // optional bool use_default_input_channels = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_default_input_channels(), target);
  }
  
  // optional bytes output_channels = 7;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->output_channels(), target);
  }
  
  // optional bool use_default_output_channels = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_default_output_channels(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioDeviceSetupProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string output_device_name = 1;
    if (has_output_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_device_name());
    }
    
    // optional string input_device_name = 2;
    if (has_input_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_device_name());
    }
    
    // optional double sample_rate = 3;
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 buffer_size = 4;
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }
    
    // optional bytes input_channels = 5;
    if (has_input_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->input_channels());
    }
    
    // optional bool use_default_input_channels = 6;
    if (has_use_default_input_channels()) {
      total_size += 1 + 1;
    }
    
    // optional bytes output_channels = 7;
    if (has_output_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->output_channels());
    }
    
    // optional bool use_default_output_channels = 8;
    if (has_use_default_output_channels()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioDeviceSetupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioDeviceSetupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioDeviceSetupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioDeviceSetupProto::MergeFrom(const AudioDeviceSetupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_output_device_name(from.output_device_name());
    }
    if (from._has_bit(1)) {
      set_input_device_name(from.input_device_name());
    }
    if (from._has_bit(2)) {
      set_sample_rate(from.sample_rate());
    }
    if (from._has_bit(3)) {
      set_buffer_size(from.buffer_size());
    }
    if (from._has_bit(4)) {
      set_input_channels(from.input_channels());
    }
    if (from._has_bit(5)) {
      set_use_default_input_channels(from.use_default_input_channels());
    }
    if (from._has_bit(6)) {
      set_output_channels(from.output_channels());
    }
    if (from._has_bit(7)) {
      set_use_default_output_channels(from.use_default_output_channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioDeviceSetupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDeviceSetupProto::CopyFrom(const AudioDeviceSetupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDeviceSetupProto::IsInitialized() const {
  
  return true;
}

void AudioDeviceSetupProto::Swap(AudioDeviceSetupProto* other) {
  if (other != this) {
    std::swap(output_device_name_, other->output_device_name_);
    std::swap(input_device_name_, other->input_device_name_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(buffer_size_, other->buffer_size_);
    std::swap(input_channels_, other->input_channels_);
    std::swap(use_default_input_channels_, other->use_default_input_channels_);
    std::swap(output_channels_, other->output_channels_);
    std::swap(use_default_output_channels_, other->use_default_output_channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioDeviceSetupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioDeviceSetupProto_descriptor_;
  metadata.reflection = AudioDeviceSetupProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace audio
}  // namespace rec

// @@protoc_insertion_point(global_scope)
