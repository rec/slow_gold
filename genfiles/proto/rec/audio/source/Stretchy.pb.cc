// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/audio/source/Stretchy.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {
namespace source {

namespace {

const ::google::protobuf::Descriptor* TimeStretch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeStretch_reflection_ = NULL;
const ::google::protobuf::Descriptor* StretchyDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StretchyDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* StretchyRunnyDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StretchyRunnyDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2faudio_2fsource_2fStretchy_2eproto() {
  protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/audio/source/Stretchy.proto");
  GOOGLE_CHECK(file != NULL);
  TimeStretch_descriptor_ = file->message_type(0);
  static const int TimeStretch_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, time_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, pitch_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, bands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, filter_overlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, prefill_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, next_buffer_fill_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, inactive_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, thread_priority_),
  };
  TimeStretch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeStretch_descriptor_,
      TimeStretch::default_instance_,
      TimeStretch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStretch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeStretch));
  StretchyDesc_descriptor_ = file->message_type(1);
  static const int StretchyDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyDesc, stretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyDesc, file_),
  };
  StretchyDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StretchyDesc_descriptor_,
      StretchyDesc::default_instance_,
      StretchyDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StretchyDesc));
  StretchyRunnyDesc_descriptor_ = file->message_type(2);
  static const int StretchyRunnyDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyRunnyDesc, stretchy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyRunnyDesc, runny_),
  };
  StretchyRunnyDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StretchyRunnyDesc_descriptor_,
      StretchyRunnyDesc::default_instance_,
      StretchyRunnyDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyRunnyDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StretchyRunnyDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StretchyRunnyDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2faudio_2fsource_2fStretchy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeStretch_descriptor_, &TimeStretch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StretchyDesc_descriptor_, &StretchyDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StretchyRunnyDesc_descriptor_, &StretchyRunnyDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2faudio_2fsource_2fStretchy_2eproto() {
  delete TimeStretch::default_instance_;
  delete TimeStretch_reflection_;
  delete StretchyDesc::default_instance_;
  delete StretchyDesc_reflection_;
  delete StretchyRunnyDesc::default_instance_;
  delete StretchyRunnyDesc_reflection_;
}

void protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::widget::tree::protobuf_AddDesc_rec_2fwidget_2ftree_2fVolumeFile_2eproto();
  ::rec::audio::source::protobuf_AddDesc_rec_2faudio_2fsource_2fRunny_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rec/audio/source/Stretchy.proto\022\020rec.a"
    "udio.source\032 rec/widget/tree/VolumeFile."
    "proto\032\034rec/audio/source/Runny.proto\"\265\002\n\013"
    "TimeStretch\022\025\n\ntime_scale\030\001 \001(\001:\0011\022\032\n\013sa"
    "mple_rate\030\002 \001(\001:\00544100\022\023\n\010channels\030\003 \001(\r"
    ":\0012\022\026\n\013pitch_scale\030\004 \001(\001:\0011\022\023\n\005bands\030\005 \001"
    "(\r:\0042048\022\031\n\016filter_overlap\030\006 \001(\r:\0011\022\027\n\nc"
    "hunk_size\030\007 \001(\r:\003512\022\033\n\014prefill_size\030\010 \001"
    "(\r:\00515000\022$\n\025next_buffer_fill_size\030\t \001(\r"
    ":\00515000\022\036\n\022inactive_wait_time\030\n \001(\005:\002-1\022"
    "\032\n\017thread_priority\030\013 \001(\r:\0014\"i\n\014StretchyD"
    "esc\022.\n\007stretch\030\001 \001(\0132\035.rec.audio.source."
    "TimeStretch\022)\n\004file\030\002 \001(\0132\033.rec.widget.t"
    "ree.VolumeFile\"q\n\021StretchyRunnyDesc\0220\n\010s"
    "tretchy\030\001 \001(\0132\036.rec.audio.source.Stretch"
    "yDesc\022*\n\005runny\030\002 \001(\0132\033.rec.audio.source."
    "RunnyDesc", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/audio/source/Stretchy.proto", &protobuf_RegisterTypes);
  TimeStretch::default_instance_ = new TimeStretch();
  StretchyDesc::default_instance_ = new StretchyDesc();
  StretchyRunnyDesc::default_instance_ = new StretchyRunnyDesc();
  TimeStretch::default_instance_->InitAsDefaultInstance();
  StretchyDesc::default_instance_->InitAsDefaultInstance();
  StretchyRunnyDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2faudio_2fsource_2fStretchy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2faudio_2fsource_2fStretchy_2eproto {
  StaticDescriptorInitializer_rec_2faudio_2fsource_2fStretchy_2eproto() {
    protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto();
  }
} static_descriptor_initializer_rec_2faudio_2fsource_2fStretchy_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TimeStretch::kTimeScaleFieldNumber;
const int TimeStretch::kSampleRateFieldNumber;
const int TimeStretch::kChannelsFieldNumber;
const int TimeStretch::kPitchScaleFieldNumber;
const int TimeStretch::kBandsFieldNumber;
const int TimeStretch::kFilterOverlapFieldNumber;
const int TimeStretch::kChunkSizeFieldNumber;
const int TimeStretch::kPrefillSizeFieldNumber;
const int TimeStretch::kNextBufferFillSizeFieldNumber;
const int TimeStretch::kInactiveWaitTimeFieldNumber;
const int TimeStretch::kThreadPriorityFieldNumber;
#endif  // !_MSC_VER

TimeStretch::TimeStretch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeStretch::InitAsDefaultInstance() {
}

TimeStretch::TimeStretch(const TimeStretch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeStretch::SharedCtor() {
  _cached_size_ = 0;
  time_scale_ = 1;
  sample_rate_ = 44100;
  channels_ = 2u;
  pitch_scale_ = 1;
  bands_ = 2048u;
  filter_overlap_ = 1u;
  chunk_size_ = 512u;
  prefill_size_ = 15000u;
  next_buffer_fill_size_ = 15000u;
  inactive_wait_time_ = -1;
  thread_priority_ = 4u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeStretch::~TimeStretch() {
  SharedDtor();
}

void TimeStretch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeStretch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStretch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeStretch_descriptor_;
}

const TimeStretch& TimeStretch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto();  return *default_instance_;
}

TimeStretch* TimeStretch::default_instance_ = NULL;

TimeStretch* TimeStretch::New() const {
  return new TimeStretch;
}

void TimeStretch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_scale_ = 1;
    sample_rate_ = 44100;
    channels_ = 2u;
    pitch_scale_ = 1;
    bands_ = 2048u;
    filter_overlap_ = 1u;
    chunk_size_ = 512u;
    prefill_size_ = 15000u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    next_buffer_fill_size_ = 15000u;
    inactive_wait_time_ = -1;
    thread_priority_ = 4u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeStretch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time_scale = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_scale_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sample_rate;
        break;
      }
      
      // optional double sample_rate = 2 [default = 44100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }
      
      // optional uint32 channels = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_pitch_scale;
        break;
      }
      
      // optional double pitch_scale = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pitch_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_scale_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bands;
        break;
      }
      
      // optional uint32 bands = 5 [default = 2048];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bands_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_filter_overlap;
        break;
      }
      
      // optional uint32 filter_overlap = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_overlap_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chunk_size;
        break;
      }
      
      // optional uint32 chunk_size = 7 [default = 512];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_size_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prefill_size;
        break;
      }
      
      // optional uint32 prefill_size = 8 [default = 15000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefill_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefill_size_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_next_buffer_fill_size;
        break;
      }
      
      // optional uint32 next_buffer_fill_size = 9 [default = 15000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_buffer_fill_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_buffer_fill_size_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_inactive_wait_time;
        break;
      }
      
      // optional int32 inactive_wait_time = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactive_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inactive_wait_time_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_thread_priority;
        break;
      }
      
      // optional uint32 thread_priority = 11 [default = 4];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_priority_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeStretch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double time_scale = 1 [default = 1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_scale(), output);
  }
  
  // optional double sample_rate = 2 [default = 44100];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sample_rate(), output);
  }
  
  // optional uint32 channels = 3 [default = 2];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channels(), output);
  }
  
  // optional double pitch_scale = 4 [default = 1];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch_scale(), output);
  }
  
  // optional uint32 bands = 5 [default = 2048];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bands(), output);
  }
  
  // optional uint32 filter_overlap = 6 [default = 1];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filter_overlap(), output);
  }
  
  // optional uint32 chunk_size = 7 [default = 512];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chunk_size(), output);
  }
  
  // optional uint32 prefill_size = 8 [default = 15000];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prefill_size(), output);
  }
  
  // optional uint32 next_buffer_fill_size = 9 [default = 15000];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->next_buffer_fill_size(), output);
  }
  
  // optional int32 inactive_wait_time = 10 [default = -1];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->inactive_wait_time(), output);
  }
  
  // optional uint32 thread_priority = 11 [default = 4];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->thread_priority(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeStretch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double time_scale = 1 [default = 1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_scale(), target);
  }
  
  // optional double sample_rate = 2 [default = 44100];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sample_rate(), target);
  }
  
  // optional uint32 channels = 3 [default = 2];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channels(), target);
  }
  
  // optional double pitch_scale = 4 [default = 1];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch_scale(), target);
  }
  
  // optional uint32 bands = 5 [default = 2048];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bands(), target);
  }
  
  // optional uint32 filter_overlap = 6 [default = 1];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->filter_overlap(), target);
  }
  
  // optional uint32 chunk_size = 7 [default = 512];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chunk_size(), target);
  }
  
  // optional uint32 prefill_size = 8 [default = 15000];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prefill_size(), target);
  }
  
  // optional uint32 next_buffer_fill_size = 9 [default = 15000];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->next_buffer_fill_size(), target);
  }
  
  // optional int32 inactive_wait_time = 10 [default = -1];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->inactive_wait_time(), target);
  }
  
  // optional uint32 thread_priority = 11 [default = 4];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->thread_priority(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeStretch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double time_scale = 1 [default = 1];
    if (has_time_scale()) {
      total_size += 1 + 8;
    }
    
    // optional double sample_rate = 2 [default = 44100];
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 channels = 3 [default = 2];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }
    
    // optional double pitch_scale = 4 [default = 1];
    if (has_pitch_scale()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 bands = 5 [default = 2048];
    if (has_bands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bands());
    }
    
    // optional uint32 filter_overlap = 6 [default = 1];
    if (has_filter_overlap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_overlap());
    }
    
    // optional uint32 chunk_size = 7 [default = 512];
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_size());
    }
    
    // optional uint32 prefill_size = 8 [default = 15000];
    if (has_prefill_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefill_size());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 next_buffer_fill_size = 9 [default = 15000];
    if (has_next_buffer_fill_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_buffer_fill_size());
    }
    
    // optional int32 inactive_wait_time = 10 [default = -1];
    if (has_inactive_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inactive_wait_time());
    }
    
    // optional uint32 thread_priority = 11 [default = 4];
    if (has_thread_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_priority());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStretch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeStretch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeStretch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeStretch::MergeFrom(const TimeStretch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time_scale(from.time_scale());
    }
    if (from._has_bit(1)) {
      set_sample_rate(from.sample_rate());
    }
    if (from._has_bit(2)) {
      set_channels(from.channels());
    }
    if (from._has_bit(3)) {
      set_pitch_scale(from.pitch_scale());
    }
    if (from._has_bit(4)) {
      set_bands(from.bands());
    }
    if (from._has_bit(5)) {
      set_filter_overlap(from.filter_overlap());
    }
    if (from._has_bit(6)) {
      set_chunk_size(from.chunk_size());
    }
    if (from._has_bit(7)) {
      set_prefill_size(from.prefill_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_next_buffer_fill_size(from.next_buffer_fill_size());
    }
    if (from._has_bit(9)) {
      set_inactive_wait_time(from.inactive_wait_time());
    }
    if (from._has_bit(10)) {
      set_thread_priority(from.thread_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeStretch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStretch::CopyFrom(const TimeStretch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStretch::IsInitialized() const {
  
  return true;
}

void TimeStretch::Swap(TimeStretch* other) {
  if (other != this) {
    std::swap(time_scale_, other->time_scale_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(channels_, other->channels_);
    std::swap(pitch_scale_, other->pitch_scale_);
    std::swap(bands_, other->bands_);
    std::swap(filter_overlap_, other->filter_overlap_);
    std::swap(chunk_size_, other->chunk_size_);
    std::swap(prefill_size_, other->prefill_size_);
    std::swap(next_buffer_fill_size_, other->next_buffer_fill_size_);
    std::swap(inactive_wait_time_, other->inactive_wait_time_);
    std::swap(thread_priority_, other->thread_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeStretch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeStretch_descriptor_;
  metadata.reflection = TimeStretch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StretchyDesc::kStretchFieldNumber;
const int StretchyDesc::kFileFieldNumber;
#endif  // !_MSC_VER

StretchyDesc::StretchyDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StretchyDesc::InitAsDefaultInstance() {
  stretch_ = const_cast< ::rec::audio::source::TimeStretch*>(&::rec::audio::source::TimeStretch::default_instance());
  file_ = const_cast< ::rec::widget::tree::VolumeFile*>(&::rec::widget::tree::VolumeFile::default_instance());
}

StretchyDesc::StretchyDesc(const StretchyDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StretchyDesc::SharedCtor() {
  _cached_size_ = 0;
  stretch_ = NULL;
  file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StretchyDesc::~StretchyDesc() {
  SharedDtor();
}

void StretchyDesc::SharedDtor() {
  if (this != default_instance_) {
    delete stretch_;
    delete file_;
  }
}

void StretchyDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StretchyDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StretchyDesc_descriptor_;
}

const StretchyDesc& StretchyDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto();  return *default_instance_;
}

StretchyDesc* StretchyDesc::default_instance_ = NULL;

StretchyDesc* StretchyDesc::New() const {
  return new StretchyDesc;
}

void StretchyDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (stretch_ != NULL) stretch_->::rec::audio::source::TimeStretch::Clear();
    }
    if (_has_bit(1)) {
      if (file_ != NULL) file_->::rec::widget::tree::VolumeFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StretchyDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.audio.source.TimeStretch stretch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stretch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // optional .rec.widget.tree.VolumeFile file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StretchyDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.audio.source.TimeStretch stretch = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stretch(), output);
  }
  
  // optional .rec.widget.tree.VolumeFile file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StretchyDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.audio.source.TimeStretch stretch = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stretch(), target);
  }
  
  // optional .rec.widget.tree.VolumeFile file = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StretchyDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.audio.source.TimeStretch stretch = 1;
    if (has_stretch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stretch());
    }
    
    // optional .rec.widget.tree.VolumeFile file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StretchyDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StretchyDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StretchyDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StretchyDesc::MergeFrom(const StretchyDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_stretch()->::rec::audio::source::TimeStretch::MergeFrom(from.stretch());
    }
    if (from._has_bit(1)) {
      mutable_file()->::rec::widget::tree::VolumeFile::MergeFrom(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StretchyDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StretchyDesc::CopyFrom(const StretchyDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StretchyDesc::IsInitialized() const {
  
  return true;
}

void StretchyDesc::Swap(StretchyDesc* other) {
  if (other != this) {
    std::swap(stretch_, other->stretch_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StretchyDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StretchyDesc_descriptor_;
  metadata.reflection = StretchyDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StretchyRunnyDesc::kStretchyFieldNumber;
const int StretchyRunnyDesc::kRunnyFieldNumber;
#endif  // !_MSC_VER

StretchyRunnyDesc::StretchyRunnyDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StretchyRunnyDesc::InitAsDefaultInstance() {
  stretchy_ = const_cast< ::rec::audio::source::StretchyDesc*>(&::rec::audio::source::StretchyDesc::default_instance());
  runny_ = const_cast< ::rec::audio::source::RunnyDesc*>(&::rec::audio::source::RunnyDesc::default_instance());
}

StretchyRunnyDesc::StretchyRunnyDesc(const StretchyRunnyDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StretchyRunnyDesc::SharedCtor() {
  _cached_size_ = 0;
  stretchy_ = NULL;
  runny_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StretchyRunnyDesc::~StretchyRunnyDesc() {
  SharedDtor();
}

void StretchyRunnyDesc::SharedDtor() {
  if (this != default_instance_) {
    delete stretchy_;
    delete runny_;
  }
}

void StretchyRunnyDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StretchyRunnyDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StretchyRunnyDesc_descriptor_;
}

const StretchyRunnyDesc& StretchyRunnyDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faudio_2fsource_2fStretchy_2eproto();  return *default_instance_;
}

StretchyRunnyDesc* StretchyRunnyDesc::default_instance_ = NULL;

StretchyRunnyDesc* StretchyRunnyDesc::New() const {
  return new StretchyRunnyDesc;
}

void StretchyRunnyDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (stretchy_ != NULL) stretchy_->::rec::audio::source::StretchyDesc::Clear();
    }
    if (_has_bit(1)) {
      if (runny_ != NULL) runny_->::rec::audio::source::RunnyDesc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StretchyRunnyDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.audio.source.StretchyDesc stretchy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stretchy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_runny;
        break;
      }
      
      // optional .rec.audio.source.RunnyDesc runny = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runny:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runny()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StretchyRunnyDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.audio.source.StretchyDesc stretchy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stretchy(), output);
  }
  
  // optional .rec.audio.source.RunnyDesc runny = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->runny(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StretchyRunnyDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.audio.source.StretchyDesc stretchy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stretchy(), target);
  }
  
  // optional .rec.audio.source.RunnyDesc runny = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->runny(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StretchyRunnyDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.audio.source.StretchyDesc stretchy = 1;
    if (has_stretchy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stretchy());
    }
    
    // optional .rec.audio.source.RunnyDesc runny = 2;
    if (has_runny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->runny());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StretchyRunnyDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StretchyRunnyDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StretchyRunnyDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StretchyRunnyDesc::MergeFrom(const StretchyRunnyDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_stretchy()->::rec::audio::source::StretchyDesc::MergeFrom(from.stretchy());
    }
    if (from._has_bit(1)) {
      mutable_runny()->::rec::audio::source::RunnyDesc::MergeFrom(from.runny());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StretchyRunnyDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StretchyRunnyDesc::CopyFrom(const StretchyRunnyDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StretchyRunnyDesc::IsInitialized() const {
  
  return true;
}

void StretchyRunnyDesc::Swap(StretchyRunnyDesc* other) {
  if (other != this) {
    std::swap(stretchy_, other->stretchy_);
    std::swap(runny_, other->runny_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StretchyRunnyDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StretchyRunnyDesc_descriptor_;
  metadata.reflection = StretchyRunnyDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace source
}  // namespace audio
}  // namespace rec

// @@protoc_insertion_point(global_scope)
