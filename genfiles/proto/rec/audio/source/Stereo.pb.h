// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/audio/source/Stereo.proto

#ifndef PROTOBUF_rec_2faudio_2fsource_2fStereo_2eproto__INCLUDED
#define PROTOBUF_rec_2faudio_2fsource_2fStereo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {
namespace source {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2faudio_2fsource_2fStereo_2eproto();
void protobuf_AssignDesc_rec_2faudio_2fsource_2fStereo_2eproto();
void protobuf_ShutdownFile_rec_2faudio_2fsource_2fStereo_2eproto();

class StereoProto;

enum StereoProto_Side {
  StereoProto_Side_LEFT = 0,
  StereoProto_Side_RIGHT = 1,
  StereoProto_Side_LEFT_PLUS_RIGHT = 2
};
bool StereoProto_Side_IsValid(int value);
const StereoProto_Side StereoProto_Side_Side_MIN = StereoProto_Side_LEFT;
const StereoProto_Side StereoProto_Side_Side_MAX = StereoProto_Side_LEFT_PLUS_RIGHT;
const int StereoProto_Side_Side_ARRAYSIZE = StereoProto_Side_Side_MAX + 1;

const ::google::protobuf::EnumDescriptor* StereoProto_Side_descriptor();
inline const ::std::string& StereoProto_Side_Name(StereoProto_Side value) {
  return ::google::protobuf::internal::NameOfEnum(
    StereoProto_Side_descriptor(), value);
}
inline bool StereoProto_Side_Parse(
    const ::std::string& name, StereoProto_Side* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StereoProto_Side>(
    StereoProto_Side_descriptor(), name, value);
}
enum StereoProto_Type {
  StereoProto_Type_PASSTHROUGH = 0,
  StereoProto_Type_SINGLE = 1,
  StereoProto_Type_FLIP = 2,
  StereoProto_Type_CENTER_ELIMINATION = 3,
  StereoProto_Type_CENTER_ELIMINATION_MONO = 4
};
bool StereoProto_Type_IsValid(int value);
const StereoProto_Type StereoProto_Type_Type_MIN = StereoProto_Type_PASSTHROUGH;
const StereoProto_Type StereoProto_Type_Type_MAX = StereoProto_Type_CENTER_ELIMINATION_MONO;
const int StereoProto_Type_Type_ARRAYSIZE = StereoProto_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StereoProto_Type_descriptor();
inline const ::std::string& StereoProto_Type_Name(StereoProto_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StereoProto_Type_descriptor(), value);
}
inline bool StereoProto_Type_Parse(
    const ::std::string& name, StereoProto_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StereoProto_Type>(
    StereoProto_Type_descriptor(), name, value);
}
// ===================================================================

class StereoProto : public ::google::protobuf::Message {
 public:
  StereoProto();
  virtual ~StereoProto();
  
  StereoProto(const StereoProto& from);
  
  inline StereoProto& operator=(const StereoProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoProto& default_instance();
  
  void Swap(StereoProto* other);
  
  // implements Message ----------------------------------------------
  
  StereoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoProto& from);
  void MergeFrom(const StereoProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StereoProto_Side Side;
  static const Side LEFT = StereoProto_Side_LEFT;
  static const Side RIGHT = StereoProto_Side_RIGHT;
  static const Side LEFT_PLUS_RIGHT = StereoProto_Side_LEFT_PLUS_RIGHT;
  static inline bool Side_IsValid(int value) {
    return StereoProto_Side_IsValid(value);
  }
  static const Side Side_MIN =
    StereoProto_Side_Side_MIN;
  static const Side Side_MAX =
    StereoProto_Side_Side_MAX;
  static const int Side_ARRAYSIZE =
    StereoProto_Side_Side_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Side_descriptor() {
    return StereoProto_Side_descriptor();
  }
  static inline const ::std::string& Side_Name(Side value) {
    return StereoProto_Side_Name(value);
  }
  static inline bool Side_Parse(const ::std::string& name,
      Side* value) {
    return StereoProto_Side_Parse(name, value);
  }
  
  typedef StereoProto_Type Type;
  static const Type PASSTHROUGH = StereoProto_Type_PASSTHROUGH;
  static const Type SINGLE = StereoProto_Type_SINGLE;
  static const Type FLIP = StereoProto_Type_FLIP;
  static const Type CENTER_ELIMINATION = StereoProto_Type_CENTER_ELIMINATION;
  static const Type CENTER_ELIMINATION_MONO = StereoProto_Type_CENTER_ELIMINATION_MONO;
  static inline bool Type_IsValid(int value) {
    return StereoProto_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StereoProto_Type_Type_MIN;
  static const Type Type_MAX =
    StereoProto_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StereoProto_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StereoProto_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StereoProto_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StereoProto_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.audio.source.StereoProto.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rec::audio::source::StereoProto_Type type() const;
  inline void set_type(::rec::audio::source::StereoProto_Type value);
  
  // optional .rec.audio.source.StereoProto.Side side = 2;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 2;
  inline ::rec::audio::source::StereoProto_Side side() const;
  inline void set_side(::rec::audio::source::StereoProto_Side value);
  
  // @@protoc_insertion_point(class_scope:rec.audio.source.StereoProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  int side_;
  friend void  protobuf_AddDesc_rec_2faudio_2fsource_2fStereo_2eproto();
  friend void protobuf_AssignDesc_rec_2faudio_2fsource_2fStereo_2eproto();
  friend void protobuf_ShutdownFile_rec_2faudio_2fsource_2fStereo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StereoProto* default_instance_;
};
// ===================================================================


// ===================================================================

// StereoProto

// optional .rec.audio.source.StereoProto.Type type = 1;
inline bool StereoProto::has_type() const {
  return _has_bit(0);
}
inline void StereoProto::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::rec::audio::source::StereoProto_Type StereoProto::type() const {
  return static_cast< ::rec::audio::source::StereoProto_Type >(type_);
}
inline void StereoProto::set_type(::rec::audio::source::StereoProto_Type value) {
  GOOGLE_DCHECK(::rec::audio::source::StereoProto_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional .rec.audio.source.StereoProto.Side side = 2;
inline bool StereoProto::has_side() const {
  return _has_bit(1);
}
inline void StereoProto::clear_side() {
  side_ = 0;
  _clear_bit(1);
}
inline ::rec::audio::source::StereoProto_Side StereoProto::side() const {
  return static_cast< ::rec::audio::source::StereoProto_Side >(side_);
}
inline void StereoProto::set_side(::rec::audio::source::StereoProto_Side value) {
  GOOGLE_DCHECK(::rec::audio::source::StereoProto_Side_IsValid(value));
  _set_bit(1);
  side_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace source
}  // namespace audio
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::audio::source::StereoProto_Side>() {
  return ::rec::audio::source::StereoProto_Side_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::audio::source::StereoProto_Type>() {
  return ::rec::audio::source::StereoProto_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2faudio_2fsource_2fStereo_2eproto__INCLUDED
