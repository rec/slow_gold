// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/audio/source/Runny.proto

#ifndef PROTOBUF_rec_2faudio_2fsource_2fRunny_2eproto__INCLUDED
#define PROTOBUF_rec_2faudio_2fsource_2fRunny_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/util/thread/Thread.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace audio {
namespace source {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2faudio_2fsource_2fRunny_2eproto();
void protobuf_AssignDesc_rec_2faudio_2fsource_2fRunny_2eproto();
void protobuf_ShutdownFile_rec_2faudio_2fsource_2fRunny_2eproto();

class RunnyProto;

// ===================================================================

class RunnyProto : public ::google::protobuf::Message {
 public:
  RunnyProto();
  virtual ~RunnyProto();
  
  RunnyProto(const RunnyProto& from);
  
  inline RunnyProto& operator=(const RunnyProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunnyProto& default_instance();
  
  void Swap(RunnyProto* other);
  
  // implements Message ----------------------------------------------
  
  RunnyProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunnyProto& from);
  void MergeFrom(const RunnyProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 buffer_size = 1 [default = 251200];
  inline bool has_buffer_size() const;
  inline void clear_buffer_size();
  static const int kBufferSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 buffer_size() const;
  inline void set_buffer_size(::google::protobuf::uint32 value);
  
  // optional uint32 chunk_size = 2 [default = 1024];
  inline bool has_chunk_size() const;
  inline void clear_chunk_size();
  static const int kChunkSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 chunk_size() const;
  inline void set_chunk_size(::google::protobuf::uint32 value);
  
  // optional .rec.util.thread.ThreadDescription thread = 3;
  inline bool has_thread() const;
  inline void clear_thread();
  static const int kThreadFieldNumber = 3;
  inline const ::rec::util::thread::ThreadDescription& thread() const;
  inline ::rec::util::thread::ThreadDescription* mutable_thread();
  
  // @@protoc_insertion_point(class_scope:rec.audio.source.RunnyProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 buffer_size_;
  ::google::protobuf::uint32 chunk_size_;
  ::rec::util::thread::ThreadDescription* thread_;
  friend void  protobuf_AddDesc_rec_2faudio_2fsource_2fRunny_2eproto();
  friend void protobuf_AssignDesc_rec_2faudio_2fsource_2fRunny_2eproto();
  friend void protobuf_ShutdownFile_rec_2faudio_2fsource_2fRunny_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RunnyProto* default_instance_;
};
// ===================================================================


// ===================================================================

// RunnyProto

// optional uint32 buffer_size = 1 [default = 251200];
inline bool RunnyProto::has_buffer_size() const {
  return _has_bit(0);
}
inline void RunnyProto::clear_buffer_size() {
  buffer_size_ = 251200u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 RunnyProto::buffer_size() const {
  return buffer_size_;
}
inline void RunnyProto::set_buffer_size(::google::protobuf::uint32 value) {
  _set_bit(0);
  buffer_size_ = value;
}

// optional uint32 chunk_size = 2 [default = 1024];
inline bool RunnyProto::has_chunk_size() const {
  return _has_bit(1);
}
inline void RunnyProto::clear_chunk_size() {
  chunk_size_ = 1024u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 RunnyProto::chunk_size() const {
  return chunk_size_;
}
inline void RunnyProto::set_chunk_size(::google::protobuf::uint32 value) {
  _set_bit(1);
  chunk_size_ = value;
}

// optional .rec.util.thread.ThreadDescription thread = 3;
inline bool RunnyProto::has_thread() const {
  return _has_bit(2);
}
inline void RunnyProto::clear_thread() {
  if (thread_ != NULL) thread_->::rec::util::thread::ThreadDescription::Clear();
  _clear_bit(2);
}
inline const ::rec::util::thread::ThreadDescription& RunnyProto::thread() const {
  return thread_ != NULL ? *thread_ : *default_instance_->thread_;
}
inline ::rec::util::thread::ThreadDescription* RunnyProto::mutable_thread() {
  _set_bit(2);
  if (thread_ == NULL) thread_ = new ::rec::util::thread::ThreadDescription;
  return thread_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace source
}  // namespace audio
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2faudio_2fsource_2fRunny_2eproto__INCLUDED
