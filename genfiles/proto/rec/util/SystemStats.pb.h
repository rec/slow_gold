// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/util/SystemStats.proto

#ifndef PROTOBUF_rec_2futil_2fSystemStats_2eproto__INCLUDED
#define PROTOBUF_rec_2futil_2fSystemStats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace util {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2futil_2fSystemStats_2eproto();
void protobuf_AssignDesc_rec_2futil_2fSystemStats_2eproto();
void protobuf_ShutdownFile_rec_2futil_2fSystemStats_2eproto();

class SystemStats;

// ===================================================================

class SystemStats : public ::google::protobuf::Message {
 public:
  SystemStats();
  virtual ~SystemStats();
  
  SystemStats(const SystemStats& from);
  
  inline SystemStats& operator=(const SystemStats& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemStats& default_instance();
  
  void Swap(SystemStats* other);
  
  // implements Message ----------------------------------------------
  
  SystemStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemStats& from);
  void MergeFrom(const SystemStats& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string slow_version = 1;
  inline bool has_slow_version() const;
  inline void clear_slow_version();
  static const int kSlowVersionFieldNumber = 1;
  inline const ::std::string& slow_version() const;
  inline void set_slow_version(const ::std::string& value);
  inline void set_slow_version(const char* value);
  inline void set_slow_version(const char* value, size_t size);
  inline ::std::string* mutable_slow_version();
  
  // optional string juce_version = 2;
  inline bool has_juce_version() const;
  inline void clear_juce_version();
  static const int kJuceVersionFieldNumber = 2;
  inline const ::std::string& juce_version() const;
  inline void set_juce_version(const ::std::string& value);
  inline void set_juce_version(const char* value);
  inline void set_juce_version(const char* value, size_t size);
  inline ::std::string* mutable_juce_version();
  
  // optional uint32 operating_system_type = 3;
  inline bool has_operating_system_type() const;
  inline void clear_operating_system_type();
  static const int kOperatingSystemTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 operating_system_type() const;
  inline void set_operating_system_type(::google::protobuf::uint32 value);
  
  // optional string operating_system_name = 4;
  inline bool has_operating_system_name() const;
  inline void clear_operating_system_name();
  static const int kOperatingSystemNameFieldNumber = 4;
  inline const ::std::string& operating_system_name() const;
  inline void set_operating_system_name(const ::std::string& value);
  inline void set_operating_system_name(const char* value);
  inline void set_operating_system_name(const char* value, size_t size);
  inline ::std::string* mutable_operating_system_name();
  
  // optional bool is_operating_system_64_bit = 5;
  inline bool has_is_operating_system_64_bit() const;
  inline void clear_is_operating_system_64_bit();
  static const int kIsOperatingSystem64BitFieldNumber = 5;
  inline bool is_operating_system_64_bit() const;
  inline void set_is_operating_system_64_bit(bool value);
  
  // optional uint32 osx_minor_version_number = 6;
  inline bool has_osx_minor_version_number() const;
  inline void clear_osx_minor_version_number();
  static const int kOsxMinorVersionNumberFieldNumber = 6;
  inline ::google::protobuf::uint32 osx_minor_version_number() const;
  inline void set_osx_minor_version_number(::google::protobuf::uint32 value);
  
  // optional string logon_name = 7;
  inline bool has_logon_name() const;
  inline void clear_logon_name();
  static const int kLogonNameFieldNumber = 7;
  inline const ::std::string& logon_name() const;
  inline void set_logon_name(const ::std::string& value);
  inline void set_logon_name(const char* value);
  inline void set_logon_name(const char* value, size_t size);
  inline ::std::string* mutable_logon_name();
  
  // optional string full_user_name = 8;
  inline bool has_full_user_name() const;
  inline void clear_full_user_name();
  static const int kFullUserNameFieldNumber = 8;
  inline const ::std::string& full_user_name() const;
  inline void set_full_user_name(const ::std::string& value);
  inline void set_full_user_name(const char* value);
  inline void set_full_user_name(const char* value, size_t size);
  inline ::std::string* mutable_full_user_name();
  
  // optional string computer_name = 9;
  inline bool has_computer_name() const;
  inline void clear_computer_name();
  static const int kComputerNameFieldNumber = 9;
  inline const ::std::string& computer_name() const;
  inline void set_computer_name(const ::std::string& value);
  inline void set_computer_name(const char* value);
  inline void set_computer_name(const char* value, size_t size);
  inline ::std::string* mutable_computer_name();
  
  // optional uint32 num_cpus = 10;
  inline bool has_num_cpus() const;
  inline void clear_num_cpus();
  static const int kNumCpusFieldNumber = 10;
  inline ::google::protobuf::uint32 num_cpus() const;
  inline void set_num_cpus(::google::protobuf::uint32 value);
  
  // optional uint32 cpu_speed_in_megahertz = 11;
  inline bool has_cpu_speed_in_megahertz() const;
  inline void clear_cpu_speed_in_megahertz();
  static const int kCpuSpeedInMegahertzFieldNumber = 11;
  inline ::google::protobuf::uint32 cpu_speed_in_megahertz() const;
  inline void set_cpu_speed_in_megahertz(::google::protobuf::uint32 value);
  
  // optional string cpu_vendor = 12;
  inline bool has_cpu_vendor() const;
  inline void clear_cpu_vendor();
  static const int kCpuVendorFieldNumber = 12;
  inline const ::std::string& cpu_vendor() const;
  inline void set_cpu_vendor(const ::std::string& value);
  inline void set_cpu_vendor(const char* value);
  inline void set_cpu_vendor(const char* value, size_t size);
  inline ::std::string* mutable_cpu_vendor();
  
  // optional bool has_mmx = 13;
  inline bool has_has_mmx() const;
  inline void clear_has_mmx();
  static const int kHasMmxFieldNumber = 13;
  inline bool has_mmx() const;
  inline void set_has_mmx(bool value);
  
  // optional bool has_sse = 14;
  inline bool has_has_sse() const;
  inline void clear_has_sse();
  static const int kHasSseFieldNumber = 14;
  inline bool has_sse() const;
  inline void set_has_sse(bool value);
  
  // optional bool has_sse2 = 15;
  inline bool has_has_sse2() const;
  inline void clear_has_sse2();
  static const int kHasSse2FieldNumber = 15;
  inline bool has_sse2() const;
  inline void set_has_sse2(bool value);
  
  // optional bool has_3dnow = 16;
  inline bool has_has_3dnow() const;
  inline void clear_has_3dnow();
  static const int kHas3DnowFieldNumber = 16;
  inline bool has_3dnow() const;
  inline void set_has_3dnow(bool value);
  
  // optional uint32 memory_size_in_megabytes = 17;
  inline bool has_memory_size_in_megabytes() const;
  inline void clear_memory_size_in_megabytes();
  static const int kMemorySizeInMegabytesFieldNumber = 17;
  inline ::google::protobuf::uint32 memory_size_in_megabytes() const;
  inline void set_memory_size_in_megabytes(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.util.SystemStats)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* slow_version_;
  static const ::std::string _default_slow_version_;
  ::std::string* juce_version_;
  static const ::std::string _default_juce_version_;
  ::google::protobuf::uint32 operating_system_type_;
  ::std::string* operating_system_name_;
  static const ::std::string _default_operating_system_name_;
  bool is_operating_system_64_bit_;
  ::google::protobuf::uint32 osx_minor_version_number_;
  ::std::string* logon_name_;
  static const ::std::string _default_logon_name_;
  ::std::string* full_user_name_;
  static const ::std::string _default_full_user_name_;
  ::std::string* computer_name_;
  static const ::std::string _default_computer_name_;
  ::google::protobuf::uint32 num_cpus_;
  ::google::protobuf::uint32 cpu_speed_in_megahertz_;
  ::std::string* cpu_vendor_;
  static const ::std::string _default_cpu_vendor_;
  bool has_mmx_;
  bool has_sse_;
  bool has_sse2_;
  bool has_3dnow_;
  ::google::protobuf::uint32 memory_size_in_megabytes_;
  friend void  protobuf_AddDesc_rec_2futil_2fSystemStats_2eproto();
  friend void protobuf_AssignDesc_rec_2futil_2fSystemStats_2eproto();
  friend void protobuf_ShutdownFile_rec_2futil_2fSystemStats_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SystemStats* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemStats

// optional string slow_version = 1;
inline bool SystemStats::has_slow_version() const {
  return _has_bit(0);
}
inline void SystemStats::clear_slow_version() {
  if (slow_version_ != &_default_slow_version_) {
    slow_version_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SystemStats::slow_version() const {
  return *slow_version_;
}
inline void SystemStats::set_slow_version(const ::std::string& value) {
  _set_bit(0);
  if (slow_version_ == &_default_slow_version_) {
    slow_version_ = new ::std::string;
  }
  slow_version_->assign(value);
}
inline void SystemStats::set_slow_version(const char* value) {
  _set_bit(0);
  if (slow_version_ == &_default_slow_version_) {
    slow_version_ = new ::std::string;
  }
  slow_version_->assign(value);
}
inline void SystemStats::set_slow_version(const char* value, size_t size) {
  _set_bit(0);
  if (slow_version_ == &_default_slow_version_) {
    slow_version_ = new ::std::string;
  }
  slow_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_slow_version() {
  _set_bit(0);
  if (slow_version_ == &_default_slow_version_) {
    slow_version_ = new ::std::string;
  }
  return slow_version_;
}

// optional string juce_version = 2;
inline bool SystemStats::has_juce_version() const {
  return _has_bit(1);
}
inline void SystemStats::clear_juce_version() {
  if (juce_version_ != &_default_juce_version_) {
    juce_version_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SystemStats::juce_version() const {
  return *juce_version_;
}
inline void SystemStats::set_juce_version(const ::std::string& value) {
  _set_bit(1);
  if (juce_version_ == &_default_juce_version_) {
    juce_version_ = new ::std::string;
  }
  juce_version_->assign(value);
}
inline void SystemStats::set_juce_version(const char* value) {
  _set_bit(1);
  if (juce_version_ == &_default_juce_version_) {
    juce_version_ = new ::std::string;
  }
  juce_version_->assign(value);
}
inline void SystemStats::set_juce_version(const char* value, size_t size) {
  _set_bit(1);
  if (juce_version_ == &_default_juce_version_) {
    juce_version_ = new ::std::string;
  }
  juce_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_juce_version() {
  _set_bit(1);
  if (juce_version_ == &_default_juce_version_) {
    juce_version_ = new ::std::string;
  }
  return juce_version_;
}

// optional uint32 operating_system_type = 3;
inline bool SystemStats::has_operating_system_type() const {
  return _has_bit(2);
}
inline void SystemStats::clear_operating_system_type() {
  operating_system_type_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 SystemStats::operating_system_type() const {
  return operating_system_type_;
}
inline void SystemStats::set_operating_system_type(::google::protobuf::uint32 value) {
  _set_bit(2);
  operating_system_type_ = value;
}

// optional string operating_system_name = 4;
inline bool SystemStats::has_operating_system_name() const {
  return _has_bit(3);
}
inline void SystemStats::clear_operating_system_name() {
  if (operating_system_name_ != &_default_operating_system_name_) {
    operating_system_name_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SystemStats::operating_system_name() const {
  return *operating_system_name_;
}
inline void SystemStats::set_operating_system_name(const ::std::string& value) {
  _set_bit(3);
  if (operating_system_name_ == &_default_operating_system_name_) {
    operating_system_name_ = new ::std::string;
  }
  operating_system_name_->assign(value);
}
inline void SystemStats::set_operating_system_name(const char* value) {
  _set_bit(3);
  if (operating_system_name_ == &_default_operating_system_name_) {
    operating_system_name_ = new ::std::string;
  }
  operating_system_name_->assign(value);
}
inline void SystemStats::set_operating_system_name(const char* value, size_t size) {
  _set_bit(3);
  if (operating_system_name_ == &_default_operating_system_name_) {
    operating_system_name_ = new ::std::string;
  }
  operating_system_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_operating_system_name() {
  _set_bit(3);
  if (operating_system_name_ == &_default_operating_system_name_) {
    operating_system_name_ = new ::std::string;
  }
  return operating_system_name_;
}

// optional bool is_operating_system_64_bit = 5;
inline bool SystemStats::has_is_operating_system_64_bit() const {
  return _has_bit(4);
}
inline void SystemStats::clear_is_operating_system_64_bit() {
  is_operating_system_64_bit_ = false;
  _clear_bit(4);
}
inline bool SystemStats::is_operating_system_64_bit() const {
  return is_operating_system_64_bit_;
}
inline void SystemStats::set_is_operating_system_64_bit(bool value) {
  _set_bit(4);
  is_operating_system_64_bit_ = value;
}

// optional uint32 osx_minor_version_number = 6;
inline bool SystemStats::has_osx_minor_version_number() const {
  return _has_bit(5);
}
inline void SystemStats::clear_osx_minor_version_number() {
  osx_minor_version_number_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 SystemStats::osx_minor_version_number() const {
  return osx_minor_version_number_;
}
inline void SystemStats::set_osx_minor_version_number(::google::protobuf::uint32 value) {
  _set_bit(5);
  osx_minor_version_number_ = value;
}

// optional string logon_name = 7;
inline bool SystemStats::has_logon_name() const {
  return _has_bit(6);
}
inline void SystemStats::clear_logon_name() {
  if (logon_name_ != &_default_logon_name_) {
    logon_name_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SystemStats::logon_name() const {
  return *logon_name_;
}
inline void SystemStats::set_logon_name(const ::std::string& value) {
  _set_bit(6);
  if (logon_name_ == &_default_logon_name_) {
    logon_name_ = new ::std::string;
  }
  logon_name_->assign(value);
}
inline void SystemStats::set_logon_name(const char* value) {
  _set_bit(6);
  if (logon_name_ == &_default_logon_name_) {
    logon_name_ = new ::std::string;
  }
  logon_name_->assign(value);
}
inline void SystemStats::set_logon_name(const char* value, size_t size) {
  _set_bit(6);
  if (logon_name_ == &_default_logon_name_) {
    logon_name_ = new ::std::string;
  }
  logon_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_logon_name() {
  _set_bit(6);
  if (logon_name_ == &_default_logon_name_) {
    logon_name_ = new ::std::string;
  }
  return logon_name_;
}

// optional string full_user_name = 8;
inline bool SystemStats::has_full_user_name() const {
  return _has_bit(7);
}
inline void SystemStats::clear_full_user_name() {
  if (full_user_name_ != &_default_full_user_name_) {
    full_user_name_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SystemStats::full_user_name() const {
  return *full_user_name_;
}
inline void SystemStats::set_full_user_name(const ::std::string& value) {
  _set_bit(7);
  if (full_user_name_ == &_default_full_user_name_) {
    full_user_name_ = new ::std::string;
  }
  full_user_name_->assign(value);
}
inline void SystemStats::set_full_user_name(const char* value) {
  _set_bit(7);
  if (full_user_name_ == &_default_full_user_name_) {
    full_user_name_ = new ::std::string;
  }
  full_user_name_->assign(value);
}
inline void SystemStats::set_full_user_name(const char* value, size_t size) {
  _set_bit(7);
  if (full_user_name_ == &_default_full_user_name_) {
    full_user_name_ = new ::std::string;
  }
  full_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_full_user_name() {
  _set_bit(7);
  if (full_user_name_ == &_default_full_user_name_) {
    full_user_name_ = new ::std::string;
  }
  return full_user_name_;
}

// optional string computer_name = 9;
inline bool SystemStats::has_computer_name() const {
  return _has_bit(8);
}
inline void SystemStats::clear_computer_name() {
  if (computer_name_ != &_default_computer_name_) {
    computer_name_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& SystemStats::computer_name() const {
  return *computer_name_;
}
inline void SystemStats::set_computer_name(const ::std::string& value) {
  _set_bit(8);
  if (computer_name_ == &_default_computer_name_) {
    computer_name_ = new ::std::string;
  }
  computer_name_->assign(value);
}
inline void SystemStats::set_computer_name(const char* value) {
  _set_bit(8);
  if (computer_name_ == &_default_computer_name_) {
    computer_name_ = new ::std::string;
  }
  computer_name_->assign(value);
}
inline void SystemStats::set_computer_name(const char* value, size_t size) {
  _set_bit(8);
  if (computer_name_ == &_default_computer_name_) {
    computer_name_ = new ::std::string;
  }
  computer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_computer_name() {
  _set_bit(8);
  if (computer_name_ == &_default_computer_name_) {
    computer_name_ = new ::std::string;
  }
  return computer_name_;
}

// optional uint32 num_cpus = 10;
inline bool SystemStats::has_num_cpus() const {
  return _has_bit(9);
}
inline void SystemStats::clear_num_cpus() {
  num_cpus_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 SystemStats::num_cpus() const {
  return num_cpus_;
}
inline void SystemStats::set_num_cpus(::google::protobuf::uint32 value) {
  _set_bit(9);
  num_cpus_ = value;
}

// optional uint32 cpu_speed_in_megahertz = 11;
inline bool SystemStats::has_cpu_speed_in_megahertz() const {
  return _has_bit(10);
}
inline void SystemStats::clear_cpu_speed_in_megahertz() {
  cpu_speed_in_megahertz_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 SystemStats::cpu_speed_in_megahertz() const {
  return cpu_speed_in_megahertz_;
}
inline void SystemStats::set_cpu_speed_in_megahertz(::google::protobuf::uint32 value) {
  _set_bit(10);
  cpu_speed_in_megahertz_ = value;
}

// optional string cpu_vendor = 12;
inline bool SystemStats::has_cpu_vendor() const {
  return _has_bit(11);
}
inline void SystemStats::clear_cpu_vendor() {
  if (cpu_vendor_ != &_default_cpu_vendor_) {
    cpu_vendor_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& SystemStats::cpu_vendor() const {
  return *cpu_vendor_;
}
inline void SystemStats::set_cpu_vendor(const ::std::string& value) {
  _set_bit(11);
  if (cpu_vendor_ == &_default_cpu_vendor_) {
    cpu_vendor_ = new ::std::string;
  }
  cpu_vendor_->assign(value);
}
inline void SystemStats::set_cpu_vendor(const char* value) {
  _set_bit(11);
  if (cpu_vendor_ == &_default_cpu_vendor_) {
    cpu_vendor_ = new ::std::string;
  }
  cpu_vendor_->assign(value);
}
inline void SystemStats::set_cpu_vendor(const char* value, size_t size) {
  _set_bit(11);
  if (cpu_vendor_ == &_default_cpu_vendor_) {
    cpu_vendor_ = new ::std::string;
  }
  cpu_vendor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemStats::mutable_cpu_vendor() {
  _set_bit(11);
  if (cpu_vendor_ == &_default_cpu_vendor_) {
    cpu_vendor_ = new ::std::string;
  }
  return cpu_vendor_;
}

// optional bool has_mmx = 13;
inline bool SystemStats::has_has_mmx() const {
  return _has_bit(12);
}
inline void SystemStats::clear_has_mmx() {
  has_mmx_ = false;
  _clear_bit(12);
}
inline bool SystemStats::has_mmx() const {
  return has_mmx_;
}
inline void SystemStats::set_has_mmx(bool value) {
  _set_bit(12);
  has_mmx_ = value;
}

// optional bool has_sse = 14;
inline bool SystemStats::has_has_sse() const {
  return _has_bit(13);
}
inline void SystemStats::clear_has_sse() {
  has_sse_ = false;
  _clear_bit(13);
}
inline bool SystemStats::has_sse() const {
  return has_sse_;
}
inline void SystemStats::set_has_sse(bool value) {
  _set_bit(13);
  has_sse_ = value;
}

// optional bool has_sse2 = 15;
inline bool SystemStats::has_has_sse2() const {
  return _has_bit(14);
}
inline void SystemStats::clear_has_sse2() {
  has_sse2_ = false;
  _clear_bit(14);
}
inline bool SystemStats::has_sse2() const {
  return has_sse2_;
}
inline void SystemStats::set_has_sse2(bool value) {
  _set_bit(14);
  has_sse2_ = value;
}

// optional bool has_3dnow = 16;
inline bool SystemStats::has_has_3dnow() const {
  return _has_bit(15);
}
inline void SystemStats::clear_has_3dnow() {
  has_3dnow_ = false;
  _clear_bit(15);
}
inline bool SystemStats::has_3dnow() const {
  return has_3dnow_;
}
inline void SystemStats::set_has_3dnow(bool value) {
  _set_bit(15);
  has_3dnow_ = value;
}

// optional uint32 memory_size_in_megabytes = 17;
inline bool SystemStats::has_memory_size_in_megabytes() const {
  return _has_bit(16);
}
inline void SystemStats::clear_memory_size_in_megabytes() {
  memory_size_in_megabytes_ = 0u;
  _clear_bit(16);
}
inline ::google::protobuf::uint32 SystemStats::memory_size_in_megabytes() const {
  return memory_size_in_megabytes_;
}
inline void SystemStats::set_memory_size_in_megabytes(::google::protobuf::uint32 value) {
  _set_bit(16);
  memory_size_in_megabytes_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2futil_2fSystemStats_2eproto__INCLUDED
