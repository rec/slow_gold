// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/util/cd/Album.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace util {
namespace cd {

namespace {

const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* Album_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Album_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlbumList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlbumList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2futil_2fcd_2fAlbum_2eproto() {
  protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/util/cd/Album.proto");
  GOOGLE_CHECK(file != NULL);
  Metadata_descriptor_ = file->message_type(0);
  static const int Metadata_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, discid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, track_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, album_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, track_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, track_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, notes_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  Album_descriptor_ = file->message_type(1);
  static const int Album_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, track_),
  };
  Album_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Album_descriptor_,
      Album::default_instance_,
      Album_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Album, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Album));
  AlbumList_descriptor_ = file->message_type(2);
  static const int AlbumList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumList, album_),
  };
  AlbumList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlbumList_descriptor_,
      AlbumList::default_instance_,
      AlbumList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlbumList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlbumList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2futil_2fcd_2fAlbum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Album_descriptor_, &Album::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlbumList_descriptor_, &AlbumList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2futil_2fcd_2fAlbum_2eproto() {
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Album::default_instance_;
  delete Album_reflection_;
  delete AlbumList::default_instance_;
  delete AlbumList_reflection_;
}

void protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rec/util/cd/Album.proto\022\013rec.util.cd\"\254"
    "\001\n\010Metadata\022\016\n\006discid\030\001 \001(\t\022\014\n\004year\030\002 \001("
    "\t\022\r\n\005genre\030\003 \001(\t\022\023\n\013track_title\030\004 \001(\t\022\023\n"
    "\013album_title\030\005 \001(\t\022\016\n\006artist\030\006 \001(\t\022\024\n\014tr"
    "ack_number\030\007 \001(\t\022\024\n\014track_length\030\010 \001(\004\022\r"
    "\n\005notes\030\t \001(\t\"S\n\005Album\022$\n\005album\030\001 \001(\0132\025."
    "rec.util.cd.Metadata\022$\n\005track\030\002 \003(\0132\025.re"
    "c.util.cd.Metadata\".\n\tAlbumList\022!\n\005album"
    "\030\001 \003(\0132\022.rec.util.cd.Album", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/util/cd/Album.proto", &protobuf_RegisterTypes);
  Metadata::default_instance_ = new Metadata();
  Album::default_instance_ = new Album();
  AlbumList::default_instance_ = new AlbumList();
  Metadata::default_instance_->InitAsDefaultInstance();
  Album::default_instance_->InitAsDefaultInstance();
  AlbumList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2futil_2fcd_2fAlbum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2futil_2fcd_2fAlbum_2eproto {
  StaticDescriptorInitializer_rec_2futil_2fcd_2fAlbum_2eproto() {
    protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto();
  }
} static_descriptor_initializer_rec_2futil_2fcd_2fAlbum_2eproto_;


// ===================================================================

const ::std::string Metadata::_default_discid_;
const ::std::string Metadata::_default_year_;
const ::std::string Metadata::_default_genre_;
const ::std::string Metadata::_default_track_title_;
const ::std::string Metadata::_default_album_title_;
const ::std::string Metadata::_default_artist_;
const ::std::string Metadata::_default_track_number_;
const ::std::string Metadata::_default_notes_;
#ifndef _MSC_VER
const int Metadata::kDiscidFieldNumber;
const int Metadata::kYearFieldNumber;
const int Metadata::kGenreFieldNumber;
const int Metadata::kTrackTitleFieldNumber;
const int Metadata::kAlbumTitleFieldNumber;
const int Metadata::kArtistFieldNumber;
const int Metadata::kTrackNumberFieldNumber;
const int Metadata::kTrackLengthFieldNumber;
const int Metadata::kNotesFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  discid_ = const_cast< ::std::string*>(&_default_discid_);
  year_ = const_cast< ::std::string*>(&_default_year_);
  genre_ = const_cast< ::std::string*>(&_default_genre_);
  track_title_ = const_cast< ::std::string*>(&_default_track_title_);
  album_title_ = const_cast< ::std::string*>(&_default_album_title_);
  artist_ = const_cast< ::std::string*>(&_default_artist_);
  track_number_ = const_cast< ::std::string*>(&_default_track_number_);
  track_length_ = GOOGLE_ULONGLONG(0);
  notes_ = const_cast< ::std::string*>(&_default_notes_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (discid_ != &_default_discid_) {
    delete discid_;
  }
  if (year_ != &_default_year_) {
    delete year_;
  }
  if (genre_ != &_default_genre_) {
    delete genre_;
  }
  if (track_title_ != &_default_track_title_) {
    delete track_title_;
  }
  if (album_title_ != &_default_album_title_) {
    delete album_title_;
  }
  if (artist_ != &_default_artist_) {
    delete artist_;
  }
  if (track_number_ != &_default_track_number_) {
    delete track_number_;
  }
  if (notes_ != &_default_notes_) {
    delete notes_;
  }
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto();  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (discid_ != &_default_discid_) {
        discid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (year_ != &_default_year_) {
        year_->clear();
      }
    }
    if (_has_bit(2)) {
      if (genre_ != &_default_genre_) {
        genre_->clear();
      }
    }
    if (_has_bit(3)) {
      if (track_title_ != &_default_track_title_) {
        track_title_->clear();
      }
    }
    if (_has_bit(4)) {
      if (album_title_ != &_default_album_title_) {
        album_title_->clear();
      }
    }
    if (_has_bit(5)) {
      if (artist_ != &_default_artist_) {
        artist_->clear();
      }
    }
    if (_has_bit(6)) {
      if (track_number_ != &_default_track_number_) {
        track_number_->clear();
      }
    }
    track_length_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (notes_ != &_default_notes_) {
        notes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string discid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->discid().data(), this->discid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_year;
        break;
      }
      
      // optional string year = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->year().data(), this->year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_genre;
        break;
      }
      
      // optional string genre = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_track_title;
        break;
      }
      
      // optional string track_title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_title().data(), this->track_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_album_title;
        break;
      }
      
      // optional string album_title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_title().data(), this->album_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_artist;
        break;
      }
      
      // optional string artist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_track_number;
        break;
      }
      
      // optional string track_number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_number().data(), this->track_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_track_length;
        break;
      }
      
      // optional uint64 track_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_length_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notes;
        break;
      }
      
      // optional string notes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string discid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discid().data(), this->discid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->discid(), output);
  }
  
  // optional string year = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->year(), output);
  }
  
  // optional string genre = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->genre(), output);
  }
  
  // optional string track_title = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_title().data(), this->track_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->track_title(), output);
  }
  
  // optional string album_title = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_title().data(), this->album_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->album_title(), output);
  }
  
  // optional string artist = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->artist(), output);
  }
  
  // optional string track_number = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_number().data(), this->track_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->track_number(), output);
  }
  
  // optional uint64 track_length = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->track_length(), output);
  }
  
  // optional string notes = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string discid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discid().data(), this->discid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->discid(), target);
  }
  
  // optional string year = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->year(), target);
  }
  
  // optional string genre = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->genre(), target);
  }
  
  // optional string track_title = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_title().data(), this->track_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->track_title(), target);
  }
  
  // optional string album_title = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_title().data(), this->album_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->album_title(), target);
  }
  
  // optional string artist = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->artist(), target);
  }
  
  // optional string track_number = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_number().data(), this->track_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->track_number(), target);
  }
  
  // optional uint64 track_length = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->track_length(), target);
  }
  
  // optional string notes = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string discid = 1;
    if (has_discid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discid());
    }
    
    // optional string year = 2;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }
    
    // optional string genre = 3;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // optional string track_title = 4;
    if (has_track_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_title());
    }
    
    // optional string album_title = 5;
    if (has_album_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_title());
    }
    
    // optional string artist = 6;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
    // optional string track_number = 7;
    if (has_track_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_number());
    }
    
    // optional uint64 track_length = 8;
    if (has_track_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->track_length());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notes = 9;
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_discid(from.discid());
    }
    if (from._has_bit(1)) {
      set_year(from.year());
    }
    if (from._has_bit(2)) {
      set_genre(from.genre());
    }
    if (from._has_bit(3)) {
      set_track_title(from.track_title());
    }
    if (from._has_bit(4)) {
      set_album_title(from.album_title());
    }
    if (from._has_bit(5)) {
      set_artist(from.artist());
    }
    if (from._has_bit(6)) {
      set_track_number(from.track_number());
    }
    if (from._has_bit(7)) {
      set_track_length(from.track_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_notes(from.notes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(discid_, other->discid_);
    std::swap(year_, other->year_);
    std::swap(genre_, other->genre_);
    std::swap(track_title_, other->track_title_);
    std::swap(album_title_, other->album_title_);
    std::swap(artist_, other->artist_);
    std::swap(track_number_, other->track_number_);
    std::swap(track_length_, other->track_length_);
    std::swap(notes_, other->notes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Album::kAlbumFieldNumber;
const int Album::kTrackFieldNumber;
#endif  // !_MSC_VER

Album::Album()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Album::InitAsDefaultInstance() {
  album_ = const_cast< ::rec::util::cd::Metadata*>(&::rec::util::cd::Metadata::default_instance());
}

Album::Album(const Album& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Album::SharedCtor() {
  _cached_size_ = 0;
  album_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Album::~Album() {
  SharedDtor();
}

void Album::SharedDtor() {
  if (this != default_instance_) {
    delete album_;
  }
}

void Album::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Album::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Album_descriptor_;
}

const Album& Album::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto();  return *default_instance_;
}

Album* Album::default_instance_ = NULL;

Album* Album::New() const {
  return new Album;
}

void Album::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (album_ != NULL) album_->::rec::util::cd::Metadata::Clear();
    }
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Album::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.util.cd.Metadata album = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        break;
      }
      
      // repeated .rec.util.cd.Metadata track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Album::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.util.cd.Metadata album = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->album(), output);
  }
  
  // repeated .rec.util.cd.Metadata track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->track(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Album::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.util.cd.Metadata album = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->album(), target);
  }
  
  // repeated .rec.util.cd.Metadata track = 2;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->track(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Album::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.util.cd.Metadata album = 1;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->album());
    }
    
  }
  // repeated .rec.util.cd.Metadata track = 2;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Album::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Album* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Album*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Album::MergeFrom(const Album& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_album()->::rec::util::cd::Metadata::MergeFrom(from.album());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Album::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Album::CopyFrom(const Album& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Album::IsInitialized() const {
  
  return true;
}

void Album::Swap(Album* other) {
  if (other != this) {
    std::swap(album_, other->album_);
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Album::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Album_descriptor_;
  metadata.reflection = Album_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlbumList::kAlbumFieldNumber;
#endif  // !_MSC_VER

AlbumList::AlbumList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlbumList::InitAsDefaultInstance() {
}

AlbumList::AlbumList(const AlbumList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlbumList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlbumList::~AlbumList() {
  SharedDtor();
}

void AlbumList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlbumList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlbumList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlbumList_descriptor_;
}

const AlbumList& AlbumList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2futil_2fcd_2fAlbum_2eproto();  return *default_instance_;
}

AlbumList* AlbumList::default_instance_ = NULL;

AlbumList* AlbumList::New() const {
  return new AlbumList;
}

void AlbumList::Clear() {
  album_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlbumList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.util.cd.Album album = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_album;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlbumList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.util.cd.Album album = 1;
  for (int i = 0; i < this->album_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->album(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlbumList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.util.cd.Album album = 1;
  for (int i = 0; i < this->album_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->album(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlbumList::ByteSize() const {
  int total_size = 0;
  
  // repeated .rec.util.cd.Album album = 1;
  total_size += 1 * this->album_size();
  for (int i = 0; i < this->album_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->album(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlbumList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlbumList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlbumList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlbumList::MergeFrom(const AlbumList& from) {
  GOOGLE_CHECK_NE(&from, this);
  album_.MergeFrom(from.album_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlbumList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlbumList::CopyFrom(const AlbumList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlbumList::IsInitialized() const {
  
  return true;
}

void AlbumList::Swap(AlbumList* other) {
  if (other != this) {
    album_.Swap(&other->album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlbumList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlbumList_descriptor_;
  metadata.reflection = AlbumList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cd
}  // namespace util
}  // namespace rec

// @@protoc_insertion_point(global_scope)
