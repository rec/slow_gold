// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/util/LoopPoint.proto

#ifndef PROTOBUF_rec_2futil_2fLoopPoint_2eproto__INCLUDED
#define PROTOBUF_rec_2futil_2fLoopPoint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace util {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2futil_2fLoopPoint_2eproto();
void protobuf_AssignDesc_rec_2futil_2fLoopPoint_2eproto();
void protobuf_ShutdownFile_rec_2futil_2fLoopPoint_2eproto();

class LoopPoint;
class LoopPointList;

// ===================================================================

class LoopPoint : public ::google::protobuf::Message {
 public:
  LoopPoint();
  virtual ~LoopPoint();
  
  LoopPoint(const LoopPoint& from);
  
  inline LoopPoint& operator=(const LoopPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoopPoint& default_instance();
  
  void Swap(LoopPoint* other);
  
  // implements Message ----------------------------------------------
  
  LoopPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoopPoint& from);
  void MergeFrom(const LoopPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double time = 1 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline double time() const;
  inline void set_time(double value);
  
  // optional bool selected = 2;
  inline bool has_selected() const;
  inline void clear_selected();
  static const int kSelectedFieldNumber = 2;
  inline bool selected() const;
  inline void set_selected(bool value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string notes = 4;
  inline bool has_notes() const;
  inline void clear_notes();
  static const int kNotesFieldNumber = 4;
  inline const ::std::string& notes() const;
  inline void set_notes(const ::std::string& value);
  inline void set_notes(const char* value);
  inline void set_notes(const char* value, size_t size);
  inline ::std::string* mutable_notes();
  
  // @@protoc_insertion_point(class_scope:rec.util.LoopPoint)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double time_;
  bool selected_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* notes_;
  static const ::std::string _default_notes_;
  friend void  protobuf_AddDesc_rec_2futil_2fLoopPoint_2eproto();
  friend void protobuf_AssignDesc_rec_2futil_2fLoopPoint_2eproto();
  friend void protobuf_ShutdownFile_rec_2futil_2fLoopPoint_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LoopPoint* default_instance_;
};
// -------------------------------------------------------------------

class LoopPointList : public ::google::protobuf::Message {
 public:
  LoopPointList();
  virtual ~LoopPointList();
  
  LoopPointList(const LoopPointList& from);
  
  inline LoopPointList& operator=(const LoopPointList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoopPointList& default_instance();
  
  void Swap(LoopPointList* other);
  
  // implements Message ----------------------------------------------
  
  LoopPointList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoopPointList& from);
  void MergeFrom(const LoopPointList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.util.LoopPoint loop_point = 1;
  inline int loop_point_size() const;
  inline void clear_loop_point();
  static const int kLoopPointFieldNumber = 1;
  inline const ::rec::util::LoopPoint& loop_point(int index) const;
  inline ::rec::util::LoopPoint* mutable_loop_point(int index);
  inline ::rec::util::LoopPoint* add_loop_point();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::util::LoopPoint >&
      loop_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::util::LoopPoint >*
      mutable_loop_point();
  
  // @@protoc_insertion_point(class_scope:rec.util.LoopPointList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::util::LoopPoint > loop_point_;
  friend void  protobuf_AddDesc_rec_2futil_2fLoopPoint_2eproto();
  friend void protobuf_AssignDesc_rec_2futil_2fLoopPoint_2eproto();
  friend void protobuf_ShutdownFile_rec_2futil_2fLoopPoint_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LoopPointList* default_instance_;
};
// ===================================================================


// ===================================================================

// LoopPoint

// optional double time = 1 [default = 0];
inline bool LoopPoint::has_time() const {
  return _has_bit(0);
}
inline void LoopPoint::clear_time() {
  time_ = 0;
  _clear_bit(0);
}
inline double LoopPoint::time() const {
  return time_;
}
inline void LoopPoint::set_time(double value) {
  _set_bit(0);
  time_ = value;
}

// optional bool selected = 2;
inline bool LoopPoint::has_selected() const {
  return _has_bit(1);
}
inline void LoopPoint::clear_selected() {
  selected_ = false;
  _clear_bit(1);
}
inline bool LoopPoint::selected() const {
  return selected_;
}
inline void LoopPoint::set_selected(bool value) {
  _set_bit(1);
  selected_ = value;
}

// optional string name = 3;
inline bool LoopPoint::has_name() const {
  return _has_bit(2);
}
inline void LoopPoint::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& LoopPoint::name() const {
  return *name_;
}
inline void LoopPoint::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LoopPoint::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LoopPoint::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoopPoint::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string notes = 4;
inline bool LoopPoint::has_notes() const {
  return _has_bit(3);
}
inline void LoopPoint::clear_notes() {
  if (notes_ != &_default_notes_) {
    notes_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& LoopPoint::notes() const {
  return *notes_;
}
inline void LoopPoint::set_notes(const ::std::string& value) {
  _set_bit(3);
  if (notes_ == &_default_notes_) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void LoopPoint::set_notes(const char* value) {
  _set_bit(3);
  if (notes_ == &_default_notes_) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void LoopPoint::set_notes(const char* value, size_t size) {
  _set_bit(3);
  if (notes_ == &_default_notes_) {
    notes_ = new ::std::string;
  }
  notes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoopPoint::mutable_notes() {
  _set_bit(3);
  if (notes_ == &_default_notes_) {
    notes_ = new ::std::string;
  }
  return notes_;
}

// -------------------------------------------------------------------

// LoopPointList

// repeated .rec.util.LoopPoint loop_point = 1;
inline int LoopPointList::loop_point_size() const {
  return loop_point_.size();
}
inline void LoopPointList::clear_loop_point() {
  loop_point_.Clear();
}
inline const ::rec::util::LoopPoint& LoopPointList::loop_point(int index) const {
  return loop_point_.Get(index);
}
inline ::rec::util::LoopPoint* LoopPointList::mutable_loop_point(int index) {
  return loop_point_.Mutable(index);
}
inline ::rec::util::LoopPoint* LoopPointList::add_loop_point() {
  return loop_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::util::LoopPoint >&
LoopPointList::loop_point() const {
  return loop_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::util::LoopPoint >*
LoopPointList::mutable_loop_point() {
  return &loop_point_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2futil_2fLoopPoint_2eproto__INCLUDED
