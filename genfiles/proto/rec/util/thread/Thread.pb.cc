// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/util/thread/Thread.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace util {
namespace thread {

namespace {

const ::google::protobuf::Descriptor* ThreadDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadDescription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2futil_2fthread_2fThread_2eproto() {
  protobuf_AddDesc_rec_2futil_2fthread_2fThread_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/util/thread/Thread.proto");
  GOOGLE_CHECK(file != NULL);
  ThreadDescription_descriptor_ = file->message_type(0);
  static const int ThreadDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, period_),
  };
  ThreadDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadDescription_descriptor_,
      ThreadDescription::default_instance_,
      ThreadDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadDescription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2futil_2fthread_2fThread_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadDescription_descriptor_, &ThreadDescription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2futil_2fthread_2fThread_2eproto() {
  delete ThreadDescription::default_instance_;
  delete ThreadDescription_reflection_;
}

void protobuf_AddDesc_rec_2futil_2fthread_2fThread_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rec/util/thread/Thread.proto\022\017rec.util"
    ".thread\"=\n\021ThreadDescription\022\023\n\010priority"
    "\030\001 \001(\r:\0015\022\023\n\006period\030\002 \001(\r:\003100", 110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/util/thread/Thread.proto", &protobuf_RegisterTypes);
  ThreadDescription::default_instance_ = new ThreadDescription();
  ThreadDescription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2futil_2fthread_2fThread_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2futil_2fthread_2fThread_2eproto {
  StaticDescriptorInitializer_rec_2futil_2fthread_2fThread_2eproto() {
    protobuf_AddDesc_rec_2futil_2fthread_2fThread_2eproto();
  }
} static_descriptor_initializer_rec_2futil_2fthread_2fThread_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ThreadDescription::kPriorityFieldNumber;
const int ThreadDescription::kPeriodFieldNumber;
#endif  // !_MSC_VER

ThreadDescription::ThreadDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadDescription::InitAsDefaultInstance() {
}

ThreadDescription::ThreadDescription(const ThreadDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadDescription::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 5u;
  period_ = 100u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadDescription::~ThreadDescription() {
  SharedDtor();
}

void ThreadDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreadDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadDescription_descriptor_;
}

const ThreadDescription& ThreadDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2futil_2fthread_2fThread_2eproto();  return *default_instance_;
}

ThreadDescription* ThreadDescription::default_instance_ = NULL;

ThreadDescription* ThreadDescription::New() const {
  return new ThreadDescription;
}

void ThreadDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    priority_ = 5u;
    period_ = 100u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 priority = 1 [default = 5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }
      
      // optional uint32 period = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThreadDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 priority = 1 [default = 5];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->priority(), output);
  }
  
  // optional uint32 period = 2 [default = 100];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->period(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 priority = 1 [default = 5];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->priority(), target);
  }
  
  // optional uint32 period = 2 [default = 100];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->period(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 priority = 1 [default = 5];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }
    
    // optional uint32 period = 2 [default = 100];
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadDescription::MergeFrom(const ThreadDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_priority(from.priority());
    }
    if (from._has_bit(1)) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadDescription::CopyFrom(const ThreadDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDescription::IsInitialized() const {
  
  return true;
}

void ThreadDescription::Swap(ThreadDescription* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadDescription_descriptor_;
  metadata.reflection = ThreadDescription_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace thread
}  // namespace util
}  // namespace rec

// @@protoc_insertion_point(global_scope)
