// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/util/file/VirtualFile.proto

#ifndef PROTOBUF_rec_2futil_2ffile_2fVirtualFile_2eproto__INCLUDED
#define PROTOBUF_rec_2futil_2ffile_2fVirtualFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace util {
namespace file {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
void protobuf_AssignDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
void protobuf_ShutdownFile_rec_2futil_2ffile_2fVirtualFile_2eproto();

class VirtualFile;
class VirtualFileList;

enum VirtualFile_Type {
  VirtualFile_Type_NONE = 0,
  VirtualFile_Type_VOLUME = 1,
  VirtualFile_Type_CD = 2,
  VirtualFile_Type_GLOBAL = 3,
  VirtualFile_Type_USER = 4,
  VirtualFile_Type_DESKTOP = 5,
  VirtualFile_Type_MUSIC = 6,
  VirtualFile_Type_DOCUMENTS = 7,
  VirtualFile_Type_MOVIES = 8,
  VirtualFile_Type_LAST = 8
};
bool VirtualFile_Type_IsValid(int value);
const VirtualFile_Type VirtualFile_Type_Type_MIN = VirtualFile_Type_NONE;
const VirtualFile_Type VirtualFile_Type_Type_MAX = VirtualFile_Type_MOVIES;
const int VirtualFile_Type_Type_ARRAYSIZE = VirtualFile_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualFile_Type_descriptor();
inline const ::std::string& VirtualFile_Type_Name(VirtualFile_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualFile_Type_descriptor(), value);
}
inline bool VirtualFile_Type_Parse(
    const ::std::string& name, VirtualFile_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualFile_Type>(
    VirtualFile_Type_descriptor(), name, value);
}
enum VirtualFile_Status {
  VirtualFile_Status_ONLINE = 1,
  VirtualFile_Status_OFFLINE = 2,
  VirtualFile_Status_DISK_OPEN = 3,
  VirtualFile_Status_WRITEABLE_DISK = 4,
  VirtualFile_Status_NO_DISK = 5,
  VirtualFile_Status_UNKNOWN = 6
};
bool VirtualFile_Status_IsValid(int value);
const VirtualFile_Status VirtualFile_Status_Status_MIN = VirtualFile_Status_ONLINE;
const VirtualFile_Status VirtualFile_Status_Status_MAX = VirtualFile_Status_UNKNOWN;
const int VirtualFile_Status_Status_ARRAYSIZE = VirtualFile_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualFile_Status_descriptor();
inline const ::std::string& VirtualFile_Status_Name(VirtualFile_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualFile_Status_descriptor(), value);
}
inline bool VirtualFile_Status_Parse(
    const ::std::string& name, VirtualFile_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualFile_Status>(
    VirtualFile_Status_descriptor(), name, value);
}
// ===================================================================

class VirtualFile : public ::google::protobuf::Message {
 public:
  VirtualFile();
  virtual ~VirtualFile();
  
  VirtualFile(const VirtualFile& from);
  
  inline VirtualFile& operator=(const VirtualFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualFile& default_instance();
  
  void Swap(VirtualFile* other);
  
  // implements Message ----------------------------------------------
  
  VirtualFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualFile& from);
  void MergeFrom(const VirtualFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef VirtualFile_Type Type;
  static const Type NONE = VirtualFile_Type_NONE;
  static const Type VOLUME = VirtualFile_Type_VOLUME;
  static const Type CD = VirtualFile_Type_CD;
  static const Type GLOBAL = VirtualFile_Type_GLOBAL;
  static const Type USER = VirtualFile_Type_USER;
  static const Type DESKTOP = VirtualFile_Type_DESKTOP;
  static const Type MUSIC = VirtualFile_Type_MUSIC;
  static const Type DOCUMENTS = VirtualFile_Type_DOCUMENTS;
  static const Type MOVIES = VirtualFile_Type_MOVIES;
  static const Type LAST = VirtualFile_Type_LAST;
  static inline bool Type_IsValid(int value) {
    return VirtualFile_Type_IsValid(value);
  }
  static const Type Type_MIN =
    VirtualFile_Type_Type_MIN;
  static const Type Type_MAX =
    VirtualFile_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    VirtualFile_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return VirtualFile_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return VirtualFile_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return VirtualFile_Type_Parse(name, value);
  }
  
  typedef VirtualFile_Status Status;
  static const Status ONLINE = VirtualFile_Status_ONLINE;
  static const Status OFFLINE = VirtualFile_Status_OFFLINE;
  static const Status DISK_OPEN = VirtualFile_Status_DISK_OPEN;
  static const Status WRITEABLE_DISK = VirtualFile_Status_WRITEABLE_DISK;
  static const Status NO_DISK = VirtualFile_Status_NO_DISK;
  static const Status UNKNOWN = VirtualFile_Status_UNKNOWN;
  static inline bool Status_IsValid(int value) {
    return VirtualFile_Status_IsValid(value);
  }
  static const Status Status_MIN =
    VirtualFile_Status_Status_MIN;
  static const Status Status_MAX =
    VirtualFile_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    VirtualFile_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return VirtualFile_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return VirtualFile_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return VirtualFile_Status_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.util.file.VirtualFile.Type type = 1 [default = NONE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rec::util::file::VirtualFile_Type type() const;
  inline void set_type(::rec::util::file::VirtualFile_Type value);
  
  // optional string volume_name = 2;
  inline bool has_volume_name() const;
  inline void clear_volume_name();
  static const int kVolumeNameFieldNumber = 2;
  inline const ::std::string& volume_name() const;
  inline void set_volume_name(const ::std::string& value);
  inline void set_volume_name(const char* value);
  inline void set_volume_name(const char* value, size_t size);
  inline ::std::string* mutable_volume_name();
  
  // repeated string path = 3;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();
  
  // optional .rec.util.file.VirtualFile.Status status = 4 [default = ONLINE];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::rec::util::file::VirtualFile_Status status() const;
  inline void set_status(::rec::util::file::VirtualFile_Status value);
  
  // optional string cd_name = 5;
  inline bool has_cd_name() const;
  inline void clear_cd_name();
  static const int kCdNameFieldNumber = 5;
  inline const ::std::string& cd_name() const;
  inline void set_cd_name(const ::std::string& value);
  inline void set_cd_name(const char* value);
  inline void set_cd_name(const char* value, size_t size);
  inline ::std::string* mutable_cd_name();
  
  // @@protoc_insertion_point(class_scope:rec.util.file.VirtualFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* volume_name_;
  static const ::std::string _default_volume_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  int status_;
  ::std::string* cd_name_;
  static const ::std::string _default_cd_name_;
  friend void  protobuf_AddDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
  friend void protobuf_AssignDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
  friend void protobuf_ShutdownFile_rec_2futil_2ffile_2fVirtualFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VirtualFile* default_instance_;
};
// -------------------------------------------------------------------

class VirtualFileList : public ::google::protobuf::Message {
 public:
  VirtualFileList();
  virtual ~VirtualFileList();
  
  VirtualFileList(const VirtualFileList& from);
  
  inline VirtualFileList& operator=(const VirtualFileList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualFileList& default_instance();
  
  void Swap(VirtualFileList* other);
  
  // implements Message ----------------------------------------------
  
  VirtualFileList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualFileList& from);
  void MergeFrom(const VirtualFileList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.util.file.VirtualFile file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::rec::util::file::VirtualFile& file(int index) const;
  inline ::rec::util::file::VirtualFile* mutable_file(int index);
  inline ::rec::util::file::VirtualFile* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::util::file::VirtualFile >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::util::file::VirtualFile >*
      mutable_file();
  
  // @@protoc_insertion_point(class_scope:rec.util.file.VirtualFileList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::util::file::VirtualFile > file_;
  friend void  protobuf_AddDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
  friend void protobuf_AssignDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
  friend void protobuf_ShutdownFile_rec_2futil_2ffile_2fVirtualFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VirtualFileList* default_instance_;
};
// ===================================================================


// ===================================================================

// VirtualFile

// optional .rec.util.file.VirtualFile.Type type = 1 [default = NONE];
inline bool VirtualFile::has_type() const {
  return _has_bit(0);
}
inline void VirtualFile::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::rec::util::file::VirtualFile_Type VirtualFile::type() const {
  return static_cast< ::rec::util::file::VirtualFile_Type >(type_);
}
inline void VirtualFile::set_type(::rec::util::file::VirtualFile_Type value) {
  GOOGLE_DCHECK(::rec::util::file::VirtualFile_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional string volume_name = 2;
inline bool VirtualFile::has_volume_name() const {
  return _has_bit(1);
}
inline void VirtualFile::clear_volume_name() {
  if (volume_name_ != &_default_volume_name_) {
    volume_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& VirtualFile::volume_name() const {
  return *volume_name_;
}
inline void VirtualFile::set_volume_name(const ::std::string& value) {
  _set_bit(1);
  if (volume_name_ == &_default_volume_name_) {
    volume_name_ = new ::std::string;
  }
  volume_name_->assign(value);
}
inline void VirtualFile::set_volume_name(const char* value) {
  _set_bit(1);
  if (volume_name_ == &_default_volume_name_) {
    volume_name_ = new ::std::string;
  }
  volume_name_->assign(value);
}
inline void VirtualFile::set_volume_name(const char* value, size_t size) {
  _set_bit(1);
  if (volume_name_ == &_default_volume_name_) {
    volume_name_ = new ::std::string;
  }
  volume_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualFile::mutable_volume_name() {
  _set_bit(1);
  if (volume_name_ == &_default_volume_name_) {
    volume_name_ = new ::std::string;
  }
  return volume_name_;
}

// repeated string path = 3;
inline int VirtualFile::path_size() const {
  return path_.size();
}
inline void VirtualFile::clear_path() {
  path_.Clear();
}
inline const ::std::string& VirtualFile::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* VirtualFile::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void VirtualFile::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void VirtualFile::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void VirtualFile::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualFile::add_path() {
  return path_.Add();
}
inline void VirtualFile::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void VirtualFile::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void VirtualFile::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualFile::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualFile::mutable_path() {
  return &path_;
}

// optional .rec.util.file.VirtualFile.Status status = 4 [default = ONLINE];
inline bool VirtualFile::has_status() const {
  return _has_bit(3);
}
inline void VirtualFile::clear_status() {
  status_ = 1;
  _clear_bit(3);
}
inline ::rec::util::file::VirtualFile_Status VirtualFile::status() const {
  return static_cast< ::rec::util::file::VirtualFile_Status >(status_);
}
inline void VirtualFile::set_status(::rec::util::file::VirtualFile_Status value) {
  GOOGLE_DCHECK(::rec::util::file::VirtualFile_Status_IsValid(value));
  _set_bit(3);
  status_ = value;
}

// optional string cd_name = 5;
inline bool VirtualFile::has_cd_name() const {
  return _has_bit(4);
}
inline void VirtualFile::clear_cd_name() {
  if (cd_name_ != &_default_cd_name_) {
    cd_name_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& VirtualFile::cd_name() const {
  return *cd_name_;
}
inline void VirtualFile::set_cd_name(const ::std::string& value) {
  _set_bit(4);
  if (cd_name_ == &_default_cd_name_) {
    cd_name_ = new ::std::string;
  }
  cd_name_->assign(value);
}
inline void VirtualFile::set_cd_name(const char* value) {
  _set_bit(4);
  if (cd_name_ == &_default_cd_name_) {
    cd_name_ = new ::std::string;
  }
  cd_name_->assign(value);
}
inline void VirtualFile::set_cd_name(const char* value, size_t size) {
  _set_bit(4);
  if (cd_name_ == &_default_cd_name_) {
    cd_name_ = new ::std::string;
  }
  cd_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualFile::mutable_cd_name() {
  _set_bit(4);
  if (cd_name_ == &_default_cd_name_) {
    cd_name_ = new ::std::string;
  }
  return cd_name_;
}

// -------------------------------------------------------------------

// VirtualFileList

// repeated .rec.util.file.VirtualFile file = 1;
inline int VirtualFileList::file_size() const {
  return file_.size();
}
inline void VirtualFileList::clear_file() {
  file_.Clear();
}
inline const ::rec::util::file::VirtualFile& VirtualFileList::file(int index) const {
  return file_.Get(index);
}
inline ::rec::util::file::VirtualFile* VirtualFileList::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::rec::util::file::VirtualFile* VirtualFileList::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::util::file::VirtualFile >&
VirtualFileList::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::util::file::VirtualFile >*
VirtualFileList::mutable_file() {
  return &file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace util
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::util::file::VirtualFile_Type>() {
  return ::rec::util::file::VirtualFile_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::util::file::VirtualFile_Status>() {
  return ::rec::util::file::VirtualFile_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2futil_2ffile_2fVirtualFile_2eproto__INCLUDED
