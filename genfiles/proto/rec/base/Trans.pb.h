// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/base/Trans.proto

#ifndef PROTOBUF_rec_2fbase_2fTrans_2eproto__INCLUDED
#define PROTOBUF_rec_2fbase_2fTrans_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fbase_2fTrans_2eproto();
void protobuf_AssignDesc_rec_2fbase_2fTrans_2eproto();
void protobuf_ShutdownFile_rec_2fbase_2fTrans_2eproto();

class TranslatedString;
class TranslatedStrings;

// ===================================================================

class TranslatedString : public ::google::protobuf::Message {
 public:
  TranslatedString();
  virtual ~TranslatedString();
  
  TranslatedString(const TranslatedString& from);
  
  inline TranslatedString& operator=(const TranslatedString& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslatedString& default_instance();
  
  void Swap(TranslatedString* other);
  
  // implements Message ----------------------------------------------
  
  TranslatedString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranslatedString& from);
  void MergeFrom(const TranslatedString& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string original = 1;
  inline bool has_original() const;
  inline void clear_original();
  static const int kOriginalFieldNumber = 1;
  inline const ::std::string& original() const;
  inline void set_original(const ::std::string& value);
  inline void set_original(const char* value);
  inline void set_original(const char* value, size_t size);
  inline ::std::string* mutable_original();
  
  // optional string translation = 2;
  inline bool has_translation() const;
  inline void clear_translation();
  static const int kTranslationFieldNumber = 2;
  inline const ::std::string& translation() const;
  inline void set_translation(const ::std::string& value);
  inline void set_translation(const char* value);
  inline void set_translation(const char* value, size_t size);
  inline ::std::string* mutable_translation();
  
  // optional string hint = 3;
  inline bool has_hint() const;
  inline void clear_hint();
  static const int kHintFieldNumber = 3;
  inline const ::std::string& hint() const;
  inline void set_hint(const ::std::string& value);
  inline void set_hint(const char* value);
  inline void set_hint(const char* value, size_t size);
  inline ::std::string* mutable_hint();
  
  // optional string file = 4;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 4;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  
  // optional uint32 line = 5;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 5;
  inline ::google::protobuf::uint32 line() const;
  inline void set_line(::google::protobuf::uint32 value);
  
  // optional uint32 index = 6;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.TranslatedString)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* original_;
  static const ::std::string _default_original_;
  ::std::string* translation_;
  static const ::std::string _default_translation_;
  ::std::string* hint_;
  static const ::std::string _default_hint_;
  ::std::string* file_;
  static const ::std::string _default_file_;
  ::google::protobuf::uint32 line_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_rec_2fbase_2fTrans_2eproto();
  friend void protobuf_AssignDesc_rec_2fbase_2fTrans_2eproto();
  friend void protobuf_ShutdownFile_rec_2fbase_2fTrans_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TranslatedString* default_instance_;
};
// -------------------------------------------------------------------

class TranslatedStrings : public ::google::protobuf::Message {
 public:
  TranslatedStrings();
  virtual ~TranslatedStrings();
  
  TranslatedStrings(const TranslatedStrings& from);
  
  inline TranslatedStrings& operator=(const TranslatedStrings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslatedStrings& default_instance();
  
  void Swap(TranslatedStrings* other);
  
  // implements Message ----------------------------------------------
  
  TranslatedStrings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranslatedStrings& from);
  void MergeFrom(const TranslatedStrings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.TranslatedString str = 1;
  inline int str_size() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::rec::TranslatedString& str(int index) const;
  inline ::rec::TranslatedString* mutable_str(int index);
  inline ::rec::TranslatedString* add_str();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::TranslatedString >&
      str() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::TranslatedString >*
      mutable_str();
  
  // optional uint32 max_index = 2;
  inline bool has_max_index() const;
  inline void clear_max_index();
  static const int kMaxIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 max_index() const;
  inline void set_max_index(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.TranslatedStrings)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::TranslatedString > str_;
  ::google::protobuf::uint32 max_index_;
  friend void  protobuf_AddDesc_rec_2fbase_2fTrans_2eproto();
  friend void protobuf_AssignDesc_rec_2fbase_2fTrans_2eproto();
  friend void protobuf_ShutdownFile_rec_2fbase_2fTrans_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TranslatedStrings* default_instance_;
};
// ===================================================================


// ===================================================================

// TranslatedString

// optional string original = 1;
inline bool TranslatedString::has_original() const {
  return _has_bit(0);
}
inline void TranslatedString::clear_original() {
  if (original_ != &_default_original_) {
    original_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& TranslatedString::original() const {
  return *original_;
}
inline void TranslatedString::set_original(const ::std::string& value) {
  _set_bit(0);
  if (original_ == &_default_original_) {
    original_ = new ::std::string;
  }
  original_->assign(value);
}
inline void TranslatedString::set_original(const char* value) {
  _set_bit(0);
  if (original_ == &_default_original_) {
    original_ = new ::std::string;
  }
  original_->assign(value);
}
inline void TranslatedString::set_original(const char* value, size_t size) {
  _set_bit(0);
  if (original_ == &_default_original_) {
    original_ = new ::std::string;
  }
  original_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TranslatedString::mutable_original() {
  _set_bit(0);
  if (original_ == &_default_original_) {
    original_ = new ::std::string;
  }
  return original_;
}

// optional string translation = 2;
inline bool TranslatedString::has_translation() const {
  return _has_bit(1);
}
inline void TranslatedString::clear_translation() {
  if (translation_ != &_default_translation_) {
    translation_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TranslatedString::translation() const {
  return *translation_;
}
inline void TranslatedString::set_translation(const ::std::string& value) {
  _set_bit(1);
  if (translation_ == &_default_translation_) {
    translation_ = new ::std::string;
  }
  translation_->assign(value);
}
inline void TranslatedString::set_translation(const char* value) {
  _set_bit(1);
  if (translation_ == &_default_translation_) {
    translation_ = new ::std::string;
  }
  translation_->assign(value);
}
inline void TranslatedString::set_translation(const char* value, size_t size) {
  _set_bit(1);
  if (translation_ == &_default_translation_) {
    translation_ = new ::std::string;
  }
  translation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TranslatedString::mutable_translation() {
  _set_bit(1);
  if (translation_ == &_default_translation_) {
    translation_ = new ::std::string;
  }
  return translation_;
}

// optional string hint = 3;
inline bool TranslatedString::has_hint() const {
  return _has_bit(2);
}
inline void TranslatedString::clear_hint() {
  if (hint_ != &_default_hint_) {
    hint_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& TranslatedString::hint() const {
  return *hint_;
}
inline void TranslatedString::set_hint(const ::std::string& value) {
  _set_bit(2);
  if (hint_ == &_default_hint_) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
}
inline void TranslatedString::set_hint(const char* value) {
  _set_bit(2);
  if (hint_ == &_default_hint_) {
    hint_ = new ::std::string;
  }
  hint_->assign(value);
}
inline void TranslatedString::set_hint(const char* value, size_t size) {
  _set_bit(2);
  if (hint_ == &_default_hint_) {
    hint_ = new ::std::string;
  }
  hint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TranslatedString::mutable_hint() {
  _set_bit(2);
  if (hint_ == &_default_hint_) {
    hint_ = new ::std::string;
  }
  return hint_;
}

// optional string file = 4;
inline bool TranslatedString::has_file() const {
  return _has_bit(3);
}
inline void TranslatedString::clear_file() {
  if (file_ != &_default_file_) {
    file_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& TranslatedString::file() const {
  return *file_;
}
inline void TranslatedString::set_file(const ::std::string& value) {
  _set_bit(3);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void TranslatedString::set_file(const char* value) {
  _set_bit(3);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void TranslatedString::set_file(const char* value, size_t size) {
  _set_bit(3);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TranslatedString::mutable_file() {
  _set_bit(3);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  return file_;
}

// optional uint32 line = 5;
inline bool TranslatedString::has_line() const {
  return _has_bit(4);
}
inline void TranslatedString::clear_line() {
  line_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 TranslatedString::line() const {
  return line_;
}
inline void TranslatedString::set_line(::google::protobuf::uint32 value) {
  _set_bit(4);
  line_ = value;
}

// optional uint32 index = 6;
inline bool TranslatedString::has_index() const {
  return _has_bit(5);
}
inline void TranslatedString::clear_index() {
  index_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 TranslatedString::index() const {
  return index_;
}
inline void TranslatedString::set_index(::google::protobuf::uint32 value) {
  _set_bit(5);
  index_ = value;
}

// -------------------------------------------------------------------

// TranslatedStrings

// repeated .rec.TranslatedString str = 1;
inline int TranslatedStrings::str_size() const {
  return str_.size();
}
inline void TranslatedStrings::clear_str() {
  str_.Clear();
}
inline const ::rec::TranslatedString& TranslatedStrings::str(int index) const {
  return str_.Get(index);
}
inline ::rec::TranslatedString* TranslatedStrings::mutable_str(int index) {
  return str_.Mutable(index);
}
inline ::rec::TranslatedString* TranslatedStrings::add_str() {
  return str_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::TranslatedString >&
TranslatedStrings::str() const {
  return str_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::TranslatedString >*
TranslatedStrings::mutable_str() {
  return &str_;
}

// optional uint32 max_index = 2;
inline bool TranslatedStrings::has_max_index() const {
  return _has_bit(1);
}
inline void TranslatedStrings::clear_max_index() {
  max_index_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 TranslatedStrings::max_index() const {
  return max_index_;
}
inline void TranslatedStrings::set_max_index(::google::protobuf::uint32 value) {
  _set_bit(1);
  max_index_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fbase_2fTrans_2eproto__INCLUDED
