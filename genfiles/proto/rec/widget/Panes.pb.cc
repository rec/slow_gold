// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/Panes.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace pane {

namespace {

const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Navigation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Navigation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Navigation_Tab_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Navigation_Orientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Directory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Directory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Track_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/Panes.proto");
  GOOGLE_CHECK(file != NULL);
  Path_descriptor_ = file->message_type(0);
  static const int Path_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, path_),
  };
  Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path));
  Navigation_descriptor_ = file->message_type(1);
  static const int Navigation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, orientation_),
  };
  Navigation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Navigation_descriptor_,
      Navigation::default_instance_,
      Navigation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Navigation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Navigation));
  Navigation_Tab_descriptor_ = Navigation_descriptor_->enum_type(0);
  Navigation_Orientation_descriptor_ = Navigation_descriptor_->enum_type(1);
  Directory_descriptor_ = file->message_type(2);
  static const int Directory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, path_),
  };
  Directory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Directory_descriptor_,
      Directory::default_instance_,
      Directory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Directory));
  Track_descriptor_ = file->message_type(3);
  static const int Track_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, timestretch_),
  };
  Track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Track_descriptor_,
      Track::default_instance_,
      Track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Track));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Navigation_descriptor_, &Navigation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Directory_descriptor_, &Directory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Track_descriptor_, &Track::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto() {
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Navigation::default_instance_;
  delete Navigation_reflection_;
  delete Directory::default_instance_;
  delete Directory_reflection_;
  delete Track::default_instance_;
  delete Track_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::widget::protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  ::rec::audio::source::protobuf_AddDesc_rec_2faudio_2fsource_2fTimeStretch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rec/widget/Panes.proto\022\017rec.widget.pan"
    "e\032\027rec/widget/Widget.proto\032\"rec/audio/so"
    "urce/TimeStretch.proto\"\024\n\004Path\022\014\n\004path\030\001"
    " \003(\t\"\274\002\n\nNavigation\022\"\n\006widget\030\001 \001(\0132\022.re"
    "c.widget.Widget\022#\n\004path\030\002 \001(\0132\025.rec.widg"
    "et.pane.Path\022,\n\003tab\030\003 \001(\0162\037.rec.widget.p"
    "ane.Navigation.Tab\022<\n\013orientation\030\004 \001(\0162"
    "\'.rec.widget.pane.Navigation.Orientation"
    "\" \n\003Tab\022\010\n\004FILE\020\001\022\006\n\002CD\020\002\022\007\n\003URL\020\003\"W\n\013Or"
    "ientation\022\017\n\013TABS_AT_TOP\020\000\022\022\n\016TABS_AT_BO"
    "TTOM\020\001\022\020\n\014TABS_AT_LEFT\020\002\022\021\n\rTABS_AT_RIGH"
    "T\020\003\"T\n\tDirectory\022\"\n\006widget\030\001 \001(\0132\022.rec.w"
    "idget.Widget\022#\n\004path\030\002 \001(\0132\025.rec.widget."
    "pane.Path\"\204\001\n\005Track\022\"\n\006widget\030\001 \001(\0132\022.re"
    "c.widget.Widget\022#\n\004path\030\002 \001(\0132\025.rec.widg"
    "et.pane.Path\0222\n\013timestretch\030\003 \001(\0132\035.rec."
    "audio.source.TimeStretch", 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/Panes.proto", &protobuf_RegisterTypes);
  Path::default_instance_ = new Path();
  Navigation::default_instance_ = new Navigation();
  Directory::default_instance_ = new Directory();
  Track::default_instance_ = new Track();
  Path::default_instance_->InitAsDefaultInstance();
  Navigation::default_instance_->InitAsDefaultInstance();
  Directory::default_instance_->InitAsDefaultInstance();
  Track::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2fPanes_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2fPanes_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2fPanes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Path::kPathFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  SharedDtor();
}

void Path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New() const {
  return new Path;
}

void Path::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(0).data(), this->path(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;
  
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  
  return true;
}

void Path::Swap(Path* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Navigation_Tab_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Navigation_Tab_descriptor_;
}
bool Navigation_Tab_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Navigation_Tab Navigation::FILE;
const Navigation_Tab Navigation::CD;
const Navigation_Tab Navigation::URL;
const Navigation_Tab Navigation::Tab_MIN;
const Navigation_Tab Navigation::Tab_MAX;
const int Navigation::Tab_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Navigation_Orientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Navigation_Orientation_descriptor_;
}
bool Navigation_Orientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Navigation_Orientation Navigation::TABS_AT_TOP;
const Navigation_Orientation Navigation::TABS_AT_BOTTOM;
const Navigation_Orientation Navigation::TABS_AT_LEFT;
const Navigation_Orientation Navigation::TABS_AT_RIGHT;
const Navigation_Orientation Navigation::Orientation_MIN;
const Navigation_Orientation Navigation::Orientation_MAX;
const int Navigation::Orientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Navigation::kWidgetFieldNumber;
const int Navigation::kPathFieldNumber;
const int Navigation::kTabFieldNumber;
const int Navigation::kOrientationFieldNumber;
#endif  // !_MSC_VER

Navigation::Navigation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Navigation::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  path_ = const_cast< ::rec::widget::pane::Path*>(&::rec::widget::pane::Path::default_instance());
}

Navigation::Navigation(const Navigation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Navigation::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  path_ = NULL;
  tab_ = 1;
  orientation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Navigation::~Navigation() {
  SharedDtor();
}

void Navigation::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete path_;
  }
}

void Navigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Navigation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Navigation_descriptor_;
}

const Navigation& Navigation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

Navigation* Navigation::default_instance_ = NULL;

Navigation* Navigation::New() const {
  return new Navigation;
}

void Navigation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(1)) {
      if (path_ != NULL) path_->::rec::widget::pane::Path::Clear();
    }
    tab_ = 1;
    orientation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Navigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional .rec.widget.pane.Path path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tab;
        break;
      }
      
      // optional .rec.widget.pane.Navigation.Tab tab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::widget::pane::Navigation_Tab_IsValid(value)) {
            set_tab(static_cast< ::rec::widget::pane::Navigation_Tab >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orientation;
        break;
      }
      
      // optional .rec.widget.pane.Navigation.Orientation orientation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::widget::pane::Navigation_Orientation_IsValid(value)) {
            set_orientation(static_cast< ::rec::widget::pane::Navigation_Orientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Navigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }
  
  // optional .rec.widget.pane.Navigation.Tab tab = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tab(), output);
  }
  
  // optional .rec.widget.pane.Navigation.Orientation orientation = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->orientation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Navigation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }
  
  // optional .rec.widget.pane.Navigation.Tab tab = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tab(), target);
  }
  
  // optional .rec.widget.pane.Navigation.Orientation orientation = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->orientation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Navigation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional .rec.widget.pane.Path path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
    // optional .rec.widget.pane.Navigation.Tab tab = 3;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tab());
    }
    
    // optional .rec.widget.pane.Navigation.Orientation orientation = 4;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Navigation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Navigation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Navigation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Navigation::MergeFrom(const Navigation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      mutable_path()->::rec::widget::pane::Path::MergeFrom(from.path());
    }
    if (from._has_bit(2)) {
      set_tab(from.tab());
    }
    if (from._has_bit(3)) {
      set_orientation(from.orientation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Navigation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Navigation::CopyFrom(const Navigation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navigation::IsInitialized() const {
  
  return true;
}

void Navigation::Swap(Navigation* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(path_, other->path_);
    std::swap(tab_, other->tab_);
    std::swap(orientation_, other->orientation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Navigation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Navigation_descriptor_;
  metadata.reflection = Navigation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Directory::kWidgetFieldNumber;
const int Directory::kPathFieldNumber;
#endif  // !_MSC_VER

Directory::Directory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Directory::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  path_ = const_cast< ::rec::widget::pane::Path*>(&::rec::widget::pane::Path::default_instance());
}

Directory::Directory(const Directory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Directory::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  path_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Directory::~Directory() {
  SharedDtor();
}

void Directory::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete path_;
  }
}

void Directory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Directory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Directory_descriptor_;
}

const Directory& Directory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

Directory* Directory::default_instance_ = NULL;

Directory* Directory::New() const {
  return new Directory;
}

void Directory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(1)) {
      if (path_ != NULL) path_->::rec::widget::pane::Path::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Directory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional .rec.widget.pane.Path path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Directory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Directory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Directory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional .rec.widget.pane.Path path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Directory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Directory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Directory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Directory::MergeFrom(const Directory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      mutable_path()->::rec::widget::pane::Path::MergeFrom(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Directory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Directory::CopyFrom(const Directory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directory::IsInitialized() const {
  
  return true;
}

void Directory::Swap(Directory* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Directory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Directory_descriptor_;
  metadata.reflection = Directory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Track::kWidgetFieldNumber;
const int Track::kPathFieldNumber;
const int Track::kTimestretchFieldNumber;
#endif  // !_MSC_VER

Track::Track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Track::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  path_ = const_cast< ::rec::widget::pane::Path*>(&::rec::widget::pane::Path::default_instance());
  timestretch_ = const_cast< ::rec::audio::source::TimeStretch*>(&::rec::audio::source::TimeStretch::default_instance());
}

Track::Track(const Track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Track::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  path_ = NULL;
  timestretch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Track::~Track() {
  SharedDtor();
}

void Track::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete path_;
    delete timestretch_;
  }
}

void Track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Track_descriptor_;
}

const Track& Track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

Track* Track::default_instance_ = NULL;

Track* Track::New() const {
  return new Track;
}

void Track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(1)) {
      if (path_ != NULL) path_->::rec::widget::pane::Path::Clear();
    }
    if (_has_bit(2)) {
      if (timestretch_ != NULL) timestretch_->::rec::audio::source::TimeStretch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional .rec.widget.pane.Path path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestretch;
        break;
      }
      
      // optional .rec.audio.source.TimeStretch timestretch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestretch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestretch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }
  
  // optional .rec.audio.source.TimeStretch timestretch = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timestretch(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional .rec.widget.pane.Path path = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }
  
  // optional .rec.audio.source.TimeStretch timestretch = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timestretch(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional .rec.widget.pane.Path path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
    // optional .rec.audio.source.TimeStretch timestretch = 3;
    if (has_timestretch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestretch());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Track::MergeFrom(const Track& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      mutable_path()->::rec::widget::pane::Path::MergeFrom(from.path());
    }
    if (from._has_bit(2)) {
      mutable_timestretch()->::rec::audio::source::TimeStretch::MergeFrom(from.timestretch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Track::CopyFrom(const Track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Track::IsInitialized() const {
  
  return true;
}

void Track::Swap(Track* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(path_, other->path_);
    std::swap(timestretch_, other->timestretch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Track_descriptor_;
  metadata.reflection = Track_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pane
}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
