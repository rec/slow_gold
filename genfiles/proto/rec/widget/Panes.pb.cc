// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/Panes.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {

namespace {

const ::google::protobuf::Descriptor* Pane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pane_reflection_ = NULL;
const ::google::protobuf::Descriptor* NavigationPane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationPane_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NavigationPane_Tab_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DirectoryPane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectoryPane_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackPane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackPane_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/Panes.proto");
  GOOGLE_CHECK(file != NULL);
  Pane_descriptor_ = file->message_type(0);
  static const int Pane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pane, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pane, widget_),
  };
  Pane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pane_descriptor_,
      Pane::default_instance_,
      Pane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pane));
  NavigationPane_descriptor_ = file->message_type(1);
  static const int NavigationPane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPane, pane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPane, tab_),
  };
  NavigationPane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NavigationPane_descriptor_,
      NavigationPane::default_instance_,
      NavigationPane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NavigationPane));
  NavigationPane_Tab_descriptor_ = NavigationPane_descriptor_->enum_type(0);
  DirectoryPane_descriptor_ = file->message_type(2);
  static const int DirectoryPane_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryPane, pane_),
  };
  DirectoryPane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectoryPane_descriptor_,
      DirectoryPane::default_instance_,
      DirectoryPane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryPane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectoryPane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectoryPane));
  TrackPane_descriptor_ = file->message_type(3);
  static const int TrackPane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPane, pane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPane, timestretch_),
  };
  TrackPane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackPane_descriptor_,
      TrackPane::default_instance_,
      TrackPane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackPane));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pane_descriptor_, &Pane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NavigationPane_descriptor_, &NavigationPane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectoryPane_descriptor_, &DirectoryPane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackPane_descriptor_, &TrackPane::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto() {
  delete Pane::default_instance_;
  delete Pane_reflection_;
  delete NavigationPane::default_instance_;
  delete NavigationPane_reflection_;
  delete DirectoryPane::default_instance_;
  delete DirectoryPane_reflection_;
  delete TrackPane::default_instance_;
  delete TrackPane_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::widget::protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  ::rec::audio::source::protobuf_AddDesc_rec_2faudio_2fsource_2fTimeStretch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rec/widget/Panes.proto\022\nrec.widget\032\027re"
    "c/widget/Widget.proto\032\"rec/audio/source/"
    "TimeStretch.proto\"8\n\004Pane\022\014\n\004path\030\001 \003(\t\022"
    "\"\n\006widget\030\002 \001(\0132\022.rec.widget.Widget\"\177\n\016N"
    "avigationPane\022\036\n\004pane\030\001 \001(\0132\020.rec.widget"
    ".Pane\022+\n\003tab\030\002 \001(\0162\036.rec.widget.Navigati"
    "onPane.Tab\" \n\003Tab\022\010\n\004FILE\020\001\022\006\n\002CD\020\002\022\007\n\003U"
    "RL\020\003\"/\n\rDirectoryPane\022\036\n\004pane\030\001 \001(\0132\020.re"
    "c.widget.Pane\"_\n\tTrackPane\022\036\n\004pane\030\001 \001(\013"
    "2\020.rec.widget.Pane\0222\n\013timestretch\030\002 \001(\0132"
    "\035.rec.audio.source.TimeStretch", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/Panes.proto", &protobuf_RegisterTypes);
  Pane::default_instance_ = new Pane();
  NavigationPane::default_instance_ = new NavigationPane();
  DirectoryPane::default_instance_ = new DirectoryPane();
  TrackPane::default_instance_ = new TrackPane();
  Pane::default_instance_->InitAsDefaultInstance();
  NavigationPane::default_instance_->InitAsDefaultInstance();
  DirectoryPane::default_instance_->InitAsDefaultInstance();
  TrackPane::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2fPanes_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2fPanes_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2fPanes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Pane::kPathFieldNumber;
const int Pane::kWidgetFieldNumber;
#endif  // !_MSC_VER

Pane::Pane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pane::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
}

Pane::Pane(const Pane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pane::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pane::~Pane() {
  SharedDtor();
}

void Pane::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
  }
}

void Pane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pane_descriptor_;
}

const Pane& Pane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

Pane* Pane::default_instance_ = NULL;

Pane* Pane::New() const {
  return new Pane;
}

void Pane::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(0).data(), this->path(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectTag(18)) goto parse_widget;
        break;
      }
      
      // optional .rec.widget.Widget widget = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_widget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }
  
  // optional .rec.widget.Widget widget = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->widget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }
  
  // optional .rec.widget.Widget widget = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->widget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rec.widget.Widget widget = 2;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
  }
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pane::MergeFrom(const Pane& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pane::CopyFrom(const Pane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pane::IsInitialized() const {
  
  return true;
}

void Pane::Swap(Pane* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(widget_, other->widget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pane_descriptor_;
  metadata.reflection = Pane_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NavigationPane_Tab_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationPane_Tab_descriptor_;
}
bool NavigationPane_Tab_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NavigationPane_Tab NavigationPane::FILE;
const NavigationPane_Tab NavigationPane::CD;
const NavigationPane_Tab NavigationPane::URL;
const NavigationPane_Tab NavigationPane::Tab_MIN;
const NavigationPane_Tab NavigationPane::Tab_MAX;
const int NavigationPane::Tab_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NavigationPane::kPaneFieldNumber;
const int NavigationPane::kTabFieldNumber;
#endif  // !_MSC_VER

NavigationPane::NavigationPane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NavigationPane::InitAsDefaultInstance() {
  pane_ = const_cast< ::rec::widget::Pane*>(&::rec::widget::Pane::default_instance());
}

NavigationPane::NavigationPane(const NavigationPane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NavigationPane::SharedCtor() {
  _cached_size_ = 0;
  pane_ = NULL;
  tab_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationPane::~NavigationPane() {
  SharedDtor();
}

void NavigationPane::SharedDtor() {
  if (this != default_instance_) {
    delete pane_;
  }
}

void NavigationPane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationPane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationPane_descriptor_;
}

const NavigationPane& NavigationPane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

NavigationPane* NavigationPane::default_instance_ = NULL;

NavigationPane* NavigationPane::New() const {
  return new NavigationPane;
}

void NavigationPane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
    }
    tab_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NavigationPane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Pane pane = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pane()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tab;
        break;
      }
      
      // optional .rec.widget.NavigationPane.Tab tab = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::widget::NavigationPane_Tab_IsValid(value)) {
            set_tab(static_cast< ::rec::widget::NavigationPane_Tab >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NavigationPane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pane(), output);
  }
  
  // optional .rec.widget.NavigationPane.Tab tab = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tab(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NavigationPane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pane(), target);
  }
  
  // optional .rec.widget.NavigationPane.Tab tab = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tab(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NavigationPane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Pane pane = 1;
    if (has_pane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pane());
    }
    
    // optional .rec.widget.NavigationPane.Tab tab = 2;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tab());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationPane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NavigationPane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NavigationPane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NavigationPane::MergeFrom(const NavigationPane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_pane()->::rec::widget::Pane::MergeFrom(from.pane());
    }
    if (from._has_bit(1)) {
      set_tab(from.tab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NavigationPane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPane::CopyFrom(const NavigationPane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPane::IsInitialized() const {
  
  return true;
}

void NavigationPane::Swap(NavigationPane* other) {
  if (other != this) {
    std::swap(pane_, other->pane_);
    std::swap(tab_, other->tab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NavigationPane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationPane_descriptor_;
  metadata.reflection = NavigationPane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirectoryPane::kPaneFieldNumber;
#endif  // !_MSC_VER

DirectoryPane::DirectoryPane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectoryPane::InitAsDefaultInstance() {
  pane_ = const_cast< ::rec::widget::Pane*>(&::rec::widget::Pane::default_instance());
}

DirectoryPane::DirectoryPane(const DirectoryPane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectoryPane::SharedCtor() {
  _cached_size_ = 0;
  pane_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectoryPane::~DirectoryPane() {
  SharedDtor();
}

void DirectoryPane::SharedDtor() {
  if (this != default_instance_) {
    delete pane_;
  }
}

void DirectoryPane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectoryPane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectoryPane_descriptor_;
}

const DirectoryPane& DirectoryPane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

DirectoryPane* DirectoryPane::default_instance_ = NULL;

DirectoryPane* DirectoryPane::New() const {
  return new DirectoryPane;
}

void DirectoryPane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectoryPane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Pane pane = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pane()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectoryPane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pane(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectoryPane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pane(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectoryPane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Pane pane = 1;
    if (has_pane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pane());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectoryPane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectoryPane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectoryPane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectoryPane::MergeFrom(const DirectoryPane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_pane()->::rec::widget::Pane::MergeFrom(from.pane());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectoryPane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryPane::CopyFrom(const DirectoryPane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryPane::IsInitialized() const {
  
  return true;
}

void DirectoryPane::Swap(DirectoryPane* other) {
  if (other != this) {
    std::swap(pane_, other->pane_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectoryPane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectoryPane_descriptor_;
  metadata.reflection = DirectoryPane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackPane::kPaneFieldNumber;
const int TrackPane::kTimestretchFieldNumber;
#endif  // !_MSC_VER

TrackPane::TrackPane()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackPane::InitAsDefaultInstance() {
  pane_ = const_cast< ::rec::widget::Pane*>(&::rec::widget::Pane::default_instance());
  timestretch_ = const_cast< ::rec::audio::source::TimeStretch*>(&::rec::audio::source::TimeStretch::default_instance());
}

TrackPane::TrackPane(const TrackPane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackPane::SharedCtor() {
  _cached_size_ = 0;
  pane_ = NULL;
  timestretch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackPane::~TrackPane() {
  SharedDtor();
}

void TrackPane::SharedDtor() {
  if (this != default_instance_) {
    delete pane_;
    delete timestretch_;
  }
}

void TrackPane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackPane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackPane_descriptor_;
}

const TrackPane& TrackPane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();  return *default_instance_;
}

TrackPane* TrackPane::default_instance_ = NULL;

TrackPane* TrackPane::New() const {
  return new TrackPane;
}

void TrackPane::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
    }
    if (_has_bit(1)) {
      if (timestretch_ != NULL) timestretch_->::rec::audio::source::TimeStretch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackPane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Pane pane = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pane()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timestretch;
        break;
      }
      
      // optional .rec.audio.source.TimeStretch timestretch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestretch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestretch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackPane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pane(), output);
  }
  
  // optional .rec.audio.source.TimeStretch timestretch = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestretch(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackPane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Pane pane = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pane(), target);
  }
  
  // optional .rec.audio.source.TimeStretch timestretch = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestretch(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackPane::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Pane pane = 1;
    if (has_pane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pane());
    }
    
    // optional .rec.audio.source.TimeStretch timestretch = 2;
    if (has_timestretch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestretch());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackPane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackPane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackPane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackPane::MergeFrom(const TrackPane& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_pane()->::rec::widget::Pane::MergeFrom(from.pane());
    }
    if (from._has_bit(1)) {
      mutable_timestretch()->::rec::audio::source::TimeStretch::MergeFrom(from.timestretch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackPane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPane::CopyFrom(const TrackPane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPane::IsInitialized() const {
  
  return true;
}

void TrackPane::Swap(TrackPane* other) {
  if (other != this) {
    std::swap(pane_, other->pane_);
    std::swap(timestretch_, other->timestretch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackPane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackPane_descriptor_;
  metadata.reflection = TrackPane_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
