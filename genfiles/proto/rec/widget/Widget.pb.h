// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/Widget.proto

#ifndef PROTOBUF_rec_2fwidget_2fWidget_2eproto__INCLUDED
#define PROTOBUF_rec_2fwidget_2fWidget_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/gui/Color.pb.h"
#include "rec/gui/Font.pb.h"
#include "rec/gui/Geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
void protobuf_AssignDesc_rec_2fwidget_2fWidget_2eproto();
void protobuf_ShutdownFile_rec_2fwidget_2fWidget_2eproto();

class State;
class Widget;

enum State_MouseState {
  State_MouseState_NONE = 0,
  State_MouseState_DOWN = 1,
  State_MouseState_HOVERING = 2
};
bool State_MouseState_IsValid(int value);
const State_MouseState State_MouseState_MouseState_MIN = State_MouseState_NONE;
const State_MouseState State_MouseState_MouseState_MAX = State_MouseState_HOVERING;
const int State_MouseState_MouseState_ARRAYSIZE = State_MouseState_MouseState_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_MouseState_descriptor();
inline const ::std::string& State_MouseState_Name(State_MouseState value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_MouseState_descriptor(), value);
}
inline bool State_MouseState_Parse(
    const ::std::string& name, State_MouseState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State_MouseState>(
    State_MouseState_descriptor(), name, value);
}
// ===================================================================

class State : public ::google::protobuf::Message {
 public:
  State();
  virtual ~State();
  
  State(const State& from);
  
  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();
  
  void Swap(State* other);
  
  // implements Message ----------------------------------------------
  
  State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef State_MouseState MouseState;
  static const MouseState NONE = State_MouseState_NONE;
  static const MouseState DOWN = State_MouseState_DOWN;
  static const MouseState HOVERING = State_MouseState_HOVERING;
  static inline bool MouseState_IsValid(int value) {
    return State_MouseState_IsValid(value);
  }
  static const MouseState MouseState_MIN =
    State_MouseState_MouseState_MIN;
  static const MouseState MouseState_MAX =
    State_MouseState_MouseState_MAX;
  static const int MouseState_ARRAYSIZE =
    State_MouseState_MouseState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MouseState_descriptor() {
    return State_MouseState_descriptor();
  }
  static inline const ::std::string& MouseState_Name(MouseState value) {
    return State_MouseState_Name(value);
  }
  static inline bool MouseState_Parse(const ::std::string& name,
      MouseState* value) {
    return State_MouseState_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool selected = 1;
  inline bool has_selected() const;
  inline void clear_selected();
  static const int kSelectedFieldNumber = 1;
  inline bool selected() const;
  inline void set_selected(bool value);
  
  // optional .rec.widget.State.MouseState mouse = 2;
  inline bool has_mouse() const;
  inline void clear_mouse();
  static const int kMouseFieldNumber = 2;
  inline ::rec::widget::State_MouseState mouse() const;
  inline void set_mouse(::rec::widget::State_MouseState value);
  
  // @@protoc_insertion_point(class_scope:rec.widget.State)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool selected_;
  int mouse_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fWidget_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fWidget_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class Widget : public ::google::protobuf::Message {
 public:
  Widget();
  virtual ~Widget();
  
  Widget(const Widget& from);
  
  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Widget& default_instance();
  
  void Swap(Widget* other);
  
  // implements Message ----------------------------------------------
  
  Widget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Widget& from);
  void MergeFrom(const Widget& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional .rec.gui.Colors colors = 2;
  inline bool has_colors() const;
  inline void clear_colors();
  static const int kColorsFieldNumber = 2;
  inline const ::rec::gui::Colors& colors() const;
  inline ::rec::gui::Colors* mutable_colors();
  
  // optional .rec.gui.FontDesc font = 3;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 3;
  inline const ::rec::gui::FontDesc& font() const;
  inline ::rec::gui::FontDesc* mutable_font();
  
  // optional uint32 margin = 4 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 4;
  inline ::google::protobuf::uint32 margin() const;
  inline void set_margin(::google::protobuf::uint32 value);
  
  // optional bool transparent = 5;
  inline bool has_transparent() const;
  inline void clear_transparent();
  static const int kTransparentFieldNumber = 5;
  inline bool transparent() const;
  inline void set_transparent(bool value);
  
  // optional .rec.gui.Layer layer = 6;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 6;
  inline const ::rec::gui::Layer& layer() const;
  inline ::rec::gui::Layer* mutable_layer();
  
  // optional .rec.widget.State state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline const ::rec::widget::State& state() const;
  inline ::rec::widget::State* mutable_state();
  
  // @@protoc_insertion_point(class_scope:rec.widget.Widget)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::rec::gui::Colors* colors_;
  ::rec::gui::FontDesc* font_;
  ::google::protobuf::uint32 margin_;
  bool transparent_;
  ::rec::gui::Layer* layer_;
  ::rec::widget::State* state_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fWidget_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fWidget_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Widget* default_instance_;
};
// ===================================================================


// ===================================================================

// State

// optional bool selected = 1;
inline bool State::has_selected() const {
  return _has_bit(0);
}
inline void State::clear_selected() {
  selected_ = false;
  _clear_bit(0);
}
inline bool State::selected() const {
  return selected_;
}
inline void State::set_selected(bool value) {
  _set_bit(0);
  selected_ = value;
}

// optional .rec.widget.State.MouseState mouse = 2;
inline bool State::has_mouse() const {
  return _has_bit(1);
}
inline void State::clear_mouse() {
  mouse_ = 0;
  _clear_bit(1);
}
inline ::rec::widget::State_MouseState State::mouse() const {
  return static_cast< ::rec::widget::State_MouseState >(mouse_);
}
inline void State::set_mouse(::rec::widget::State_MouseState value) {
  GOOGLE_DCHECK(::rec::widget::State_MouseState_IsValid(value));
  _set_bit(1);
  mouse_ = value;
}

// -------------------------------------------------------------------

// Widget

// optional string name = 1;
inline bool Widget::has_name() const {
  return _has_bit(0);
}
inline void Widget::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Widget::name() const {
  return *name_;
}
inline void Widget::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Widget::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Widget::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Widget::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional .rec.gui.Colors colors = 2;
inline bool Widget::has_colors() const {
  return _has_bit(1);
}
inline void Widget::clear_colors() {
  if (colors_ != NULL) colors_->::rec::gui::Colors::Clear();
  _clear_bit(1);
}
inline const ::rec::gui::Colors& Widget::colors() const {
  return colors_ != NULL ? *colors_ : *default_instance_->colors_;
}
inline ::rec::gui::Colors* Widget::mutable_colors() {
  _set_bit(1);
  if (colors_ == NULL) colors_ = new ::rec::gui::Colors;
  return colors_;
}

// optional .rec.gui.FontDesc font = 3;
inline bool Widget::has_font() const {
  return _has_bit(2);
}
inline void Widget::clear_font() {
  if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
  _clear_bit(2);
}
inline const ::rec::gui::FontDesc& Widget::font() const {
  return font_ != NULL ? *font_ : *default_instance_->font_;
}
inline ::rec::gui::FontDesc* Widget::mutable_font() {
  _set_bit(2);
  if (font_ == NULL) font_ = new ::rec::gui::FontDesc;
  return font_;
}

// optional uint32 margin = 4 [default = 2];
inline bool Widget::has_margin() const {
  return _has_bit(3);
}
inline void Widget::clear_margin() {
  margin_ = 2u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Widget::margin() const {
  return margin_;
}
inline void Widget::set_margin(::google::protobuf::uint32 value) {
  _set_bit(3);
  margin_ = value;
}

// optional bool transparent = 5;
inline bool Widget::has_transparent() const {
  return _has_bit(4);
}
inline void Widget::clear_transparent() {
  transparent_ = false;
  _clear_bit(4);
}
inline bool Widget::transparent() const {
  return transparent_;
}
inline void Widget::set_transparent(bool value) {
  _set_bit(4);
  transparent_ = value;
}

// optional .rec.gui.Layer layer = 6;
inline bool Widget::has_layer() const {
  return _has_bit(5);
}
inline void Widget::clear_layer() {
  if (layer_ != NULL) layer_->::rec::gui::Layer::Clear();
  _clear_bit(5);
}
inline const ::rec::gui::Layer& Widget::layer() const {
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::rec::gui::Layer* Widget::mutable_layer() {
  _set_bit(5);
  if (layer_ == NULL) layer_ = new ::rec::gui::Layer;
  return layer_;
}

// optional .rec.widget.State state = 7;
inline bool Widget::has_state() const {
  return _has_bit(6);
}
inline void Widget::clear_state() {
  if (state_ != NULL) state_->::rec::widget::State::Clear();
  _clear_bit(6);
}
inline const ::rec::widget::State& Widget::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::rec::widget::State* Widget::mutable_state() {
  _set_bit(6);
  if (state_ == NULL) state_ = new ::rec::widget::State;
  return state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace widget
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::widget::State_MouseState>() {
  return ::rec::widget::State_MouseState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fwidget_2fWidget_2eproto__INCLUDED
