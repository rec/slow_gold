// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/Widget.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/Widget.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* State_MouseState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Widget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Widget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2fWidget_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/Widget.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, mouse_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  State_MouseState_descriptor_ = State_descriptor_->enum_type(0);
  Widget_descriptor_ = file->message_type(1);
  static const int Widget_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, transparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, state_),
  };
  Widget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Widget_descriptor_,
      Widget::default_instance_,
      Widget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Widget));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2fWidget_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Widget_descriptor_, &Widget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2fWidget_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
  delete Widget::default_instance_;
  delete Widget_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fGeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rec/widget/Widget.proto\022\nrec.widget\032\023r"
    "ec/gui/Color.proto\032\022rec/gui/Font.proto\032\026"
    "rec/gui/Geometry.proto\"v\n\005State\022\020\n\010selec"
    "ted\030\001 \001(\010\022+\n\005mouse\030\002 \001(\0162\034.rec.widget.St"
    "ate.MouseState\".\n\nMouseState\022\010\n\004NONE\020\000\022\010"
    "\n\004DOWN\020\001\022\014\n\010HOVERING\020\002\"\301\001\n\006Widget\022\014\n\004nam"
    "e\030\001 \001(\t\022\037\n\006colors\030\002 \001(\0132\017.rec.gui.Colors"
    "\022\037\n\004font\030\003 \001(\0132\021.rec.gui.FontDesc\022\021\n\006mar"
    "gin\030\004 \001(\r:\0012\022\023\n\013transparent\030\005 \001(\010\022\035\n\005lay"
    "er\030\006 \001(\0132\016.rec.gui.Layer\022 \n\005state\030\007 \001(\0132"
    "\021.rec.widget.State", 418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/Widget.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  Widget::default_instance_ = new Widget();
  State::default_instance_->InitAsDefaultInstance();
  Widget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2fWidget_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2fWidget_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2fWidget_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2fWidget_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* State_MouseState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_MouseState_descriptor_;
}
bool State_MouseState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const State_MouseState State::NONE;
const State_MouseState State::DOWN;
const State_MouseState State::HOVERING;
const State_MouseState State::MouseState_MIN;
const State_MouseState State::MouseState_MAX;
const int State::MouseState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int State::kSelectedFieldNumber;
const int State::kMouseFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  selected_ = false;
  mouse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selected_ = false;
    mouse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool selected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mouse;
        break;
      }

      // optional .rec.widget.State.MouseState mouse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouse:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::widget::State_MouseState_IsValid(value)) {
            set_mouse(static_cast< ::rec::widget::State_MouseState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool selected = 1;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selected(), output);
  }

  // optional .rec.widget.State.MouseState mouse = 2;
  if (has_mouse()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mouse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool selected = 1;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->selected(), target);
  }

  // optional .rec.widget.State.MouseState mouse = 2;
  if (has_mouse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mouse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool selected = 1;
    if (has_selected()) {
      total_size += 1 + 1;
    }

    // optional .rec.widget.State.MouseState mouse = 2;
    if (has_mouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mouse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selected()) {
      set_selected(from.selected());
    }
    if (from.has_mouse()) {
      set_mouse(from.mouse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {

  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(selected_, other->selected_);
    std::swap(mouse_, other->mouse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Widget::kNameFieldNumber;
const int Widget::kColorsFieldNumber;
const int Widget::kFontFieldNumber;
const int Widget::kMarginFieldNumber;
const int Widget::kTransparentFieldNumber;
const int Widget::kLayerFieldNumber;
const int Widget::kStateFieldNumber;
#endif  // !_MSC_VER

Widget::Widget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Widget::InitAsDefaultInstance() {
  colors_ = const_cast< ::rec::gui::Colors*>(&::rec::gui::Colors::default_instance());
  font_ = const_cast< ::rec::gui::FontDesc*>(&::rec::gui::FontDesc::default_instance());
  layer_ = const_cast< ::rec::gui::Layer*>(&::rec::gui::Layer::default_instance());
  state_ = const_cast< ::rec::widget::State*>(&::rec::widget::State::default_instance());
}

Widget::Widget(const Widget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Widget::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colors_ = NULL;
  font_ = NULL;
  margin_ = 2u;
  transparent_ = false;
  layer_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Widget::~Widget() {
  SharedDtor();
}

void Widget::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete colors_;
    delete font_;
    delete layer_;
    delete state_;
  }
}

void Widget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Widget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Widget_descriptor_;
}

const Widget& Widget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  return *default_instance_;
}

Widget* Widget::default_instance_ = NULL;

Widget* Widget::New() const {
  return new Widget;
}

void Widget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_colors()) {
      if (colors_ != NULL) colors_->::rec::gui::Colors::Clear();
    }
    if (has_font()) {
      if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
    }
    margin_ = 2u;
    transparent_ = false;
    if (has_layer()) {
      if (layer_ != NULL) layer_->::rec::gui::Layer::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::rec::widget::State::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Widget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_colors;
        break;
      }

      // optional .rec.gui.Colors colors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_font;
        break;
      }

      // optional .rec.gui.FontDesc font = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_margin;
        break;
      }

      // optional uint32 margin = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_transparent;
        break;
      }

      // optional bool transparent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
          set_has_transparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_layer;
        break;
      }

      // optional .rec.gui.Layer layer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional .rec.widget.State state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Widget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .rec.gui.Colors colors = 2;
  if (has_colors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->colors(), output);
  }

  // optional .rec.gui.FontDesc font = 3;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->font(), output);
  }

  // optional uint32 margin = 4 [default = 2];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->margin(), output);
  }

  // optional bool transparent = 5;
  if (has_transparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transparent(), output);
  }

  // optional .rec.gui.Layer layer = 6;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->layer(), output);
  }

  // optional .rec.widget.State state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Widget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .rec.gui.Colors colors = 2;
  if (has_colors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->colors(), target);
  }

  // optional .rec.gui.FontDesc font = 3;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->font(), target);
  }

  // optional uint32 margin = 4 [default = 2];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->margin(), target);
  }

  // optional bool transparent = 5;
  if (has_transparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transparent(), target);
  }

  // optional .rec.gui.Layer layer = 6;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->layer(), target);
  }

  // optional .rec.widget.State state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Widget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .rec.gui.Colors colors = 2;
    if (has_colors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colors());
    }

    // optional .rec.gui.FontDesc font = 3;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // optional uint32 margin = 4 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }

    // optional bool transparent = 5;
    if (has_transparent()) {
      total_size += 1 + 1;
    }

    // optional .rec.gui.Layer layer = 6;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer());
    }

    // optional .rec.widget.State state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Widget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Widget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Widget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Widget::MergeFrom(const Widget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_colors()) {
      mutable_colors()->::rec::gui::Colors::MergeFrom(from.colors());
    }
    if (from.has_font()) {
      mutable_font()->::rec::gui::FontDesc::MergeFrom(from.font());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_transparent()) {
      set_transparent(from.transparent());
    }
    if (from.has_layer()) {
      mutable_layer()->::rec::gui::Layer::MergeFrom(from.layer());
    }
    if (from.has_state()) {
      mutable_state()->::rec::widget::State::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Widget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Widget::CopyFrom(const Widget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Widget::IsInitialized() const {

  return true;
}

void Widget::Swap(Widget* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(colors_, other->colors_);
    std::swap(font_, other->font_);
    std::swap(margin_, other->margin_);
    std::swap(transparent_, other->transparent_);
    std::swap(layer_, other->layer_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Widget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Widget_descriptor_;
  metadata.reflection = Widget_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
