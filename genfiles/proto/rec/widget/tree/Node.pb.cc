// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/tree/Node.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace tree {

namespace {

const ::google::protobuf::Descriptor* NodeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2ftree_2fNode_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2ftree_2fNode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/tree/Node.proto");
  GOOGLE_CHECK(file != NULL);
  NodeDesc_descriptor_ = file->message_type(0);
  static const int NodeDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, max_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, best_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, thread_priority_),
  };
  NodeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeDesc_descriptor_,
      NodeDesc::default_instance_,
      NodeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2ftree_2fNode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeDesc_descriptor_, &NodeDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2ftree_2fNode_2eproto() {
  delete NodeDesc::default_instance_;
  delete NodeDesc_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2ftree_2fNode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::widget::protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rec/widget/tree/Node.proto\022\017rec.widget"
    ".tree\032\027rec/widget/Widget.proto\"\211\001\n\010NodeD"
    "esc\022\"\n\006widget\030\001 \001(\0132\022.rec.widget.Widget\022"
    "\026\n\nmax_branch\030\002 \001(\r:\00232\022\027\n\013best_branch\030\003"
    " \001(\r:\00216\022\014\n\004icon\030\004 \001(\t\022\032\n\017thread_priorit"
    "y\030\005 \001(\r:\0014", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/tree/Node.proto", &protobuf_RegisterTypes);
  NodeDesc::default_instance_ = new NodeDesc();
  NodeDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2ftree_2fNode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2ftree_2fNode_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2ftree_2fNode_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2ftree_2fNode_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2ftree_2fNode_2eproto_;


// ===================================================================

const ::std::string NodeDesc::_default_icon_;
#ifndef _MSC_VER
const int NodeDesc::kWidgetFieldNumber;
const int NodeDesc::kMaxBranchFieldNumber;
const int NodeDesc::kBestBranchFieldNumber;
const int NodeDesc::kIconFieldNumber;
const int NodeDesc::kThreadPriorityFieldNumber;
#endif  // !_MSC_VER

NodeDesc::NodeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeDesc::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
}

NodeDesc::NodeDesc(const NodeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeDesc::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  max_branch_ = 32u;
  best_branch_ = 16u;
  icon_ = const_cast< ::std::string*>(&_default_icon_);
  thread_priority_ = 4u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDesc::~NodeDesc() {
  SharedDtor();
}

void NodeDesc::SharedDtor() {
  if (icon_ != &_default_icon_) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete widget_;
  }
}

void NodeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDesc_descriptor_;
}

const NodeDesc& NodeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2ftree_2fNode_2eproto();  return *default_instance_;
}

NodeDesc* NodeDesc::default_instance_ = NULL;

NodeDesc* NodeDesc::New() const {
  return new NodeDesc;
}

void NodeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    max_branch_ = 32u;
    best_branch_ = 16u;
    if (_has_bit(3)) {
      if (icon_ != &_default_icon_) {
        icon_->clear();
      }
    }
    thread_priority_ = 4u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_branch;
        break;
      }
      
      // optional uint32 max_branch = 2 [default = 32];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_branch_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_best_branch;
        break;
      }
      
      // optional uint32 best_branch = 3 [default = 16];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_branch_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }
      
      // optional string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_thread_priority;
        break;
      }
      
      // optional uint32 thread_priority = 5 [default = 4];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_priority_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional uint32 max_branch = 2 [default = 32];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_branch(), output);
  }
  
  // optional uint32 best_branch = 3 [default = 16];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->best_branch(), output);
  }
  
  // optional string icon = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }
  
  // optional uint32 thread_priority = 5 [default = 4];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thread_priority(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional uint32 max_branch = 2 [default = 32];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_branch(), target);
  }
  
  // optional uint32 best_branch = 3 [default = 16];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->best_branch(), target);
  }
  
  // optional string icon = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }
  
  // optional uint32 thread_priority = 5 [default = 4];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thread_priority(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional uint32 max_branch = 2 [default = 32];
    if (has_max_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_branch());
    }
    
    // optional uint32 best_branch = 3 [default = 16];
    if (has_best_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_branch());
    }
    
    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional uint32 thread_priority = 5 [default = 4];
    if (has_thread_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_priority());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDesc::MergeFrom(const NodeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      set_max_branch(from.max_branch());
    }
    if (from._has_bit(2)) {
      set_best_branch(from.best_branch());
    }
    if (from._has_bit(3)) {
      set_icon(from.icon());
    }
    if (from._has_bit(4)) {
      set_thread_priority(from.thread_priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDesc::CopyFrom(const NodeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDesc::IsInitialized() const {
  
  return true;
}

void NodeDesc::Swap(NodeDesc* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(max_branch_, other->max_branch_);
    std::swap(best_branch_, other->best_branch_);
    std::swap(icon_, other->icon_);
    std::swap(thread_priority_, other->thread_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDesc_descriptor_;
  metadata.reflection = NodeDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tree
}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
