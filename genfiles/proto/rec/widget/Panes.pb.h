// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/Panes.proto

#ifndef PROTOBUF_rec_2fwidget_2fPanes_2eproto__INCLUDED
#define PROTOBUF_rec_2fwidget_2fPanes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/widget/Widget.pb.h"
#include "rec/audio/source/TimeStretch.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto();
void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto();

class Pane;
class NavigationPane;
class DirectoryPane;
class TrackPane;

enum NavigationPane_Tab {
  NavigationPane_Tab_FILE = 1,
  NavigationPane_Tab_CD = 2,
  NavigationPane_Tab_URL = 3
};
bool NavigationPane_Tab_IsValid(int value);
const NavigationPane_Tab NavigationPane_Tab_Tab_MIN = NavigationPane_Tab_FILE;
const NavigationPane_Tab NavigationPane_Tab_Tab_MAX = NavigationPane_Tab_URL;
const int NavigationPane_Tab_Tab_ARRAYSIZE = NavigationPane_Tab_Tab_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationPane_Tab_descriptor();
inline const ::std::string& NavigationPane_Tab_Name(NavigationPane_Tab value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationPane_Tab_descriptor(), value);
}
inline bool NavigationPane_Tab_Parse(
    const ::std::string& name, NavigationPane_Tab* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationPane_Tab>(
    NavigationPane_Tab_descriptor(), name, value);
}
// ===================================================================

class Pane : public ::google::protobuf::Message {
 public:
  Pane();
  virtual ~Pane();
  
  Pane(const Pane& from);
  
  inline Pane& operator=(const Pane& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pane& default_instance();
  
  void Swap(Pane* other);
  
  // implements Message ----------------------------------------------
  
  Pane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pane& from);
  void MergeFrom(const Pane& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();
  
  // optional .rec.widget.Widget widget = 2;
  inline bool has_widget() const;
  inline void clear_widget();
  static const int kWidgetFieldNumber = 2;
  inline const ::rec::widget::Widget& widget() const;
  inline ::rec::widget::Widget* mutable_widget();
  
  // @@protoc_insertion_point(class_scope:rec.widget.Pane)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::rec::widget::Widget* widget_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pane* default_instance_;
};
// -------------------------------------------------------------------

class NavigationPane : public ::google::protobuf::Message {
 public:
  NavigationPane();
  virtual ~NavigationPane();
  
  NavigationPane(const NavigationPane& from);
  
  inline NavigationPane& operator=(const NavigationPane& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationPane& default_instance();
  
  void Swap(NavigationPane* other);
  
  // implements Message ----------------------------------------------
  
  NavigationPane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationPane& from);
  void MergeFrom(const NavigationPane& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NavigationPane_Tab Tab;
  static const Tab FILE = NavigationPane_Tab_FILE;
  static const Tab CD = NavigationPane_Tab_CD;
  static const Tab URL = NavigationPane_Tab_URL;
  static inline bool Tab_IsValid(int value) {
    return NavigationPane_Tab_IsValid(value);
  }
  static const Tab Tab_MIN =
    NavigationPane_Tab_Tab_MIN;
  static const Tab Tab_MAX =
    NavigationPane_Tab_Tab_MAX;
  static const int Tab_ARRAYSIZE =
    NavigationPane_Tab_Tab_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tab_descriptor() {
    return NavigationPane_Tab_descriptor();
  }
  static inline const ::std::string& Tab_Name(Tab value) {
    return NavigationPane_Tab_Name(value);
  }
  static inline bool Tab_Parse(const ::std::string& name,
      Tab* value) {
    return NavigationPane_Tab_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Pane pane = 1;
  inline bool has_pane() const;
  inline void clear_pane();
  static const int kPaneFieldNumber = 1;
  inline const ::rec::widget::Pane& pane() const;
  inline ::rec::widget::Pane* mutable_pane();
  
  // optional .rec.widget.NavigationPane.Tab tab = 2;
  inline bool has_tab() const;
  inline void clear_tab();
  static const int kTabFieldNumber = 2;
  inline ::rec::widget::NavigationPane_Tab tab() const;
  inline void set_tab(::rec::widget::NavigationPane_Tab value);
  
  // @@protoc_insertion_point(class_scope:rec.widget.NavigationPane)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Pane* pane_;
  int tab_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NavigationPane* default_instance_;
};
// -------------------------------------------------------------------

class DirectoryPane : public ::google::protobuf::Message {
 public:
  DirectoryPane();
  virtual ~DirectoryPane();
  
  DirectoryPane(const DirectoryPane& from);
  
  inline DirectoryPane& operator=(const DirectoryPane& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectoryPane& default_instance();
  
  void Swap(DirectoryPane* other);
  
  // implements Message ----------------------------------------------
  
  DirectoryPane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirectoryPane& from);
  void MergeFrom(const DirectoryPane& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Pane pane = 1;
  inline bool has_pane() const;
  inline void clear_pane();
  static const int kPaneFieldNumber = 1;
  inline const ::rec::widget::Pane& pane() const;
  inline ::rec::widget::Pane* mutable_pane();
  
  // @@protoc_insertion_point(class_scope:rec.widget.DirectoryPane)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Pane* pane_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DirectoryPane* default_instance_;
};
// -------------------------------------------------------------------

class TrackPane : public ::google::protobuf::Message {
 public:
  TrackPane();
  virtual ~TrackPane();
  
  TrackPane(const TrackPane& from);
  
  inline TrackPane& operator=(const TrackPane& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPane& default_instance();
  
  void Swap(TrackPane* other);
  
  // implements Message ----------------------------------------------
  
  TrackPane* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackPane& from);
  void MergeFrom(const TrackPane& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Pane pane = 1;
  inline bool has_pane() const;
  inline void clear_pane();
  static const int kPaneFieldNumber = 1;
  inline const ::rec::widget::Pane& pane() const;
  inline ::rec::widget::Pane* mutable_pane();
  
  // optional .rec.audio.source.TimeStretch timestretch = 2;
  inline bool has_timestretch() const;
  inline void clear_timestretch();
  static const int kTimestretchFieldNumber = 2;
  inline const ::rec::audio::source::TimeStretch& timestretch() const;
  inline ::rec::audio::source::TimeStretch* mutable_timestretch();
  
  // @@protoc_insertion_point(class_scope:rec.widget.TrackPane)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Pane* pane_;
  ::rec::audio::source::TimeStretch* timestretch_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fPanes_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fPanes_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TrackPane* default_instance_;
};
// ===================================================================


// ===================================================================

// Pane

// repeated string path = 1;
inline int Pane::path_size() const {
  return path_.size();
}
inline void Pane::clear_path() {
  path_.Clear();
}
inline const ::std::string& Pane::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* Pane::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void Pane::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void Pane::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void Pane::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pane::add_path() {
  return path_.Add();
}
inline void Pane::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void Pane::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void Pane::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Pane::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Pane::mutable_path() {
  return &path_;
}

// optional .rec.widget.Widget widget = 2;
inline bool Pane::has_widget() const {
  return _has_bit(1);
}
inline void Pane::clear_widget() {
  if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
  _clear_bit(1);
}
inline const ::rec::widget::Widget& Pane::widget() const {
  return widget_ != NULL ? *widget_ : *default_instance_->widget_;
}
inline ::rec::widget::Widget* Pane::mutable_widget() {
  _set_bit(1);
  if (widget_ == NULL) widget_ = new ::rec::widget::Widget;
  return widget_;
}

// -------------------------------------------------------------------

// NavigationPane

// optional .rec.widget.Pane pane = 1;
inline bool NavigationPane::has_pane() const {
  return _has_bit(0);
}
inline void NavigationPane::clear_pane() {
  if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Pane& NavigationPane::pane() const {
  return pane_ != NULL ? *pane_ : *default_instance_->pane_;
}
inline ::rec::widget::Pane* NavigationPane::mutable_pane() {
  _set_bit(0);
  if (pane_ == NULL) pane_ = new ::rec::widget::Pane;
  return pane_;
}

// optional .rec.widget.NavigationPane.Tab tab = 2;
inline bool NavigationPane::has_tab() const {
  return _has_bit(1);
}
inline void NavigationPane::clear_tab() {
  tab_ = 1;
  _clear_bit(1);
}
inline ::rec::widget::NavigationPane_Tab NavigationPane::tab() const {
  return static_cast< ::rec::widget::NavigationPane_Tab >(tab_);
}
inline void NavigationPane::set_tab(::rec::widget::NavigationPane_Tab value) {
  GOOGLE_DCHECK(::rec::widget::NavigationPane_Tab_IsValid(value));
  _set_bit(1);
  tab_ = value;
}

// -------------------------------------------------------------------

// DirectoryPane

// optional .rec.widget.Pane pane = 1;
inline bool DirectoryPane::has_pane() const {
  return _has_bit(0);
}
inline void DirectoryPane::clear_pane() {
  if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Pane& DirectoryPane::pane() const {
  return pane_ != NULL ? *pane_ : *default_instance_->pane_;
}
inline ::rec::widget::Pane* DirectoryPane::mutable_pane() {
  _set_bit(0);
  if (pane_ == NULL) pane_ = new ::rec::widget::Pane;
  return pane_;
}

// -------------------------------------------------------------------

// TrackPane

// optional .rec.widget.Pane pane = 1;
inline bool TrackPane::has_pane() const {
  return _has_bit(0);
}
inline void TrackPane::clear_pane() {
  if (pane_ != NULL) pane_->::rec::widget::Pane::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Pane& TrackPane::pane() const {
  return pane_ != NULL ? *pane_ : *default_instance_->pane_;
}
inline ::rec::widget::Pane* TrackPane::mutable_pane() {
  _set_bit(0);
  if (pane_ == NULL) pane_ = new ::rec::widget::Pane;
  return pane_;
}

// optional .rec.audio.source.TimeStretch timestretch = 2;
inline bool TrackPane::has_timestretch() const {
  return _has_bit(1);
}
inline void TrackPane::clear_timestretch() {
  if (timestretch_ != NULL) timestretch_->::rec::audio::source::TimeStretch::Clear();
  _clear_bit(1);
}
inline const ::rec::audio::source::TimeStretch& TrackPane::timestretch() const {
  return timestretch_ != NULL ? *timestretch_ : *default_instance_->timestretch_;
}
inline ::rec::audio::source::TimeStretch* TrackPane::mutable_timestretch() {
  _set_bit(1);
  if (timestretch_ == NULL) timestretch_ = new ::rec::audio::source::TimeStretch;
  return timestretch_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace widget
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::widget::NavigationPane_Tab>() {
  return ::rec::widget::NavigationPane_Tab_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fwidget_2fPanes_2eproto__INCLUDED
