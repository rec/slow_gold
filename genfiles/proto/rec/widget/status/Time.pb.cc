// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/status/Time.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace status {
namespace time {

namespace {

const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_Separator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_Separator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_Fields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_Fields_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dial_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Dial_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Bar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fTime_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/status/Time.proto");
  GOOGLE_CHECK(file != NULL);
  Text_descriptor_ = file->message_type(0);
  static const int Text_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, fields_),
  };
  Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text));
  Text_Separator_descriptor_ = Text_descriptor_->nested_type(0);
  static const int Text_Separator_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, display_ms_),
  };
  Text_Separator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_Separator_descriptor_,
      Text_Separator::default_instance_,
      Text_Separator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text_Separator));
  Text_Fields_descriptor_ = Text_descriptor_->nested_type(1);
  static const int Text_Fields_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, milliseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, frames_),
  };
  Text_Fields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_Fields_descriptor_,
      Text_Fields::default_instance_,
      Text_Fields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Fields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text_Fields));
  Dial_descriptor_ = file->message_type(1);
  static const int Dial_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, outline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, display_lap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, zero_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, empty_on_zero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, from_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, to_color_),
  };
  Dial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dial_descriptor_,
      Dial::default_instance_,
      Dial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dial));
  Dial_Direction_descriptor_ = Dial_descriptor_->enum_type(0);
  Bar_descriptor_ = file->message_type(2);
  static const int Bar_offsets_[1] = {
  };
  Bar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bar_descriptor_,
      Bar::default_instance_,
      Bar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bar));
  Time_descriptor_ = file->message_type(3);
  static const int Time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, dial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, bar_),
  };
  Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Time));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2fstatus_2fTime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_Separator_descriptor_, &Text_Separator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_Fields_descriptor_, &Text_Fields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dial_descriptor_, &Dial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bar_descriptor_, &Bar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Time_descriptor_, &Time::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fTime_2eproto() {
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Text_Separator::default_instance_;
  delete Text_Separator_reflection_;
  delete Text_Fields::default_instance_;
  delete Text_Fields_reflection_;
  delete Dial::default_instance_;
  delete Dial_reflection_;
  delete Bar::default_instance_;
  delete Bar_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::rec::widget::protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rec/widget/status/Time.proto\022\026rec.widg"
    "et.status.time\032\023rec/gui/Color.proto\032\027rec"
    "/widget/Widget.proto\"\372\002\n\004Text\022\"\n\006widget\030"
    "\001 \001(\0132\022.rec.widget.Widget\0229\n\tseparator\030\002"
    " \001(\0132&.rec.widget.status.time.Text.Separ"
    "ator\0223\n\006fields\030\003 \001(\0132#.rec.widget.status"
    ".time.Text.Fields\032]\n\tSeparator\022\021\n\tsepara"
    "tor\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\024\n\005flash\030\003 \001(\010:"
    "\005false\022\030\n\ndisplay_ms\030\004 \001(\010:\004true\032\177\n\006Fiel"
    "ds\022\024\n\005hours\030\001 \001(\010:\005false\022\025\n\007minutes\030\002 \001("
    "\010:\004true\022\025\n\007seconds\030\003 \001(\010:\004true\022\032\n\014millis"
    "econds\030\004 \001(\010:\004true\022\025\n\006frames\030\005 \001(\010:\005fals"
    "e\"\306\002\n\004Dial\022\"\n\006widget\030\001 \001(\0132\022.rec.widget."
    "Widget\022\017\n\007outline\030\002 \001(\r\022D\n\tdirection\030\003 \001"
    "(\0162&.rec.widget.status.time.Dial.Directi"
    "on:\tCLOCKWISE\022\031\n\021display_lap_count\030\004 \001(\010"
    "\022\022\n\nzero_point\030\007 \001(\002\022\033\n\rempty_on_zero\030\010 "
    "\001(\010:\004true\022\"\n\nfrom_color\030\t \001(\0132\016.rec.gui."
    "Color\022 \n\010to_color\030\n \001(\0132\016.rec.gui.Color\""
    "1\n\tDirection\022\r\n\tCLOCKWISE\020\001\022\025\n\021COUNTER_C"
    "LOCKWISE\020\002\"\005\n\003Bar\"\210\001\n\004Time\022*\n\004text\030\001 \001(\013"
    "2\034.rec.widget.status.time.Text\022*\n\004dial\030\002"
    " \001(\0132\034.rec.widget.status.time.Dial\022(\n\003ba"
    "r\030\003 \001(\0132\033.rec.widget.status.time.Bar", 956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/status/Time.proto", &protobuf_RegisterTypes);
  Text::default_instance_ = new Text();
  Text_Separator::default_instance_ = new Text_Separator();
  Text_Fields::default_instance_ = new Text_Fields();
  Dial::default_instance_ = new Dial();
  Bar::default_instance_ = new Bar();
  Time::default_instance_ = new Time();
  Text::default_instance_->InitAsDefaultInstance();
  Text_Separator::default_instance_->InitAsDefaultInstance();
  Text_Fields::default_instance_->InitAsDefaultInstance();
  Dial::default_instance_->InitAsDefaultInstance();
  Bar::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fTime_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2fstatus_2fTime_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2fstatus_2fTime_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2fstatus_2fTime_2eproto_;


// ===================================================================

const ::std::string Text_Separator::_default_separator_;
#ifndef _MSC_VER
const int Text_Separator::kSeparatorFieldNumber;
const int Text_Separator::kWidthFieldNumber;
const int Text_Separator::kFlashFieldNumber;
const int Text_Separator::kDisplayMsFieldNumber;
#endif  // !_MSC_VER

Text_Separator::Text_Separator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text_Separator::InitAsDefaultInstance() {
}

Text_Separator::Text_Separator(const Text_Separator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text_Separator::SharedCtor() {
  _cached_size_ = 0;
  separator_ = const_cast< ::std::string*>(&_default_separator_);
  width_ = 0u;
  flash_ = false;
  display_ms_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text_Separator::~Text_Separator() {
  SharedDtor();
}

void Text_Separator::SharedDtor() {
  if (separator_ != &_default_separator_) {
    delete separator_;
  }
  if (this != default_instance_) {
  }
}

void Text_Separator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text_Separator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_Separator_descriptor_;
}

const Text_Separator& Text_Separator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Text_Separator* Text_Separator::default_instance_ = NULL;

Text_Separator* Text_Separator::New() const {
  return new Text_Separator;
}

void Text_Separator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (separator_ != &_default_separator_) {
        separator_->clear();
      }
    }
    width_ = 0u;
    flash_ = false;
    display_ms_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text_Separator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string separator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_separator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->separator().data(), this->separator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flash;
        break;
      }
      
      // optional bool flash = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flash_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_display_ms;
        break;
      }
      
      // optional bool display_ms = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_ms_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text_Separator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string separator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->separator().data(), this->separator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->separator(), output);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }
  
  // optional bool flash = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flash(), output);
  }
  
  // optional bool display_ms = 4 [default = true];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->display_ms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text_Separator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string separator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->separator().data(), this->separator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->separator(), target);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }
  
  // optional bool flash = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flash(), target);
  }
  
  // optional bool display_ms = 4 [default = true];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->display_ms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text_Separator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string separator = 1;
    if (has_separator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->separator());
    }
    
    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // optional bool flash = 3 [default = false];
    if (has_flash()) {
      total_size += 1 + 1;
    }
    
    // optional bool display_ms = 4 [default = true];
    if (has_display_ms()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text_Separator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text_Separator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text_Separator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text_Separator::MergeFrom(const Text_Separator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_separator(from.separator());
    }
    if (from._has_bit(1)) {
      set_width(from.width());
    }
    if (from._has_bit(2)) {
      set_flash(from.flash());
    }
    if (from._has_bit(3)) {
      set_display_ms(from.display_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text_Separator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text_Separator::CopyFrom(const Text_Separator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text_Separator::IsInitialized() const {
  
  return true;
}

void Text_Separator::Swap(Text_Separator* other) {
  if (other != this) {
    std::swap(separator_, other->separator_);
    std::swap(width_, other->width_);
    std::swap(flash_, other->flash_);
    std::swap(display_ms_, other->display_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text_Separator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_Separator_descriptor_;
  metadata.reflection = Text_Separator_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Text_Fields::kHoursFieldNumber;
const int Text_Fields::kMinutesFieldNumber;
const int Text_Fields::kSecondsFieldNumber;
const int Text_Fields::kMillisecondsFieldNumber;
const int Text_Fields::kFramesFieldNumber;
#endif  // !_MSC_VER

Text_Fields::Text_Fields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text_Fields::InitAsDefaultInstance() {
}

Text_Fields::Text_Fields(const Text_Fields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text_Fields::SharedCtor() {
  _cached_size_ = 0;
  hours_ = false;
  minutes_ = true;
  seconds_ = true;
  milliseconds_ = true;
  frames_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text_Fields::~Text_Fields() {
  SharedDtor();
}

void Text_Fields::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Text_Fields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text_Fields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_Fields_descriptor_;
}

const Text_Fields& Text_Fields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Text_Fields* Text_Fields::default_instance_ = NULL;

Text_Fields* Text_Fields::New() const {
  return new Text_Fields;
}

void Text_Fields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hours_ = false;
    minutes_ = true;
    seconds_ = true;
    milliseconds_ = true;
    frames_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text_Fields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hours = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hours_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }
      
      // optional bool minutes = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &minutes_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }
      
      // optional bool seconds = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seconds_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_milliseconds;
        break;
      }
      
      // optional bool milliseconds = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &milliseconds_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frames;
        break;
      }
      
      // optional bool frames = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frames_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text_Fields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hours = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hours(), output);
  }
  
  // optional bool minutes = 2 [default = true];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->minutes(), output);
  }
  
  // optional bool seconds = 3 [default = true];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->seconds(), output);
  }
  
  // optional bool milliseconds = 4 [default = true];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->milliseconds(), output);
  }
  
  // optional bool frames = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->frames(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text_Fields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hours = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hours(), target);
  }
  
  // optional bool minutes = 2 [default = true];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->minutes(), target);
  }
  
  // optional bool seconds = 3 [default = true];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->seconds(), target);
  }
  
  // optional bool milliseconds = 4 [default = true];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->milliseconds(), target);
  }
  
  // optional bool frames = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->frames(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text_Fields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hours = 1 [default = false];
    if (has_hours()) {
      total_size += 1 + 1;
    }
    
    // optional bool minutes = 2 [default = true];
    if (has_minutes()) {
      total_size += 1 + 1;
    }
    
    // optional bool seconds = 3 [default = true];
    if (has_seconds()) {
      total_size += 1 + 1;
    }
    
    // optional bool milliseconds = 4 [default = true];
    if (has_milliseconds()) {
      total_size += 1 + 1;
    }
    
    // optional bool frames = 5 [default = false];
    if (has_frames()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text_Fields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text_Fields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text_Fields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text_Fields::MergeFrom(const Text_Fields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hours(from.hours());
    }
    if (from._has_bit(1)) {
      set_minutes(from.minutes());
    }
    if (from._has_bit(2)) {
      set_seconds(from.seconds());
    }
    if (from._has_bit(3)) {
      set_milliseconds(from.milliseconds());
    }
    if (from._has_bit(4)) {
      set_frames(from.frames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text_Fields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text_Fields::CopyFrom(const Text_Fields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text_Fields::IsInitialized() const {
  
  return true;
}

void Text_Fields::Swap(Text_Fields* other) {
  if (other != this) {
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(frames_, other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text_Fields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_Fields_descriptor_;
  metadata.reflection = Text_Fields_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Text::kWidgetFieldNumber;
const int Text::kSeparatorFieldNumber;
const int Text::kFieldsFieldNumber;
#endif  // !_MSC_VER

Text::Text()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  separator_ = const_cast< ::rec::widget::status::time::Text_Separator*>(&::rec::widget::status::time::Text_Separator::default_instance());
  fields_ = const_cast< ::rec::widget::status::time::Text_Fields*>(&::rec::widget::status::time::Text_Fields::default_instance());
}

Text::Text(const Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  separator_ = NULL;
  fields_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text::~Text() {
  SharedDtor();
}

void Text::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete separator_;
    delete fields_;
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New() const {
  return new Text;
}

void Text::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(1)) {
      if (separator_ != NULL) separator_->::rec::widget::status::time::Text_Separator::Clear();
    }
    if (_has_bit(2)) {
      if (fields_ != NULL) fields_->::rec::widget::status::time::Text_Fields::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_separator;
        break;
      }
      
      // optional .rec.widget.status.time.Text.Separator separator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_separator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }
      
      // optional .rec.widget.status.time.Text.Fields fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fields()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional .rec.widget.status.time.Text.Separator separator = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->separator(), output);
  }
  
  // optional .rec.widget.status.time.Text.Fields fields = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional .rec.widget.status.time.Text.Separator separator = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->separator(), target);
  }
  
  // optional .rec.widget.status.time.Text.Fields fields = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional .rec.widget.status.time.Text.Separator separator = 2;
    if (has_separator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->separator());
    }
    
    // optional .rec.widget.status.time.Text.Fields fields = 3;
    if (has_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      mutable_separator()->::rec::widget::status::time::Text_Separator::MergeFrom(from.separator());
    }
    if (from._has_bit(2)) {
      mutable_fields()->::rec::widget::status::time::Text_Fields::MergeFrom(from.fields());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  
  return true;
}

void Text::Swap(Text* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(separator_, other->separator_);
    std::swap(fields_, other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Dial_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dial_Direction_descriptor_;
}
bool Dial_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Dial_Direction Dial::CLOCKWISE;
const Dial_Direction Dial::COUNTER_CLOCKWISE;
const Dial_Direction Dial::Direction_MIN;
const Dial_Direction Dial::Direction_MAX;
const int Dial::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Dial::kWidgetFieldNumber;
const int Dial::kOutlineFieldNumber;
const int Dial::kDirectionFieldNumber;
const int Dial::kDisplayLapCountFieldNumber;
const int Dial::kZeroPointFieldNumber;
const int Dial::kEmptyOnZeroFieldNumber;
const int Dial::kFromColorFieldNumber;
const int Dial::kToColorFieldNumber;
#endif  // !_MSC_VER

Dial::Dial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dial::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  from_color_ = const_cast< ::rec::gui::Color*>(&::rec::gui::Color::default_instance());
  to_color_ = const_cast< ::rec::gui::Color*>(&::rec::gui::Color::default_instance());
}

Dial::Dial(const Dial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dial::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  outline_ = 0u;
  direction_ = 1;
  display_lap_count_ = false;
  zero_point_ = 0;
  empty_on_zero_ = true;
  from_color_ = NULL;
  to_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dial::~Dial() {
  SharedDtor();
}

void Dial::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete from_color_;
    delete to_color_;
  }
}

void Dial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dial_descriptor_;
}

const Dial& Dial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Dial* Dial::default_instance_ = NULL;

Dial* Dial::New() const {
  return new Dial;
}

void Dial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    outline_ = 0u;
    direction_ = 1;
    display_lap_count_ = false;
    zero_point_ = 0;
    empty_on_zero_ = true;
    if (_has_bit(6)) {
      if (from_color_ != NULL) from_color_->::rec::gui::Color::Clear();
    }
    if (_has_bit(7)) {
      if (to_color_ != NULL) to_color_->::rec::gui::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outline;
        break;
      }
      
      // optional uint32 outline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outline_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }
      
      // optional .rec.widget.status.time.Dial.Direction direction = 3 [default = CLOCKWISE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::widget::status::time::Dial_Direction_IsValid(value)) {
            set_direction(static_cast< ::rec::widget::status::time::Dial_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_display_lap_count;
        break;
      }
      
      // optional bool display_lap_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_lap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_lap_count_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_zero_point;
        break;
      }
      
      // optional float zero_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zero_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zero_point_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_empty_on_zero;
        break;
      }
      
      // optional bool empty_on_zero = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty_on_zero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_on_zero_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_from_color;
        break;
      }
      
      // optional .rec.gui.Color from_color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_to_color;
        break;
      }
      
      // optional .rec.gui.Color to_color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional uint32 outline = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->outline(), output);
  }
  
  // optional .rec.widget.status.time.Dial.Direction direction = 3 [default = CLOCKWISE];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }
  
  // optional bool display_lap_count = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->display_lap_count(), output);
  }
  
  // optional float zero_point = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->zero_point(), output);
  }
  
  // optional bool empty_on_zero = 8 [default = true];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->empty_on_zero(), output);
  }
  
  // optional .rec.gui.Color from_color = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->from_color(), output);
  }
  
  // optional .rec.gui.Color to_color = 10;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->to_color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional uint32 outline = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->outline(), target);
  }
  
  // optional .rec.widget.status.time.Dial.Direction direction = 3 [default = CLOCKWISE];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }
  
  // optional bool display_lap_count = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->display_lap_count(), target);
  }
  
  // optional float zero_point = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->zero_point(), target);
  }
  
  // optional bool empty_on_zero = 8 [default = true];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->empty_on_zero(), target);
  }
  
  // optional .rec.gui.Color from_color = 9;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->from_color(), target);
  }
  
  // optional .rec.gui.Color to_color = 10;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->to_color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional uint32 outline = 2;
    if (has_outline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outline());
    }
    
    // optional .rec.widget.status.time.Dial.Direction direction = 3 [default = CLOCKWISE];
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // optional bool display_lap_count = 4;
    if (has_display_lap_count()) {
      total_size += 1 + 1;
    }
    
    // optional float zero_point = 7;
    if (has_zero_point()) {
      total_size += 1 + 4;
    }
    
    // optional bool empty_on_zero = 8 [default = true];
    if (has_empty_on_zero()) {
      total_size += 1 + 1;
    }
    
    // optional .rec.gui.Color from_color = 9;
    if (has_from_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_color());
    }
    
    // optional .rec.gui.Color to_color = 10;
    if (has_to_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dial::MergeFrom(const Dial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      set_outline(from.outline());
    }
    if (from._has_bit(2)) {
      set_direction(from.direction());
    }
    if (from._has_bit(3)) {
      set_display_lap_count(from.display_lap_count());
    }
    if (from._has_bit(4)) {
      set_zero_point(from.zero_point());
    }
    if (from._has_bit(5)) {
      set_empty_on_zero(from.empty_on_zero());
    }
    if (from._has_bit(6)) {
      mutable_from_color()->::rec::gui::Color::MergeFrom(from.from_color());
    }
    if (from._has_bit(7)) {
      mutable_to_color()->::rec::gui::Color::MergeFrom(from.to_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dial::CopyFrom(const Dial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dial::IsInitialized() const {
  
  return true;
}

void Dial::Swap(Dial* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(outline_, other->outline_);
    std::swap(direction_, other->direction_);
    std::swap(display_lap_count_, other->display_lap_count_);
    std::swap(zero_point_, other->zero_point_);
    std::swap(empty_on_zero_, other->empty_on_zero_);
    std::swap(from_color_, other->from_color_);
    std::swap(to_color_, other->to_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dial_descriptor_;
  metadata.reflection = Dial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Bar::Bar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bar::InitAsDefaultInstance() {
}

Bar::Bar(const Bar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar::~Bar() {
  SharedDtor();
}

void Bar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bar_descriptor_;
}

const Bar& Bar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Bar* Bar::default_instance_ = NULL;

Bar* Bar::New() const {
  return new Bar;
}

void Bar::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Bar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bar::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bar::MergeFrom(const Bar& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar::CopyFrom(const Bar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar::IsInitialized() const {
  
  return true;
}

void Bar::Swap(Bar* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bar_descriptor_;
  metadata.reflection = Bar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Time::kTextFieldNumber;
const int Time::kDialFieldNumber;
const int Time::kBarFieldNumber;
#endif  // !_MSC_VER

Time::Time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Time::InitAsDefaultInstance() {
  text_ = const_cast< ::rec::widget::status::time::Text*>(&::rec::widget::status::time::Text::default_instance());
  dial_ = const_cast< ::rec::widget::status::time::Dial*>(&::rec::widget::status::time::Dial::default_instance());
  bar_ = const_cast< ::rec::widget::status::time::Bar*>(&::rec::widget::status::time::Bar::default_instance());
}

Time::Time(const Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  text_ = NULL;
  dial_ = NULL;
  bar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
    delete text_;
    delete dial_;
    delete bar_;
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New() const {
  return new Time;
}

void Time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != NULL) text_->::rec::widget::status::time::Text::Clear();
    }
    if (_has_bit(1)) {
      if (dial_ != NULL) dial_->::rec::widget::status::time::Dial::Clear();
    }
    if (_has_bit(2)) {
      if (bar_ != NULL) bar_->::rec::widget::status::time::Bar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.status.time.Text text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dial;
        break;
      }
      
      // optional .rec.widget.status.time.Dial dial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bar;
        break;
      }
      
      // optional .rec.widget.status.time.Bar bar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.status.time.Text text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text(), output);
  }
  
  // optional .rec.widget.status.time.Dial dial = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dial(), output);
  }
  
  // optional .rec.widget.status.time.Bar bar = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bar(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.status.time.Text text = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->text(), target);
  }
  
  // optional .rec.widget.status.time.Dial dial = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dial(), target);
  }
  
  // optional .rec.widget.status.time.Bar bar = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bar(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Time::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.status.time.Text text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }
    
    // optional .rec.widget.status.time.Dial dial = 2;
    if (has_dial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dial());
    }
    
    // optional .rec.widget.status.time.Bar bar = 3;
    if (has_bar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bar());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_text()->::rec::widget::status::time::Text::MergeFrom(from.text());
    }
    if (from._has_bit(1)) {
      mutable_dial()->::rec::widget::status::time::Dial::MergeFrom(from.dial());
    }
    if (from._has_bit(2)) {
      mutable_bar()->::rec::widget::status::time::Bar::MergeFrom(from.bar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  
  return true;
}

void Time::Swap(Time* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(dial_, other->dial_);
    std::swap(bar_, other->bar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace time
}  // namespace status
}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
