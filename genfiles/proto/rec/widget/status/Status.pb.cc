// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/widget/status/Status.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace status {

namespace {

const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transport_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto() {
  protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/widget/status/Status.proto");
  GOOGLE_CHECK(file != NULL);
  Text_descriptor_ = file->message_type(0);
  static const int Text_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, widget_),
  };
  Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text));
  Transport_descriptor_ = file->message_type(1);
  static const int Transport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, widget_),
  };
  Transport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transport_descriptor_,
      Transport::default_instance_,
      Transport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transport));
  StatusDesc_descriptor_ = file->message_type(2);
  static const int StatusDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, widget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, dial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, loop_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, transport_),
  };
  StatusDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusDesc_descriptor_,
      StatusDesc::default_instance_,
      StatusDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transport_descriptor_, &Transport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusDesc_descriptor_, &StatusDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto() {
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Transport::default_instance_;
  delete Transport_reflection_;
  delete StatusDesc::default_instance_;
  delete StatusDesc_reflection_;
}

void protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::widget::protobuf_AddDesc_rec_2fwidget_2fWidget_2eproto();
  ::rec::widget::status::time::protobuf_AddDesc_rec_2fwidget_2fstatus_2fTime_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036rec/widget/status/Status.proto\022\021rec.wi"
    "dget.status\032\027rec/widget/Widget.proto\032\034re"
    "c/widget/status/Time.proto\"*\n\004Text\022\"\n\006wi"
    "dget\030\001 \001(\0132\022.rec.widget.Widget\"/\n\tTransp"
    "ort\022\"\n\006widget\030\001 \001(\0132\022.rec.widget.Widget\""
    "\253\002\n\nStatusDesc\022\"\n\006widget\030\001 \001(\0132\022.rec.wid"
    "get.Widget\022*\n\004time\030\002 \001(\0132\034.rec.widget.st"
    "atus.time.Text\022*\n\004dial\030\003 \001(\0132\034.rec.widge"
    "t.status.time.Dial\022!\n\005album\030\004 \001(\0132\022.rec."
    "widget.Widget\022!\n\005track\030\005 \001(\0132\022.rec.widge"
    "t.Widget\022*\n\016loop_indicator\030\006 \001(\0132\022.rec.w"
    "idget.Widget\022/\n\ttransport\030\007 \001(\0132\034.rec.wi"
    "dget.status.Transport", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/widget/status/Status.proto", &protobuf_RegisterTypes);
  Text::default_instance_ = new Text();
  Transport::default_instance_ = new Transport();
  StatusDesc::default_instance_ = new StatusDesc();
  Text::default_instance_->InitAsDefaultInstance();
  Transport::default_instance_->InitAsDefaultInstance();
  StatusDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fwidget_2fstatus_2fStatus_2eproto {
  StaticDescriptorInitializer_rec_2fwidget_2fstatus_2fStatus_2eproto() {
    protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  }
} static_descriptor_initializer_rec_2fwidget_2fstatus_2fStatus_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Text::kWidgetFieldNumber;
#endif  // !_MSC_VER

Text::Text()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
}

Text::Text(const Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text::~Text() {
  SharedDtor();
}

void Text::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New() const {
  return new Text;
}

void Text::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  
  return true;
}

void Text::Swap(Text* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transport::kWidgetFieldNumber;
#endif  // !_MSC_VER

Transport::Transport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transport::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
}

Transport::Transport(const Transport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transport::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transport::~Transport() {
  SharedDtor();
}

void Transport::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
  }
}

void Transport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transport_descriptor_;
}

const Transport& Transport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();  return *default_instance_;
}

Transport* Transport::default_instance_ = NULL;

Transport* Transport::New() const {
  return new Transport;
}

void Transport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transport::MergeFrom(const Transport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport::CopyFrom(const Transport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport::IsInitialized() const {
  
  return true;
}

void Transport::Swap(Transport* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transport_descriptor_;
  metadata.reflection = Transport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusDesc::kWidgetFieldNumber;
const int StatusDesc::kTimeFieldNumber;
const int StatusDesc::kDialFieldNumber;
const int StatusDesc::kAlbumFieldNumber;
const int StatusDesc::kTrackFieldNumber;
const int StatusDesc::kLoopIndicatorFieldNumber;
const int StatusDesc::kTransportFieldNumber;
#endif  // !_MSC_VER

StatusDesc::StatusDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusDesc::InitAsDefaultInstance() {
  widget_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  time_ = const_cast< ::rec::widget::status::time::Text*>(&::rec::widget::status::time::Text::default_instance());
  dial_ = const_cast< ::rec::widget::status::time::Dial*>(&::rec::widget::status::time::Dial::default_instance());
  album_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  track_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  loop_indicator_ = const_cast< ::rec::widget::Widget*>(&::rec::widget::Widget::default_instance());
  transport_ = const_cast< ::rec::widget::status::Transport*>(&::rec::widget::status::Transport::default_instance());
}

StatusDesc::StatusDesc(const StatusDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusDesc::SharedCtor() {
  _cached_size_ = 0;
  widget_ = NULL;
  time_ = NULL;
  dial_ = NULL;
  album_ = NULL;
  track_ = NULL;
  loop_indicator_ = NULL;
  transport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusDesc::~StatusDesc() {
  SharedDtor();
}

void StatusDesc::SharedDtor() {
  if (this != default_instance_) {
    delete widget_;
    delete time_;
    delete dial_;
    delete album_;
    delete track_;
    delete loop_indicator_;
    delete transport_;
  }
}

void StatusDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusDesc_descriptor_;
}

const StatusDesc& StatusDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();  return *default_instance_;
}

StatusDesc* StatusDesc::default_instance_ = NULL;

StatusDesc* StatusDesc::New() const {
  return new StatusDesc;
}

void StatusDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(1)) {
      if (time_ != NULL) time_->::rec::widget::status::time::Text::Clear();
    }
    if (_has_bit(2)) {
      if (dial_ != NULL) dial_->::rec::widget::status::time::Dial::Clear();
    }
    if (_has_bit(3)) {
      if (album_ != NULL) album_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(4)) {
      if (track_ != NULL) track_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(5)) {
      if (loop_indicator_ != NULL) loop_indicator_->::rec::widget::Widget::Clear();
    }
    if (_has_bit(6)) {
      if (transport_ != NULL) transport_->::rec::widget::status::Transport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.widget.Widget widget = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }
      
      // optional .rec.widget.status.time.Text time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dial;
        break;
      }
      
      // optional .rec.widget.status.time.Dial dial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_album;
        break;
      }
      
      // optional .rec.widget.Widget album = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_track;
        break;
      }
      
      // optional .rec.widget.Widget track = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_loop_indicator;
        break;
      }
      
      // optional .rec.widget.Widget loop_indicator = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loop_indicator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_indicator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_transport;
        break;
      }
      
      // optional .rec.widget.status.Transport transport = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->widget(), output);
  }
  
  // optional .rec.widget.status.time.Text time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(), output);
  }
  
  // optional .rec.widget.status.time.Dial dial = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dial(), output);
  }
  
  // optional .rec.widget.Widget album = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->album(), output);
  }
  
  // optional .rec.widget.Widget track = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->track(), output);
  }
  
  // optional .rec.widget.Widget loop_indicator = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->loop_indicator(), output);
  }
  
  // optional .rec.widget.status.Transport transport = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->transport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.widget.Widget widget = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->widget(), target);
  }
  
  // optional .rec.widget.status.time.Text time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time(), target);
  }
  
  // optional .rec.widget.status.time.Dial dial = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dial(), target);
  }
  
  // optional .rec.widget.Widget album = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->album(), target);
  }
  
  // optional .rec.widget.Widget track = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->track(), target);
  }
  
  // optional .rec.widget.Widget loop_indicator = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->loop_indicator(), target);
  }
  
  // optional .rec.widget.status.Transport transport = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->transport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.widget.Widget widget = 1;
    if (has_widget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widget());
    }
    
    // optional .rec.widget.status.time.Text time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }
    
    // optional .rec.widget.status.time.Dial dial = 3;
    if (has_dial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dial());
    }
    
    // optional .rec.widget.Widget album = 4;
    if (has_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->album());
    }
    
    // optional .rec.widget.Widget track = 5;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }
    
    // optional .rec.widget.Widget loop_indicator = 6;
    if (has_loop_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loop_indicator());
    }
    
    // optional .rec.widget.status.Transport transport = 7;
    if (has_transport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transport());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusDesc::MergeFrom(const StatusDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_widget()->::rec::widget::Widget::MergeFrom(from.widget());
    }
    if (from._has_bit(1)) {
      mutable_time()->::rec::widget::status::time::Text::MergeFrom(from.time());
    }
    if (from._has_bit(2)) {
      mutable_dial()->::rec::widget::status::time::Dial::MergeFrom(from.dial());
    }
    if (from._has_bit(3)) {
      mutable_album()->::rec::widget::Widget::MergeFrom(from.album());
    }
    if (from._has_bit(4)) {
      mutable_track()->::rec::widget::Widget::MergeFrom(from.track());
    }
    if (from._has_bit(5)) {
      mutable_loop_indicator()->::rec::widget::Widget::MergeFrom(from.loop_indicator());
    }
    if (from._has_bit(6)) {
      mutable_transport()->::rec::widget::status::Transport::MergeFrom(from.transport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusDesc::CopyFrom(const StatusDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusDesc::IsInitialized() const {
  
  return true;
}

void StatusDesc::Swap(StatusDesc* other) {
  if (other != this) {
    std::swap(widget_, other->widget_);
    std::swap(time_, other->time_);
    std::swap(dial_, other->dial_);
    std::swap(album_, other->album_);
    std::swap(track_, other->track_);
    std::swap(loop_indicator_, other->loop_indicator_);
    std::swap(transport_, other->transport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusDesc_descriptor_;
  metadata.reflection = StatusDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace status
}  // namespace widget
}  // namespace rec

// @@protoc_insertion_point(global_scope)
