// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/status/Status.proto

#ifndef PROTOBUF_rec_2fwidget_2fstatus_2fStatus_2eproto__INCLUDED
#define PROTOBUF_rec_2fwidget_2fstatus_2fStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/widget/Widget.pb.h"
#include "rec/widget/status/Time.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace status {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto();

class Text;
class Transport;
class StatusDesc;

// ===================================================================

class Text : public ::google::protobuf::Message {
 public:
  Text();
  virtual ~Text();
  
  Text(const Text& from);
  
  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();
  
  void Swap(Text* other);
  
  // implements Message ----------------------------------------------
  
  Text* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Widget widget = 1;
  inline bool has_widget() const;
  inline void clear_widget();
  static const int kWidgetFieldNumber = 1;
  inline const ::rec::widget::Widget& widget() const;
  inline ::rec::widget::Widget* mutable_widget();
  
  // @@protoc_insertion_point(class_scope:rec.widget.status.Text)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Widget* widget_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Text* default_instance_;
};
// -------------------------------------------------------------------

class Transport : public ::google::protobuf::Message {
 public:
  Transport();
  virtual ~Transport();
  
  Transport(const Transport& from);
  
  inline Transport& operator=(const Transport& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport& default_instance();
  
  void Swap(Transport* other);
  
  // implements Message ----------------------------------------------
  
  Transport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transport& from);
  void MergeFrom(const Transport& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Widget widget = 1;
  inline bool has_widget() const;
  inline void clear_widget();
  static const int kWidgetFieldNumber = 1;
  inline const ::rec::widget::Widget& widget() const;
  inline ::rec::widget::Widget* mutable_widget();
  
  // @@protoc_insertion_point(class_scope:rec.widget.status.Transport)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Widget* widget_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Transport* default_instance_;
};
// -------------------------------------------------------------------

class StatusDesc : public ::google::protobuf::Message {
 public:
  StatusDesc();
  virtual ~StatusDesc();
  
  StatusDesc(const StatusDesc& from);
  
  inline StatusDesc& operator=(const StatusDesc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusDesc& default_instance();
  
  void Swap(StatusDesc* other);
  
  // implements Message ----------------------------------------------
  
  StatusDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusDesc& from);
  void MergeFrom(const StatusDesc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Widget widget = 1;
  inline bool has_widget() const;
  inline void clear_widget();
  static const int kWidgetFieldNumber = 1;
  inline const ::rec::widget::Widget& widget() const;
  inline ::rec::widget::Widget* mutable_widget();
  
  // optional .rec.widget.status.time.Text time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::rec::widget::status::time::Text& time() const;
  inline ::rec::widget::status::time::Text* mutable_time();
  
  // optional .rec.widget.status.time.Dial dial = 3;
  inline bool has_dial() const;
  inline void clear_dial();
  static const int kDialFieldNumber = 3;
  inline const ::rec::widget::status::time::Dial& dial() const;
  inline ::rec::widget::status::time::Dial* mutable_dial();
  
  // optional .rec.widget.Widget album = 4;
  inline bool has_album() const;
  inline void clear_album();
  static const int kAlbumFieldNumber = 4;
  inline const ::rec::widget::Widget& album() const;
  inline ::rec::widget::Widget* mutable_album();
  
  // optional .rec.widget.Widget track = 5;
  inline bool has_track() const;
  inline void clear_track();
  static const int kTrackFieldNumber = 5;
  inline const ::rec::widget::Widget& track() const;
  inline ::rec::widget::Widget* mutable_track();
  
  // optional .rec.widget.Widget loop_indicator = 6;
  inline bool has_loop_indicator() const;
  inline void clear_loop_indicator();
  static const int kLoopIndicatorFieldNumber = 6;
  inline const ::rec::widget::Widget& loop_indicator() const;
  inline ::rec::widget::Widget* mutable_loop_indicator();
  
  // optional .rec.widget.status.Transport transport = 7;
  inline bool has_transport() const;
  inline void clear_transport();
  static const int kTransportFieldNumber = 7;
  inline const ::rec::widget::status::Transport& transport() const;
  inline ::rec::widget::status::Transport* mutable_transport();
  
  // @@protoc_insertion_point(class_scope:rec.widget.status.StatusDesc)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Widget* widget_;
  ::rec::widget::status::time::Text* time_;
  ::rec::widget::status::time::Dial* dial_;
  ::rec::widget::Widget* album_;
  ::rec::widget::Widget* track_;
  ::rec::widget::Widget* loop_indicator_;
  ::rec::widget::status::Transport* transport_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fstatus_2fStatus_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fstatus_2fStatus_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StatusDesc* default_instance_;
};
// ===================================================================


// ===================================================================

// Text

// optional .rec.widget.Widget widget = 1;
inline bool Text::has_widget() const {
  return _has_bit(0);
}
inline void Text::clear_widget() {
  if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Widget& Text::widget() const {
  return widget_ != NULL ? *widget_ : *default_instance_->widget_;
}
inline ::rec::widget::Widget* Text::mutable_widget() {
  _set_bit(0);
  if (widget_ == NULL) widget_ = new ::rec::widget::Widget;
  return widget_;
}

// -------------------------------------------------------------------

// Transport

// optional .rec.widget.Widget widget = 1;
inline bool Transport::has_widget() const {
  return _has_bit(0);
}
inline void Transport::clear_widget() {
  if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Widget& Transport::widget() const {
  return widget_ != NULL ? *widget_ : *default_instance_->widget_;
}
inline ::rec::widget::Widget* Transport::mutable_widget() {
  _set_bit(0);
  if (widget_ == NULL) widget_ = new ::rec::widget::Widget;
  return widget_;
}

// -------------------------------------------------------------------

// StatusDesc

// optional .rec.widget.Widget widget = 1;
inline bool StatusDesc::has_widget() const {
  return _has_bit(0);
}
inline void StatusDesc::clear_widget() {
  if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Widget& StatusDesc::widget() const {
  return widget_ != NULL ? *widget_ : *default_instance_->widget_;
}
inline ::rec::widget::Widget* StatusDesc::mutable_widget() {
  _set_bit(0);
  if (widget_ == NULL) widget_ = new ::rec::widget::Widget;
  return widget_;
}

// optional .rec.widget.status.time.Text time = 2;
inline bool StatusDesc::has_time() const {
  return _has_bit(1);
}
inline void StatusDesc::clear_time() {
  if (time_ != NULL) time_->::rec::widget::status::time::Text::Clear();
  _clear_bit(1);
}
inline const ::rec::widget::status::time::Text& StatusDesc::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::rec::widget::status::time::Text* StatusDesc::mutable_time() {
  _set_bit(1);
  if (time_ == NULL) time_ = new ::rec::widget::status::time::Text;
  return time_;
}

// optional .rec.widget.status.time.Dial dial = 3;
inline bool StatusDesc::has_dial() const {
  return _has_bit(2);
}
inline void StatusDesc::clear_dial() {
  if (dial_ != NULL) dial_->::rec::widget::status::time::Dial::Clear();
  _clear_bit(2);
}
inline const ::rec::widget::status::time::Dial& StatusDesc::dial() const {
  return dial_ != NULL ? *dial_ : *default_instance_->dial_;
}
inline ::rec::widget::status::time::Dial* StatusDesc::mutable_dial() {
  _set_bit(2);
  if (dial_ == NULL) dial_ = new ::rec::widget::status::time::Dial;
  return dial_;
}

// optional .rec.widget.Widget album = 4;
inline bool StatusDesc::has_album() const {
  return _has_bit(3);
}
inline void StatusDesc::clear_album() {
  if (album_ != NULL) album_->::rec::widget::Widget::Clear();
  _clear_bit(3);
}
inline const ::rec::widget::Widget& StatusDesc::album() const {
  return album_ != NULL ? *album_ : *default_instance_->album_;
}
inline ::rec::widget::Widget* StatusDesc::mutable_album() {
  _set_bit(3);
  if (album_ == NULL) album_ = new ::rec::widget::Widget;
  return album_;
}

// optional .rec.widget.Widget track = 5;
inline bool StatusDesc::has_track() const {
  return _has_bit(4);
}
inline void StatusDesc::clear_track() {
  if (track_ != NULL) track_->::rec::widget::Widget::Clear();
  _clear_bit(4);
}
inline const ::rec::widget::Widget& StatusDesc::track() const {
  return track_ != NULL ? *track_ : *default_instance_->track_;
}
inline ::rec::widget::Widget* StatusDesc::mutable_track() {
  _set_bit(4);
  if (track_ == NULL) track_ = new ::rec::widget::Widget;
  return track_;
}

// optional .rec.widget.Widget loop_indicator = 6;
inline bool StatusDesc::has_loop_indicator() const {
  return _has_bit(5);
}
inline void StatusDesc::clear_loop_indicator() {
  if (loop_indicator_ != NULL) loop_indicator_->::rec::widget::Widget::Clear();
  _clear_bit(5);
}
inline const ::rec::widget::Widget& StatusDesc::loop_indicator() const {
  return loop_indicator_ != NULL ? *loop_indicator_ : *default_instance_->loop_indicator_;
}
inline ::rec::widget::Widget* StatusDesc::mutable_loop_indicator() {
  _set_bit(5);
  if (loop_indicator_ == NULL) loop_indicator_ = new ::rec::widget::Widget;
  return loop_indicator_;
}

// optional .rec.widget.status.Transport transport = 7;
inline bool StatusDesc::has_transport() const {
  return _has_bit(6);
}
inline void StatusDesc::clear_transport() {
  if (transport_ != NULL) transport_->::rec::widget::status::Transport::Clear();
  _clear_bit(6);
}
inline const ::rec::widget::status::Transport& StatusDesc::transport() const {
  return transport_ != NULL ? *transport_ : *default_instance_->transport_;
}
inline ::rec::widget::status::Transport* StatusDesc::mutable_transport() {
  _set_bit(6);
  if (transport_ == NULL) transport_ = new ::rec::widget::status::Transport;
  return transport_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace status
}  // namespace widget
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fwidget_2fstatus_2fStatus_2eproto__INCLUDED
