// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/waveform/Waveform.proto

#ifndef PROTOBUF_rec_2fwidget_2fwaveform_2fWaveform_2eproto__INCLUDED
#define PROTOBUF_rec_2fwidget_2fwaveform_2fWaveform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/gui/Color.pb.h"
#include "rec/gui/Font.pb.h"
#include "rec/widget/Widget.pb.h"
#include "rec/util/thread/Thread.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace waveform {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fwidget_2fwaveform_2fWaveform_2eproto();
void protobuf_AssignDesc_rec_2fwidget_2fwaveform_2fWaveform_2eproto();
void protobuf_ShutdownFile_rec_2fwidget_2fwaveform_2fWaveform_2eproto();

class WaveformProto;

enum WaveformProto_Layout {
  WaveformProto_Layout_STACKED = 1,
  WaveformProto_Layout_PARALLEL = 2
};
bool WaveformProto_Layout_IsValid(int value);
const WaveformProto_Layout WaveformProto_Layout_Layout_MIN = WaveformProto_Layout_STACKED;
const WaveformProto_Layout WaveformProto_Layout_Layout_MAX = WaveformProto_Layout_PARALLEL;
const int WaveformProto_Layout_Layout_ARRAYSIZE = WaveformProto_Layout_Layout_MAX + 1;

const ::google::protobuf::EnumDescriptor* WaveformProto_Layout_descriptor();
inline const ::std::string& WaveformProto_Layout_Name(WaveformProto_Layout value) {
  return ::google::protobuf::internal::NameOfEnum(
    WaveformProto_Layout_descriptor(), value);
}
inline bool WaveformProto_Layout_Parse(
    const ::std::string& name, WaveformProto_Layout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WaveformProto_Layout>(
    WaveformProto_Layout_descriptor(), name, value);
}
// ===================================================================

class WaveformProto : public ::google::protobuf::Message {
 public:
  WaveformProto();
  virtual ~WaveformProto();
  
  WaveformProto(const WaveformProto& from);
  
  inline WaveformProto& operator=(const WaveformProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WaveformProto& default_instance();
  
  void Swap(WaveformProto* other);
  
  // implements Message ----------------------------------------------
  
  WaveformProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaveformProto& from);
  void MergeFrom(const WaveformProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef WaveformProto_Layout Layout;
  static const Layout STACKED = WaveformProto_Layout_STACKED;
  static const Layout PARALLEL = WaveformProto_Layout_PARALLEL;
  static inline bool Layout_IsValid(int value) {
    return WaveformProto_Layout_IsValid(value);
  }
  static const Layout Layout_MIN =
    WaveformProto_Layout_Layout_MIN;
  static const Layout Layout_MAX =
    WaveformProto_Layout_Layout_MAX;
  static const int Layout_ARRAYSIZE =
    WaveformProto_Layout_Layout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Layout_descriptor() {
    return WaveformProto_Layout_descriptor();
  }
  static inline const ::std::string& Layout_Name(Layout value) {
    return WaveformProto_Layout_Name(value);
  }
  static inline bool Layout_Parse(const ::std::string& name,
      Layout* value) {
    return WaveformProto_Layout_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.widget.Widget widget = 1;
  inline bool has_widget() const;
  inline void clear_widget();
  static const int kWidgetFieldNumber = 1;
  inline const ::rec::widget::Widget& widget() const;
  inline ::rec::widget::Widget* mutable_widget();
  
  // optional uint32 cursor_thickness = 2 [default = 1];
  inline bool has_cursor_thickness() const;
  inline void clear_cursor_thickness();
  static const int kCursorThicknessFieldNumber = 2;
  inline ::google::protobuf::uint32 cursor_thickness() const;
  inline void set_cursor_thickness(::google::protobuf::uint32 value);
  
  // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
  inline bool has_source_samples_per_thumbnail_sample() const;
  inline void clear_source_samples_per_thumbnail_sample();
  static const int kSourceSamplesPerThumbnailSampleFieldNumber = 4;
  inline ::google::protobuf::uint32 source_samples_per_thumbnail_sample() const;
  inline void set_source_samples_per_thumbnail_sample(::google::protobuf::uint32 value);
  
  // optional uint32 thumbnail_cache = 5 [default = 5];
  inline bool has_thumbnail_cache() const;
  inline void clear_thumbnail_cache();
  static const int kThumbnailCacheFieldNumber = 5;
  inline ::google::protobuf::uint32 thumbnail_cache() const;
  inline void set_thumbnail_cache(::google::protobuf::uint32 value);
  
  // optional .rec.util.thread.ThreadDescription cursor_thread = 6;
  inline bool has_cursor_thread() const;
  inline void clear_cursor_thread();
  static const int kCursorThreadFieldNumber = 6;
  inline const ::rec::util::thread::ThreadDescription& cursor_thread() const;
  inline ::rec::util::thread::ThreadDescription* mutable_cursor_thread();
  
  // optional uint32 tic_height = 8 [default = 8];
  inline bool has_tic_height() const;
  inline void clear_tic_height();
  static const int kTicHeightFieldNumber = 8;
  inline ::google::protobuf::uint32 tic_height() const;
  inline void set_tic_height(::google::protobuf::uint32 value);
  
  // optional uint32 subtic_height = 9 [default = 3];
  inline bool has_subtic_height() const;
  inline void clear_subtic_height();
  static const int kSubticHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 subtic_height() const;
  inline void set_subtic_height(::google::protobuf::uint32 value);
  
  // optional bool use_captions = 10 [default = true];
  inline bool has_use_captions() const;
  inline void clear_use_captions();
  static const int kUseCaptionsFieldNumber = 10;
  inline bool use_captions() const;
  inline void set_use_captions(bool value);
  
  // optional bool tics_at_bottom = 11 [default = true];
  inline bool has_tics_at_bottom() const;
  inline void clear_tics_at_bottom();
  static const int kTicsAtBottomFieldNumber = 11;
  inline bool tics_at_bottom() const;
  inline void set_tics_at_bottom(bool value);
  
  // optional double selection_frame_in_seconds = 12 [default = 5];
  inline bool has_selection_frame_in_seconds() const;
  inline void clear_selection_frame_in_seconds();
  static const int kSelectionFrameInSecondsFieldNumber = 12;
  inline double selection_frame_in_seconds() const;
  inline void set_selection_frame_in_seconds(double value);
  
  // optional bool show_grid = 13 [default = true];
  inline bool has_show_grid() const;
  inline void clear_show_grid();
  static const int kShowGridFieldNumber = 13;
  inline bool show_grid() const;
  inline void set_show_grid(bool value);
  
  // optional bool parallel_waveforms = 14 [default = false];
  inline bool has_parallel_waveforms() const;
  inline void clear_parallel_waveforms();
  static const int kParallelWaveformsFieldNumber = 14;
  inline bool parallel_waveforms() const;
  inline void set_parallel_waveforms(bool value);
  
  // optional bool show_names_in_waveform = 15 [default = true];
  inline bool has_show_names_in_waveform() const;
  inline void clear_show_names_in_waveform();
  static const int kShowNamesInWaveformFieldNumber = 15;
  inline bool show_names_in_waveform() const;
  inline void set_show_names_in_waveform(bool value);
  
  // optional .rec.widget.waveform.WaveformProto.Layout layout = 16;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 16;
  inline ::rec::widget::waveform::WaveformProto_Layout layout() const;
  inline void set_layout(::rec::widget::waveform::WaveformProto_Layout value);
  
  // @@protoc_insertion_point(class_scope:rec.widget.waveform.WaveformProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::widget::Widget* widget_;
  ::google::protobuf::uint32 cursor_thickness_;
  ::google::protobuf::uint32 source_samples_per_thumbnail_sample_;
  ::google::protobuf::uint32 thumbnail_cache_;
  ::rec::util::thread::ThreadDescription* cursor_thread_;
  ::google::protobuf::uint32 tic_height_;
  ::google::protobuf::uint32 subtic_height_;
  bool use_captions_;
  bool tics_at_bottom_;
  double selection_frame_in_seconds_;
  bool show_grid_;
  bool parallel_waveforms_;
  bool show_names_in_waveform_;
  int layout_;
  friend void  protobuf_AddDesc_rec_2fwidget_2fwaveform_2fWaveform_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fwaveform_2fWaveform_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fwaveform_2fWaveform_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WaveformProto* default_instance_;
};
// ===================================================================


// ===================================================================

// WaveformProto

// optional .rec.widget.Widget widget = 1;
inline bool WaveformProto::has_widget() const {
  return _has_bit(0);
}
inline void WaveformProto::clear_widget() {
  if (widget_ != NULL) widget_->::rec::widget::Widget::Clear();
  _clear_bit(0);
}
inline const ::rec::widget::Widget& WaveformProto::widget() const {
  return widget_ != NULL ? *widget_ : *default_instance_->widget_;
}
inline ::rec::widget::Widget* WaveformProto::mutable_widget() {
  _set_bit(0);
  if (widget_ == NULL) widget_ = new ::rec::widget::Widget;
  return widget_;
}

// optional uint32 cursor_thickness = 2 [default = 1];
inline bool WaveformProto::has_cursor_thickness() const {
  return _has_bit(1);
}
inline void WaveformProto::clear_cursor_thickness() {
  cursor_thickness_ = 1u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 WaveformProto::cursor_thickness() const {
  return cursor_thickness_;
}
inline void WaveformProto::set_cursor_thickness(::google::protobuf::uint32 value) {
  _set_bit(1);
  cursor_thickness_ = value;
}

// optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
inline bool WaveformProto::has_source_samples_per_thumbnail_sample() const {
  return _has_bit(2);
}
inline void WaveformProto::clear_source_samples_per_thumbnail_sample() {
  source_samples_per_thumbnail_sample_ = 512u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 WaveformProto::source_samples_per_thumbnail_sample() const {
  return source_samples_per_thumbnail_sample_;
}
inline void WaveformProto::set_source_samples_per_thumbnail_sample(::google::protobuf::uint32 value) {
  _set_bit(2);
  source_samples_per_thumbnail_sample_ = value;
}

// optional uint32 thumbnail_cache = 5 [default = 5];
inline bool WaveformProto::has_thumbnail_cache() const {
  return _has_bit(3);
}
inline void WaveformProto::clear_thumbnail_cache() {
  thumbnail_cache_ = 5u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 WaveformProto::thumbnail_cache() const {
  return thumbnail_cache_;
}
inline void WaveformProto::set_thumbnail_cache(::google::protobuf::uint32 value) {
  _set_bit(3);
  thumbnail_cache_ = value;
}

// optional .rec.util.thread.ThreadDescription cursor_thread = 6;
inline bool WaveformProto::has_cursor_thread() const {
  return _has_bit(4);
}
inline void WaveformProto::clear_cursor_thread() {
  if (cursor_thread_ != NULL) cursor_thread_->::rec::util::thread::ThreadDescription::Clear();
  _clear_bit(4);
}
inline const ::rec::util::thread::ThreadDescription& WaveformProto::cursor_thread() const {
  return cursor_thread_ != NULL ? *cursor_thread_ : *default_instance_->cursor_thread_;
}
inline ::rec::util::thread::ThreadDescription* WaveformProto::mutable_cursor_thread() {
  _set_bit(4);
  if (cursor_thread_ == NULL) cursor_thread_ = new ::rec::util::thread::ThreadDescription;
  return cursor_thread_;
}

// optional uint32 tic_height = 8 [default = 8];
inline bool WaveformProto::has_tic_height() const {
  return _has_bit(5);
}
inline void WaveformProto::clear_tic_height() {
  tic_height_ = 8u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 WaveformProto::tic_height() const {
  return tic_height_;
}
inline void WaveformProto::set_tic_height(::google::protobuf::uint32 value) {
  _set_bit(5);
  tic_height_ = value;
}

// optional uint32 subtic_height = 9 [default = 3];
inline bool WaveformProto::has_subtic_height() const {
  return _has_bit(6);
}
inline void WaveformProto::clear_subtic_height() {
  subtic_height_ = 3u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 WaveformProto::subtic_height() const {
  return subtic_height_;
}
inline void WaveformProto::set_subtic_height(::google::protobuf::uint32 value) {
  _set_bit(6);
  subtic_height_ = value;
}

// optional bool use_captions = 10 [default = true];
inline bool WaveformProto::has_use_captions() const {
  return _has_bit(7);
}
inline void WaveformProto::clear_use_captions() {
  use_captions_ = true;
  _clear_bit(7);
}
inline bool WaveformProto::use_captions() const {
  return use_captions_;
}
inline void WaveformProto::set_use_captions(bool value) {
  _set_bit(7);
  use_captions_ = value;
}

// optional bool tics_at_bottom = 11 [default = true];
inline bool WaveformProto::has_tics_at_bottom() const {
  return _has_bit(8);
}
inline void WaveformProto::clear_tics_at_bottom() {
  tics_at_bottom_ = true;
  _clear_bit(8);
}
inline bool WaveformProto::tics_at_bottom() const {
  return tics_at_bottom_;
}
inline void WaveformProto::set_tics_at_bottom(bool value) {
  _set_bit(8);
  tics_at_bottom_ = value;
}

// optional double selection_frame_in_seconds = 12 [default = 5];
inline bool WaveformProto::has_selection_frame_in_seconds() const {
  return _has_bit(9);
}
inline void WaveformProto::clear_selection_frame_in_seconds() {
  selection_frame_in_seconds_ = 5;
  _clear_bit(9);
}
inline double WaveformProto::selection_frame_in_seconds() const {
  return selection_frame_in_seconds_;
}
inline void WaveformProto::set_selection_frame_in_seconds(double value) {
  _set_bit(9);
  selection_frame_in_seconds_ = value;
}

// optional bool show_grid = 13 [default = true];
inline bool WaveformProto::has_show_grid() const {
  return _has_bit(10);
}
inline void WaveformProto::clear_show_grid() {
  show_grid_ = true;
  _clear_bit(10);
}
inline bool WaveformProto::show_grid() const {
  return show_grid_;
}
inline void WaveformProto::set_show_grid(bool value) {
  _set_bit(10);
  show_grid_ = value;
}

// optional bool parallel_waveforms = 14 [default = false];
inline bool WaveformProto::has_parallel_waveforms() const {
  return _has_bit(11);
}
inline void WaveformProto::clear_parallel_waveforms() {
  parallel_waveforms_ = false;
  _clear_bit(11);
}
inline bool WaveformProto::parallel_waveforms() const {
  return parallel_waveforms_;
}
inline void WaveformProto::set_parallel_waveforms(bool value) {
  _set_bit(11);
  parallel_waveforms_ = value;
}

// optional bool show_names_in_waveform = 15 [default = true];
inline bool WaveformProto::has_show_names_in_waveform() const {
  return _has_bit(12);
}
inline void WaveformProto::clear_show_names_in_waveform() {
  show_names_in_waveform_ = true;
  _clear_bit(12);
}
inline bool WaveformProto::show_names_in_waveform() const {
  return show_names_in_waveform_;
}
inline void WaveformProto::set_show_names_in_waveform(bool value) {
  _set_bit(12);
  show_names_in_waveform_ = value;
}

// optional .rec.widget.waveform.WaveformProto.Layout layout = 16;
inline bool WaveformProto::has_layout() const {
  return _has_bit(13);
}
inline void WaveformProto::clear_layout() {
  layout_ = 1;
  _clear_bit(13);
}
inline ::rec::widget::waveform::WaveformProto_Layout WaveformProto::layout() const {
  return static_cast< ::rec::widget::waveform::WaveformProto_Layout >(layout_);
}
inline void WaveformProto::set_layout(::rec::widget::waveform::WaveformProto_Layout value) {
  GOOGLE_DCHECK(::rec::widget::waveform::WaveformProto_Layout_IsValid(value));
  _set_bit(13);
  layout_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace waveform
}  // namespace widget
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::widget::waveform::WaveformProto_Layout>() {
  return ::rec::widget::waveform::WaveformProto_Layout_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fwidget_2fwaveform_2fWaveform_2eproto__INCLUDED
