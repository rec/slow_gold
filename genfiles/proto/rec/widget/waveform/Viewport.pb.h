// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/widget/waveform/Viewport.proto

#ifndef PROTOBUF_rec_2fwidget_2fwaveform_2fViewport_2eproto__INCLUDED
#define PROTOBUF_rec_2fwidget_2fwaveform_2fViewport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/util/LoopPoint.pb.h"
#include "rec/widget/waveform/Zoom.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace widget {
namespace waveform {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fwidget_2fwaveform_2fViewport_2eproto();
void protobuf_AssignDesc_rec_2fwidget_2fwaveform_2fViewport_2eproto();
void protobuf_ShutdownFile_rec_2fwidget_2fwaveform_2fViewport_2eproto();

class Viewport;

// ===================================================================

class Viewport : public ::google::protobuf::Message {
 public:
  Viewport();
  virtual ~Viewport();

  Viewport(const Viewport& from);

  inline Viewport& operator=(const Viewport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Viewport& default_instance();

  void Swap(Viewport* other);

  // implements Message ----------------------------------------------

  Viewport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Viewport& from);
  void MergeFrom(const Viewport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rec.util.LoopPointList loop_points = 1;
  inline bool has_loop_points() const;
  inline void clear_loop_points();
  static const int kLoopPointsFieldNumber = 1;
  inline const ::rec::util::LoopPointList& loop_points() const;
  inline ::rec::util::LoopPointList* mutable_loop_points();
  inline ::rec::util::LoopPointList* release_loop_points();
  inline void set_allocated_loop_points(::rec::util::LoopPointList* loop_points);

  // optional .rec.widget.waveform.Zoom zoom = 2;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 2;
  inline const ::rec::widget::waveform::Zoom& zoom() const;
  inline ::rec::widget::waveform::Zoom* mutable_zoom();
  inline ::rec::widget::waveform::Zoom* release_zoom();
  inline void set_allocated_zoom(::rec::widget::waveform::Zoom* zoom);

  // @@protoc_insertion_point(class_scope:rec.widget.waveform.Viewport)
 private:
  inline void set_has_loop_points();
  inline void clear_has_loop_points();
  inline void set_has_zoom();
  inline void clear_has_zoom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::util::LoopPointList* loop_points_;
  ::rec::widget::waveform::Zoom* zoom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fwidget_2fwaveform_2fViewport_2eproto();
  friend void protobuf_AssignDesc_rec_2fwidget_2fwaveform_2fViewport_2eproto();
  friend void protobuf_ShutdownFile_rec_2fwidget_2fwaveform_2fViewport_2eproto();

  void InitAsDefaultInstance();
  static Viewport* default_instance_;
};
// ===================================================================


// ===================================================================

// Viewport

// optional .rec.util.LoopPointList loop_points = 1;
inline bool Viewport::has_loop_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Viewport::set_has_loop_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Viewport::clear_has_loop_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Viewport::clear_loop_points() {
  if (loop_points_ != NULL) loop_points_->::rec::util::LoopPointList::Clear();
  clear_has_loop_points();
}
inline const ::rec::util::LoopPointList& Viewport::loop_points() const {
  return loop_points_ != NULL ? *loop_points_ : *default_instance_->loop_points_;
}
inline ::rec::util::LoopPointList* Viewport::mutable_loop_points() {
  set_has_loop_points();
  if (loop_points_ == NULL) loop_points_ = new ::rec::util::LoopPointList;
  return loop_points_;
}
inline ::rec::util::LoopPointList* Viewport::release_loop_points() {
  clear_has_loop_points();
  ::rec::util::LoopPointList* temp = loop_points_;
  loop_points_ = NULL;
  return temp;
}
inline void Viewport::set_allocated_loop_points(::rec::util::LoopPointList* loop_points) {
  delete loop_points_;
  loop_points_ = loop_points;
  if (loop_points) {
    set_has_loop_points();
  } else {
    clear_has_loop_points();
  }
}

// optional .rec.widget.waveform.Zoom zoom = 2;
inline bool Viewport::has_zoom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Viewport::set_has_zoom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Viewport::clear_has_zoom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Viewport::clear_zoom() {
  if (zoom_ != NULL) zoom_->::rec::widget::waveform::Zoom::Clear();
  clear_has_zoom();
}
inline const ::rec::widget::waveform::Zoom& Viewport::zoom() const {
  return zoom_ != NULL ? *zoom_ : *default_instance_->zoom_;
}
inline ::rec::widget::waveform::Zoom* Viewport::mutable_zoom() {
  set_has_zoom();
  if (zoom_ == NULL) zoom_ = new ::rec::widget::waveform::Zoom;
  return zoom_;
}
inline ::rec::widget::waveform::Zoom* Viewport::release_zoom() {
  clear_has_zoom();
  ::rec::widget::waveform::Zoom* temp = zoom_;
  zoom_ = NULL;
  return temp;
}
inline void Viewport::set_allocated_zoom(::rec::widget::waveform::Zoom* zoom) {
  delete zoom_;
  zoom_ = zoom;
  if (zoom) {
    set_has_zoom();
  } else {
    clear_has_zoom();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace waveform
}  // namespace widget
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fwidget_2fwaveform_2fViewport_2eproto__INCLUDED
