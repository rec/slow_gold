// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/proto/Proto.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fproto_2fProto_2eproto() {
  protobuf_AddDesc_rec_2fproto_2fProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/proto/Proto.proto");
  GOOGLE_CHECK(file != NULL);
  Value_descriptor_ = file->message_type(0);
  static const int Value_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, double_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, float_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, int64_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, uint64_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, int32_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, fixed64_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, fixed32_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, bool_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, string_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, group_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, message_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, bytes_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, uint32_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, enum_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, sfixed32_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, sfixed64_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, sint32_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, sint64_f_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  Operation_descriptor_ = file->message_type(1);
  static const int Operation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, swap1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, swap2_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Operation_Command_descriptor_ = Operation_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fproto_2fProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fproto_2fProto_2eproto() {
  delete Value::default_instance_;
  delete Value_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
}

void protobuf_AddDesc_rec_2fproto_2fProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rec/proto/Proto.proto\022\trec.proto\"\311\002\n\005V"
    "alue\022\020\n\010double_f\030\001 \001(\001\022\017\n\007float_f\030\002 \001(\002\022"
    "\017\n\007int64_f\030\003 \001(\003\022\020\n\010uint64_f\030\004 \001(\004\022\017\n\007in"
    "t32_f\030\005 \001(\005\022\021\n\tfixed64_f\030\006 \001(\006\022\021\n\tfixed3"
    "2_f\030\007 \001(\007\022\016\n\006bool_f\030\010 \001(\010\022\020\n\010string_f\030\t "
    "\001(\t\022\017\n\007group_f\030\n \001(\014\022\021\n\tmessage_f\030\013 \001(\014\022"
    "\017\n\007bytes_f\030\014 \001(\014\022\020\n\010uint32_f\030\r \001(\r\022\016\n\006en"
    "um_f\030\016 \001(\005\022\022\n\nsfixed32_f\030\017 \001(\017\022\022\n\nsfixed"
    "64_f\030\020 \001(\020\022\020\n\010sint32_f\030\021 \001(\021\022\020\n\010sint64_f"
    "\030\022 \001(\022\"\345\001\n\tOperation\022-\n\007command\030\001 \001(\0162\034."
    "rec.proto.Operation.Command\022\017\n\007address\030\002"
    " \003(\r\022\037\n\005value\030\003 \001(\0132\020.rec.proto.Value\022\r\n"
    "\005swap1\030\004 \001(\r\022\r\n\005swap2\030\005 \001(\r\"Y\n\007Command\022\007"
    "\n\003ADD\020\001\022\n\n\006APPEND\020\002\022\t\n\005CLEAR\020\003\022\n\n\006CREATE"
    "\020\004\022\017\n\013REMOVE_LAST\020\005\022\007\n\003SET\020\006\022\010\n\004SWAP\020\007", 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/proto/Proto.proto", &protobuf_RegisterTypes);
  Value::default_instance_ = new Value();
  Operation::default_instance_ = new Operation();
  Value::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fproto_2fProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fproto_2fProto_2eproto {
  StaticDescriptorInitializer_rec_2fproto_2fProto_2eproto() {
    protobuf_AddDesc_rec_2fproto_2fProto_2eproto();
  }
} static_descriptor_initializer_rec_2fproto_2fProto_2eproto_;


// ===================================================================

const ::std::string Value::_default_string_f_;
const ::std::string Value::_default_group_f_;
const ::std::string Value::_default_message_f_;
const ::std::string Value::_default_bytes_f_;
#ifndef _MSC_VER
const int Value::kDoubleFFieldNumber;
const int Value::kFloatFFieldNumber;
const int Value::kInt64FFieldNumber;
const int Value::kUint64FFieldNumber;
const int Value::kInt32FFieldNumber;
const int Value::kFixed64FFieldNumber;
const int Value::kFixed32FFieldNumber;
const int Value::kBoolFFieldNumber;
const int Value::kStringFFieldNumber;
const int Value::kGroupFFieldNumber;
const int Value::kMessageFFieldNumber;
const int Value::kBytesFFieldNumber;
const int Value::kUint32FFieldNumber;
const int Value::kEnumFFieldNumber;
const int Value::kSfixed32FFieldNumber;
const int Value::kSfixed64FFieldNumber;
const int Value::kSint32FFieldNumber;
const int Value::kSint64FFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  double_f_ = 0;
  float_f_ = 0;
  int64_f_ = GOOGLE_LONGLONG(0);
  uint64_f_ = GOOGLE_ULONGLONG(0);
  int32_f_ = 0;
  fixed64_f_ = GOOGLE_ULONGLONG(0);
  fixed32_f_ = 0u;
  bool_f_ = false;
  string_f_ = const_cast< ::std::string*>(&_default_string_f_);
  group_f_ = const_cast< ::std::string*>(&_default_group_f_);
  message_f_ = const_cast< ::std::string*>(&_default_message_f_);
  bytes_f_ = const_cast< ::std::string*>(&_default_bytes_f_);
  uint32_f_ = 0u;
  enum_f_ = 0;
  sfixed32_f_ = 0;
  sfixed64_f_ = GOOGLE_LONGLONG(0);
  sint32_f_ = 0;
  sint64_f_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (string_f_ != &_default_string_f_) {
    delete string_f_;
  }
  if (group_f_ != &_default_group_f_) {
    delete group_f_;
  }
  if (message_f_ != &_default_message_f_) {
    delete message_f_;
  }
  if (bytes_f_ != &_default_bytes_f_) {
    delete bytes_f_;
  }
  if (this != default_instance_) {
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fproto_2fProto_2eproto();  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    double_f_ = 0;
    float_f_ = 0;
    int64_f_ = GOOGLE_LONGLONG(0);
    uint64_f_ = GOOGLE_ULONGLONG(0);
    int32_f_ = 0;
    fixed64_f_ = GOOGLE_ULONGLONG(0);
    fixed32_f_ = 0u;
    bool_f_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (string_f_ != &_default_string_f_) {
        string_f_->clear();
      }
    }
    if (_has_bit(9)) {
      if (group_f_ != &_default_group_f_) {
        group_f_->clear();
      }
    }
    if (_has_bit(10)) {
      if (message_f_ != &_default_message_f_) {
        message_f_->clear();
      }
    }
    if (_has_bit(11)) {
      if (bytes_f_ != &_default_bytes_f_) {
        bytes_f_->clear();
      }
    }
    uint32_f_ = 0u;
    enum_f_ = 0;
    sfixed32_f_ = 0;
    sfixed64_f_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sint32_f_ = 0;
    sint64_f_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double double_f = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_f_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_float_f;
        break;
      }
      
      // optional float float_f = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_f_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int64_f;
        break;
      }
      
      // optional int64 int64_f = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_f_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint64_f;
        break;
      }
      
      // optional uint64 uint64_f = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_f_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_int32_f;
        break;
      }
      
      // optional int32 int32_f = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_f_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_fixed64_f;
        break;
      }
      
      // optional fixed64 fixed64_f = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fixed64_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_f_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fixed32_f;
        break;
      }
      
      // optional fixed32 fixed32_f = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fixed32_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32_f_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bool_f;
        break;
      }
      
      // optional bool bool_f = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_f_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_string_f;
        break;
      }
      
      // optional string string_f = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_f()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_f().data(), this->string_f().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_group_f;
        break;
      }
      
      // optional bytes group_f = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_f()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_message_f;
        break;
      }
      
      // optional bytes message_f = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_f()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bytes_f;
        break;
      }
      
      // optional bytes bytes_f = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_f()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uint32_f;
        break;
      }
      
      // optional uint32 uint32_f = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_f_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_enum_f;
        break;
      }
      
      // optional int32 enum_f = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enum_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enum_f_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_sfixed32_f;
        break;
      }
      
      // optional sfixed32 sfixed32_f = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sfixed32_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sfixed32_f_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_sfixed64_f;
        break;
      }
      
      // optional sfixed64 sfixed64_f = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sfixed64_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sfixed64_f_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sint32_f;
        break;
      }
      
      // optional sint32 sint32_f = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint32_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32_f_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sint64_f;
        break;
      }
      
      // optional sint64 sint64_f = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint64_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_f_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double double_f = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->double_f(), output);
  }
  
  // optional float float_f = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_f(), output);
  }
  
  // optional int64 int64_f = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int64_f(), output);
  }
  
  // optional uint64 uint64_f = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uint64_f(), output);
  }
  
  // optional int32 int32_f = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->int32_f(), output);
  }
  
  // optional fixed64 fixed64_f = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->fixed64_f(), output);
  }
  
  // optional fixed32 fixed32_f = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->fixed32_f(), output);
  }
  
  // optional bool bool_f = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bool_f(), output);
  }
  
  // optional string string_f = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_f().data(), this->string_f().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->string_f(), output);
  }
  
  // optional bytes group_f = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->group_f(), output);
  }
  
  // optional bytes message_f = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->message_f(), output);
  }
  
  // optional bytes bytes_f = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->bytes_f(), output);
  }
  
  // optional uint32 uint32_f = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uint32_f(), output);
  }
  
  // optional int32 enum_f = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->enum_f(), output);
  }
  
  // optional sfixed32 sfixed32_f = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->sfixed32_f(), output);
  }
  
  // optional sfixed64 sfixed64_f = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->sfixed64_f(), output);
  }
  
  // optional sint32 sint32_f = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->sint32_f(), output);
  }
  
  // optional sint64 sint64_f = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->sint64_f(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double double_f = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->double_f(), target);
  }
  
  // optional float float_f = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_f(), target);
  }
  
  // optional int64 int64_f = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int64_f(), target);
  }
  
  // optional uint64 uint64_f = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uint64_f(), target);
  }
  
  // optional int32 int32_f = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->int32_f(), target);
  }
  
  // optional fixed64 fixed64_f = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->fixed64_f(), target);
  }
  
  // optional fixed32 fixed32_f = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->fixed32_f(), target);
  }
  
  // optional bool bool_f = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bool_f(), target);
  }
  
  // optional string string_f = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_f().data(), this->string_f().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string_f(), target);
  }
  
  // optional bytes group_f = 10;
  if (_has_bit(9)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->group_f(), target);
  }
  
  // optional bytes message_f = 11;
  if (_has_bit(10)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->message_f(), target);
  }
  
  // optional bytes bytes_f = 12;
  if (_has_bit(11)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->bytes_f(), target);
  }
  
  // optional uint32 uint32_f = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uint32_f(), target);
  }
  
  // optional int32 enum_f = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->enum_f(), target);
  }
  
  // optional sfixed32 sfixed32_f = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->sfixed32_f(), target);
  }
  
  // optional sfixed64 sfixed64_f = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->sfixed64_f(), target);
  }
  
  // optional sint32 sint32_f = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->sint32_f(), target);
  }
  
  // optional sint64 sint64_f = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->sint64_f(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double double_f = 1;
    if (has_double_f()) {
      total_size += 1 + 8;
    }
    
    // optional float float_f = 2;
    if (has_float_f()) {
      total_size += 1 + 4;
    }
    
    // optional int64 int64_f = 3;
    if (has_int64_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_f());
    }
    
    // optional uint64 uint64_f = 4;
    if (has_uint64_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_f());
    }
    
    // optional int32 int32_f = 5;
    if (has_int32_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_f());
    }
    
    // optional fixed64 fixed64_f = 6;
    if (has_fixed64_f()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 fixed32_f = 7;
    if (has_fixed32_f()) {
      total_size += 1 + 4;
    }
    
    // optional bool bool_f = 8;
    if (has_bool_f()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string string_f = 9;
    if (has_string_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_f());
    }
    
    // optional bytes group_f = 10;
    if (has_group_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_f());
    }
    
    // optional bytes message_f = 11;
    if (has_message_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_f());
    }
    
    // optional bytes bytes_f = 12;
    if (has_bytes_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_f());
    }
    
    // optional uint32 uint32_f = 13;
    if (has_uint32_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_f());
    }
    
    // optional int32 enum_f = 14;
    if (has_enum_f()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enum_f());
    }
    
    // optional sfixed32 sfixed32_f = 15;
    if (has_sfixed32_f()) {
      total_size += 1 + 4;
    }
    
    // optional sfixed64 sfixed64_f = 16;
    if (has_sfixed64_f()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 sint32_f = 17;
    if (has_sint32_f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32_f());
    }
    
    // optional sint64 sint64_f = 18;
    if (has_sint64_f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64_f());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_double_f(from.double_f());
    }
    if (from._has_bit(1)) {
      set_float_f(from.float_f());
    }
    if (from._has_bit(2)) {
      set_int64_f(from.int64_f());
    }
    if (from._has_bit(3)) {
      set_uint64_f(from.uint64_f());
    }
    if (from._has_bit(4)) {
      set_int32_f(from.int32_f());
    }
    if (from._has_bit(5)) {
      set_fixed64_f(from.fixed64_f());
    }
    if (from._has_bit(6)) {
      set_fixed32_f(from.fixed32_f());
    }
    if (from._has_bit(7)) {
      set_bool_f(from.bool_f());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_string_f(from.string_f());
    }
    if (from._has_bit(9)) {
      set_group_f(from.group_f());
    }
    if (from._has_bit(10)) {
      set_message_f(from.message_f());
    }
    if (from._has_bit(11)) {
      set_bytes_f(from.bytes_f());
    }
    if (from._has_bit(12)) {
      set_uint32_f(from.uint32_f());
    }
    if (from._has_bit(13)) {
      set_enum_f(from.enum_f());
    }
    if (from._has_bit(14)) {
      set_sfixed32_f(from.sfixed32_f());
    }
    if (from._has_bit(15)) {
      set_sfixed64_f(from.sfixed64_f());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_sint32_f(from.sint32_f());
    }
    if (from._has_bit(17)) {
      set_sint64_f(from.sint64_f());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(double_f_, other->double_f_);
    std::swap(float_f_, other->float_f_);
    std::swap(int64_f_, other->int64_f_);
    std::swap(uint64_f_, other->uint64_f_);
    std::swap(int32_f_, other->int32_f_);
    std::swap(fixed64_f_, other->fixed64_f_);
    std::swap(fixed32_f_, other->fixed32_f_);
    std::swap(bool_f_, other->bool_f_);
    std::swap(string_f_, other->string_f_);
    std::swap(group_f_, other->group_f_);
    std::swap(message_f_, other->message_f_);
    std::swap(bytes_f_, other->bytes_f_);
    std::swap(uint32_f_, other->uint32_f_);
    std::swap(enum_f_, other->enum_f_);
    std::swap(sfixed32_f_, other->sfixed32_f_);
    std::swap(sfixed64_f_, other->sfixed64_f_);
    std::swap(sint32_f_, other->sint32_f_);
    std::swap(sint64_f_, other->sint64_f_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operation_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_Command_descriptor_;
}
bool Operation_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_Command Operation::ADD;
const Operation_Command Operation::APPEND;
const Operation_Command Operation::CLEAR;
const Operation_Command Operation::CREATE;
const Operation_Command Operation::REMOVE_LAST;
const Operation_Command Operation::SET;
const Operation_Command Operation::SWAP;
const Operation_Command Operation::Command_MIN;
const Operation_Command Operation::Command_MAX;
const int Operation::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operation::kCommandFieldNumber;
const int Operation::kAddressFieldNumber;
const int Operation::kValueFieldNumber;
const int Operation::kSwap1FieldNumber;
const int Operation::kSwap2FieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  value_ = const_cast< ::rec::proto::Value*>(&::rec::proto::Value::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  command_ = 1;
  value_ = NULL;
  swap1_ = 0u;
  swap2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fproto_2fProto_2eproto();  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 1;
    if (_has_bit(2)) {
      if (value_ != NULL) value_->::rec::proto::Value::Clear();
    }
    swap1_ = 0u;
    swap2_ = 0u;
  }
  address_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.proto.Operation.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::proto::Operation_Command_IsValid(value)) {
            set_command(static_cast< ::rec::proto::Operation_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address;
        break;
      }
      
      // repeated uint32 address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_address())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address;
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional .rec.proto.Value value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_swap1;
        break;
      }
      
      // optional uint32 swap1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap1_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_swap2;
        break;
      }
      
      // optional uint32 swap2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swap2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap2_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.proto.Operation.Command command = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }
  
  // repeated uint32 address = 2;
  for (int i = 0; i < this->address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->address(i), output);
  }
  
  // optional .rec.proto.Value value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }
  
  // optional uint32 swap1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->swap1(), output);
  }
  
  // optional uint32 swap2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->swap2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.proto.Operation.Command command = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }
  
  // repeated uint32 address = 2;
  for (int i = 0; i < this->address_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->address(i), target);
  }
  
  // optional .rec.proto.Value value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }
  
  // optional uint32 swap1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->swap1(), target);
  }
  
  // optional uint32 swap2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->swap2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.proto.Operation.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }
    
    // optional .rec.proto.Value value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // optional uint32 swap1 = 4;
    if (has_swap1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap1());
    }
    
    // optional uint32 swap2 = 5;
    if (has_swap2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap2());
    }
    
  }
  // repeated uint32 address = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address(i));
    }
    total_size += 1 * this->address_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_.MergeFrom(from.address_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_command(from.command());
    }
    if (from._has_bit(2)) {
      mutable_value()->::rec::proto::Value::MergeFrom(from.value());
    }
    if (from._has_bit(3)) {
      set_swap1(from.swap1());
    }
    if (from._has_bit(4)) {
      set_swap2(from.swap2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  
  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    address_.Swap(&other->address_);
    std::swap(value_, other->value_);
    std::swap(swap1_, other->swap1_);
    std::swap(swap2_, other->swap2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rec

// @@protoc_insertion_point(global_scope)
