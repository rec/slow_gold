// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/proto/TestData.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace proto {
namespace test {

namespace {

const ::google::protobuf::Descriptor* TestData1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData1_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestData2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData2_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestData3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData3_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fproto_2fTestData_2eproto() {
  protobuf_AddDesc_rec_2fproto_2fTestData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/proto/TestData.proto");
  GOOGLE_CHECK(file != NULL);
  TestData1_descriptor_ = file->message_type(0);
  static const int TestData1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData1, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData1, test_string_),
  };
  TestData1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestData1_descriptor_,
      TestData1::default_instance_,
      TestData1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestData1));
  TestData2_descriptor_ = file->message_type(1);
  static const int TestData2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData2, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData2, test_sint_),
  };
  TestData2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestData2_descriptor_,
      TestData2::default_instance_,
      TestData2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestData2));
  TestData3_descriptor_ = file->message_type(2);
  static const int TestData3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData3, test_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData3, test2_),
  };
  TestData3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestData3_descriptor_,
      TestData3::default_instance_,
      TestData3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestData3));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fproto_2fTestData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestData1_descriptor_, &TestData1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestData2_descriptor_, &TestData2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestData3_descriptor_, &TestData3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fproto_2fTestData_2eproto() {
  delete TestData1::default_instance_;
  delete TestData1_reflection_;
  delete TestData2::default_instance_;
  delete TestData2_reflection_;
  delete TestData3::default_instance_;
  delete TestData3_reflection_;
}

void protobuf_AddDesc_rec_2fproto_2fTestData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030rec/proto/TestData.proto\022\016rec.proto.te"
    "st\".\n\tTestData1\022\014\n\004test\030\001 \003(\r\022\023\n\013test_st"
    "ring\030\002 \001(\t\"H\n\tTestData2\022(\n\005test1\030\005 \003(\0132\031"
    ".rec.proto.test.TestData1\022\021\n\ttest_sint\030\006"
    " \001(\021\"J\n\tTestData3\022\023\n\013test_double\030\007 \001(\001\022("
    "\n\005test2\030\010 \001(\0132\031.rec.proto.test.TestData2", 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/proto/TestData.proto", &protobuf_RegisterTypes);
  TestData1::default_instance_ = new TestData1();
  TestData2::default_instance_ = new TestData2();
  TestData3::default_instance_ = new TestData3();
  TestData1::default_instance_->InitAsDefaultInstance();
  TestData2::default_instance_->InitAsDefaultInstance();
  TestData3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fproto_2fTestData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fproto_2fTestData_2eproto {
  StaticDescriptorInitializer_rec_2fproto_2fTestData_2eproto() {
    protobuf_AddDesc_rec_2fproto_2fTestData_2eproto();
  }
} static_descriptor_initializer_rec_2fproto_2fTestData_2eproto_;


// ===================================================================

const ::std::string TestData1::_default_test_string_;
#ifndef _MSC_VER
const int TestData1::kTestFieldNumber;
const int TestData1::kTestStringFieldNumber;
#endif  // !_MSC_VER

TestData1::TestData1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestData1::InitAsDefaultInstance() {
}

TestData1::TestData1(const TestData1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestData1::SharedCtor() {
  _cached_size_ = 0;
  test_string_ = const_cast< ::std::string*>(&_default_test_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestData1::~TestData1() {
  SharedDtor();
}

void TestData1::SharedDtor() {
  if (test_string_ != &_default_test_string_) {
    delete test_string_;
  }
  if (this != default_instance_) {
  }
}

void TestData1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData1_descriptor_;
}

const TestData1& TestData1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fproto_2fTestData_2eproto();  return *default_instance_;
}

TestData1* TestData1::default_instance_ = NULL;

TestData1* TestData1::New() const {
  return new TestData1;
}

void TestData1::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (test_string_ != &_default_test_string_) {
        test_string_->clear();
      }
    }
  }
  test_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestData1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_test())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_test())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_test;
        if (input->ExpectTag(18)) goto parse_test_string;
        break;
      }
      
      // optional string test_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_string().data(), this->test_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestData1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->test(i), output);
  }
  
  // optional string test_string = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_string().data(), this->test_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestData1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->test(i), target);
  }
  
  // optional string test_string = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_string().data(), this->test_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->test_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestData1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string test_string = 2;
    if (has_test_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_string());
    }
    
  }
  // repeated uint32 test = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->test(i));
    }
    total_size += 1 * this->test_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestData1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestData1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestData1::MergeFrom(const TestData1& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_.MergeFrom(from.test_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_test_string(from.test_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestData1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData1::CopyFrom(const TestData1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData1::IsInitialized() const {
  
  return true;
}

void TestData1::Swap(TestData1* other) {
  if (other != this) {
    test_.Swap(&other->test_);
    std::swap(test_string_, other->test_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestData1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData1_descriptor_;
  metadata.reflection = TestData1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestData2::kTest1FieldNumber;
const int TestData2::kTestSintFieldNumber;
#endif  // !_MSC_VER

TestData2::TestData2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestData2::InitAsDefaultInstance() {
}

TestData2::TestData2(const TestData2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestData2::SharedCtor() {
  _cached_size_ = 0;
  test_sint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestData2::~TestData2() {
  SharedDtor();
}

void TestData2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestData2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData2_descriptor_;
}

const TestData2& TestData2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fproto_2fTestData_2eproto();  return *default_instance_;
}

TestData2* TestData2::default_instance_ = NULL;

TestData2* TestData2::New() const {
  return new TestData2;
}

void TestData2::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    test_sint_ = 0;
  }
  test1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestData2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.proto.test.TestData1 test1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_test1;
        if (input->ExpectTag(48)) goto parse_test_sint;
        break;
      }
      
      // optional sint32 test_sint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_sint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &test_sint_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestData2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.proto.test.TestData1 test1 = 5;
  for (int i = 0; i < this->test1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->test1(i), output);
  }
  
  // optional sint32 test_sint = 6;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->test_sint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestData2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.proto.test.TestData1 test1 = 5;
  for (int i = 0; i < this->test1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->test1(i), target);
  }
  
  // optional sint32 test_sint = 6;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->test_sint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestData2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 test_sint = 6;
    if (has_test_sint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->test_sint());
    }
    
  }
  // repeated .rec.proto.test.TestData1 test1 = 5;
  total_size += 1 * this->test1_size();
  for (int i = 0; i < this->test1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test1(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestData2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestData2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestData2::MergeFrom(const TestData2& from) {
  GOOGLE_CHECK_NE(&from, this);
  test1_.MergeFrom(from.test1_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_test_sint(from.test_sint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestData2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData2::CopyFrom(const TestData2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData2::IsInitialized() const {
  
  return true;
}

void TestData2::Swap(TestData2* other) {
  if (other != this) {
    test1_.Swap(&other->test1_);
    std::swap(test_sint_, other->test_sint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestData2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData2_descriptor_;
  metadata.reflection = TestData2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestData3::kTestDoubleFieldNumber;
const int TestData3::kTest2FieldNumber;
#endif  // !_MSC_VER

TestData3::TestData3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestData3::InitAsDefaultInstance() {
  test2_ = const_cast< ::rec::proto::test::TestData2*>(&::rec::proto::test::TestData2::default_instance());
}

TestData3::TestData3(const TestData3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestData3::SharedCtor() {
  _cached_size_ = 0;
  test_double_ = 0;
  test2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestData3::~TestData3() {
  SharedDtor();
}

void TestData3::SharedDtor() {
  if (this != default_instance_) {
    delete test2_;
  }
}

void TestData3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData3_descriptor_;
}

const TestData3& TestData3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fproto_2fTestData_2eproto();  return *default_instance_;
}

TestData3* TestData3::default_instance_ = NULL;

TestData3* TestData3::New() const {
  return new TestData3;
}

void TestData3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_double_ = 0;
    if (_has_bit(1)) {
      if (test2_ != NULL) test2_->::rec::proto::test::TestData2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestData3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test_double = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_double_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_test2;
        break;
      }
      
      // optional .rec.proto.test.TestData2 test2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestData3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test_double = 7;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->test_double(), output);
  }
  
  // optional .rec.proto.test.TestData2 test2 = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->test2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestData3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test_double = 7;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->test_double(), target);
  }
  
  // optional .rec.proto.test.TestData2 test2 = 8;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->test2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestData3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test_double = 7;
    if (has_test_double()) {
      total_size += 1 + 8;
    }
    
    // optional .rec.proto.test.TestData2 test2 = 8;
    if (has_test2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestData3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestData3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestData3::MergeFrom(const TestData3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_test_double(from.test_double());
    }
    if (from._has_bit(1)) {
      mutable_test2()->::rec::proto::test::TestData2::MergeFrom(from.test2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestData3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData3::CopyFrom(const TestData3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestData3::IsInitialized() const {
  
  return true;
}

void TestData3::Swap(TestData3* other) {
  if (other != this) {
    std::swap(test_double_, other->test_double_);
    std::swap(test2_, other->test2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestData3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData3_descriptor_;
  metadata.reflection = TestData3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace proto
}  // namespace rec

// @@protoc_insertion_point(global_scope)
