// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/proto/Proto.proto

#ifndef PROTOBUF_rec_2fproto_2fProto_2eproto__INCLUDED
#define PROTOBUF_rec_2fproto_2fProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fproto_2fProto_2eproto();
void protobuf_AssignDesc_rec_2fproto_2fProto_2eproto();
void protobuf_ShutdownFile_rec_2fproto_2fProto_2eproto();

class Value;
class Operation;

enum Operation_Command {
  Operation_Command_CLEAR = 1,
  Operation_Command_SET = 2,
  Operation_Command_APPEND = 3,
  Operation_Command_REMOVE_LAST = 4,
  Operation_Command_SWAP = 5
};
bool Operation_Command_IsValid(int value);
const Operation_Command Operation_Command_Command_MIN = Operation_Command_CLEAR;
const Operation_Command Operation_Command_Command_MAX = Operation_Command_SWAP;
const int Operation_Command_Command_ARRAYSIZE = Operation_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Command_descriptor();
inline const ::std::string& Operation_Command_Name(Operation_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Command_descriptor(), value);
}
inline bool Operation_Command_Parse(
    const ::std::string& name, Operation_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Command>(
    Operation_Command_descriptor(), name, value);
}
// ===================================================================

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();
  
  Value(const Value& from);
  
  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();
  
  void Swap(Value* other);
  
  // implements Message ----------------------------------------------
  
  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double double_f = 1;
  inline bool has_double_f() const;
  inline void clear_double_f();
  static const int kDoubleFFieldNumber = 1;
  inline double double_f() const;
  inline void set_double_f(double value);
  
  // optional float float_f = 2;
  inline bool has_float_f() const;
  inline void clear_float_f();
  static const int kFloatFFieldNumber = 2;
  inline float float_f() const;
  inline void set_float_f(float value);
  
  // optional int64 int64_f = 3;
  inline bool has_int64_f() const;
  inline void clear_int64_f();
  static const int kInt64FFieldNumber = 3;
  inline ::google::protobuf::int64 int64_f() const;
  inline void set_int64_f(::google::protobuf::int64 value);
  
  // optional uint64 uint64_f = 4;
  inline bool has_uint64_f() const;
  inline void clear_uint64_f();
  static const int kUint64FFieldNumber = 4;
  inline ::google::protobuf::uint64 uint64_f() const;
  inline void set_uint64_f(::google::protobuf::uint64 value);
  
  // optional int32 int32_f = 5;
  inline bool has_int32_f() const;
  inline void clear_int32_f();
  static const int kInt32FFieldNumber = 5;
  inline ::google::protobuf::int32 int32_f() const;
  inline void set_int32_f(::google::protobuf::int32 value);
  
  // optional fixed64 fixed64_f = 6;
  inline bool has_fixed64_f() const;
  inline void clear_fixed64_f();
  static const int kFixed64FFieldNumber = 6;
  inline ::google::protobuf::uint64 fixed64_f() const;
  inline void set_fixed64_f(::google::protobuf::uint64 value);
  
  // optional fixed32 fixed32_f = 7;
  inline bool has_fixed32_f() const;
  inline void clear_fixed32_f();
  static const int kFixed32FFieldNumber = 7;
  inline ::google::protobuf::uint32 fixed32_f() const;
  inline void set_fixed32_f(::google::protobuf::uint32 value);
  
  // optional bool bool_f = 8;
  inline bool has_bool_f() const;
  inline void clear_bool_f();
  static const int kBoolFFieldNumber = 8;
  inline bool bool_f() const;
  inline void set_bool_f(bool value);
  
  // optional string string_f = 9;
  inline bool has_string_f() const;
  inline void clear_string_f();
  static const int kStringFFieldNumber = 9;
  inline const ::std::string& string_f() const;
  inline void set_string_f(const ::std::string& value);
  inline void set_string_f(const char* value);
  inline void set_string_f(const char* value, size_t size);
  inline ::std::string* mutable_string_f();
  
  // optional bytes group_f = 10;
  inline bool has_group_f() const;
  inline void clear_group_f();
  static const int kGroupFFieldNumber = 10;
  inline const ::std::string& group_f() const;
  inline void set_group_f(const ::std::string& value);
  inline void set_group_f(const char* value);
  inline void set_group_f(const void* value, size_t size);
  inline ::std::string* mutable_group_f();
  
  // optional bytes message_f = 11;
  inline bool has_message_f() const;
  inline void clear_message_f();
  static const int kMessageFFieldNumber = 11;
  inline const ::std::string& message_f() const;
  inline void set_message_f(const ::std::string& value);
  inline void set_message_f(const char* value);
  inline void set_message_f(const void* value, size_t size);
  inline ::std::string* mutable_message_f();
  
  // optional bytes bytes_f = 12;
  inline bool has_bytes_f() const;
  inline void clear_bytes_f();
  static const int kBytesFFieldNumber = 12;
  inline const ::std::string& bytes_f() const;
  inline void set_bytes_f(const ::std::string& value);
  inline void set_bytes_f(const char* value);
  inline void set_bytes_f(const void* value, size_t size);
  inline ::std::string* mutable_bytes_f();
  
  // optional uint32 uint32_f = 13;
  inline bool has_uint32_f() const;
  inline void clear_uint32_f();
  static const int kUint32FFieldNumber = 13;
  inline ::google::protobuf::uint32 uint32_f() const;
  inline void set_uint32_f(::google::protobuf::uint32 value);
  
  // optional int32 enum_f = 14;
  inline bool has_enum_f() const;
  inline void clear_enum_f();
  static const int kEnumFFieldNumber = 14;
  inline ::google::protobuf::int32 enum_f() const;
  inline void set_enum_f(::google::protobuf::int32 value);
  
  // optional sfixed32 sfixed32_f = 15;
  inline bool has_sfixed32_f() const;
  inline void clear_sfixed32_f();
  static const int kSfixed32FFieldNumber = 15;
  inline ::google::protobuf::int32 sfixed32_f() const;
  inline void set_sfixed32_f(::google::protobuf::int32 value);
  
  // optional sfixed64 sfixed64_f = 16;
  inline bool has_sfixed64_f() const;
  inline void clear_sfixed64_f();
  static const int kSfixed64FFieldNumber = 16;
  inline ::google::protobuf::int64 sfixed64_f() const;
  inline void set_sfixed64_f(::google::protobuf::int64 value);
  
  // optional sint32 sint32_f = 17;
  inline bool has_sint32_f() const;
  inline void clear_sint32_f();
  static const int kSint32FFieldNumber = 17;
  inline ::google::protobuf::int32 sint32_f() const;
  inline void set_sint32_f(::google::protobuf::int32 value);
  
  // optional sint64 sint64_f = 18;
  inline bool has_sint64_f() const;
  inline void clear_sint64_f();
  static const int kSint64FFieldNumber = 18;
  inline ::google::protobuf::int64 sint64_f() const;
  inline void set_sint64_f(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:rec.proto.Value)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double double_f_;
  float float_f_;
  ::google::protobuf::int64 int64_f_;
  ::google::protobuf::uint64 uint64_f_;
  ::google::protobuf::int32 int32_f_;
  ::google::protobuf::uint64 fixed64_f_;
  ::google::protobuf::uint32 fixed32_f_;
  bool bool_f_;
  ::std::string* string_f_;
  static const ::std::string _default_string_f_;
  ::std::string* group_f_;
  static const ::std::string _default_group_f_;
  ::std::string* message_f_;
  static const ::std::string _default_message_f_;
  ::std::string* bytes_f_;
  static const ::std::string _default_bytes_f_;
  ::google::protobuf::uint32 uint32_f_;
  ::google::protobuf::int32 enum_f_;
  ::google::protobuf::int32 sfixed32_f_;
  ::google::protobuf::int64 sfixed64_f_;
  ::google::protobuf::int32 sint32_f_;
  ::google::protobuf::int64 sint64_f_;
  friend void  protobuf_AddDesc_rec_2fproto_2fProto_2eproto();
  friend void protobuf_AssignDesc_rec_2fproto_2fProto_2eproto();
  friend void protobuf_ShutdownFile_rec_2fproto_2fProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();
  
  Operation(const Operation& from);
  
  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();
  
  void Swap(Operation* other);
  
  // implements Message ----------------------------------------------
  
  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Operation_Command Command;
  static const Command CLEAR = Operation_Command_CLEAR;
  static const Command SET = Operation_Command_SET;
  static const Command APPEND = Operation_Command_APPEND;
  static const Command REMOVE_LAST = Operation_Command_REMOVE_LAST;
  static const Command SWAP = Operation_Command_SWAP;
  static inline bool Command_IsValid(int value) {
    return Operation_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Operation_Command_Command_MIN;
  static const Command Command_MAX =
    Operation_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Operation_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Operation_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Operation_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Operation_Command_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.proto.Operation.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::rec::proto::Operation_Command command() const;
  inline void set_command(::rec::proto::Operation_Command value);
  
  // repeated uint32 address = 2;
  inline int address_size() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline ::google::protobuf::uint32 address(int index) const;
  inline void set_address(int index, ::google::protobuf::uint32 value);
  inline void add_address(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address();
  
  // repeated .rec.proto.Value value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::rec::proto::Value& value(int index) const;
  inline ::rec::proto::Value* mutable_value(int index);
  inline ::rec::proto::Value* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::proto::Value >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::proto::Value >*
      mutable_value();
  
  // optional uint32 remove = 4;
  inline bool has_remove() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 4;
  inline ::google::protobuf::uint32 remove() const;
  inline void set_remove(::google::protobuf::uint32 value);
  
  // optional uint32 swap1 = 5;
  inline bool has_swap1() const;
  inline void clear_swap1();
  static const int kSwap1FieldNumber = 5;
  inline ::google::protobuf::uint32 swap1() const;
  inline void set_swap1(::google::protobuf::uint32 value);
  
  // optional uint32 swap2 = 6;
  inline bool has_swap2() const;
  inline void clear_swap2();
  static const int kSwap2FieldNumber = 6;
  inline ::google::protobuf::uint32 swap2() const;
  inline void set_swap2(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.proto.Operation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int command_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_;
  ::google::protobuf::RepeatedPtrField< ::rec::proto::Value > value_;
  ::google::protobuf::uint32 remove_;
  ::google::protobuf::uint32 swap1_;
  ::google::protobuf::uint32 swap2_;
  friend void  protobuf_AddDesc_rec_2fproto_2fProto_2eproto();
  friend void protobuf_AssignDesc_rec_2fproto_2fProto_2eproto();
  friend void protobuf_ShutdownFile_rec_2fproto_2fProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// ===================================================================


// ===================================================================

// Value

// optional double double_f = 1;
inline bool Value::has_double_f() const {
  return _has_bit(0);
}
inline void Value::clear_double_f() {
  double_f_ = 0;
  _clear_bit(0);
}
inline double Value::double_f() const {
  return double_f_;
}
inline void Value::set_double_f(double value) {
  _set_bit(0);
  double_f_ = value;
}

// optional float float_f = 2;
inline bool Value::has_float_f() const {
  return _has_bit(1);
}
inline void Value::clear_float_f() {
  float_f_ = 0;
  _clear_bit(1);
}
inline float Value::float_f() const {
  return float_f_;
}
inline void Value::set_float_f(float value) {
  _set_bit(1);
  float_f_ = value;
}

// optional int64 int64_f = 3;
inline bool Value::has_int64_f() const {
  return _has_bit(2);
}
inline void Value::clear_int64_f() {
  int64_f_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Value::int64_f() const {
  return int64_f_;
}
inline void Value::set_int64_f(::google::protobuf::int64 value) {
  _set_bit(2);
  int64_f_ = value;
}

// optional uint64 uint64_f = 4;
inline bool Value::has_uint64_f() const {
  return _has_bit(3);
}
inline void Value::clear_uint64_f() {
  uint64_f_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 Value::uint64_f() const {
  return uint64_f_;
}
inline void Value::set_uint64_f(::google::protobuf::uint64 value) {
  _set_bit(3);
  uint64_f_ = value;
}

// optional int32 int32_f = 5;
inline bool Value::has_int32_f() const {
  return _has_bit(4);
}
inline void Value::clear_int32_f() {
  int32_f_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Value::int32_f() const {
  return int32_f_;
}
inline void Value::set_int32_f(::google::protobuf::int32 value) {
  _set_bit(4);
  int32_f_ = value;
}

// optional fixed64 fixed64_f = 6;
inline bool Value::has_fixed64_f() const {
  return _has_bit(5);
}
inline void Value::clear_fixed64_f() {
  fixed64_f_ = GOOGLE_ULONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::uint64 Value::fixed64_f() const {
  return fixed64_f_;
}
inline void Value::set_fixed64_f(::google::protobuf::uint64 value) {
  _set_bit(5);
  fixed64_f_ = value;
}

// optional fixed32 fixed32_f = 7;
inline bool Value::has_fixed32_f() const {
  return _has_bit(6);
}
inline void Value::clear_fixed32_f() {
  fixed32_f_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 Value::fixed32_f() const {
  return fixed32_f_;
}
inline void Value::set_fixed32_f(::google::protobuf::uint32 value) {
  _set_bit(6);
  fixed32_f_ = value;
}

// optional bool bool_f = 8;
inline bool Value::has_bool_f() const {
  return _has_bit(7);
}
inline void Value::clear_bool_f() {
  bool_f_ = false;
  _clear_bit(7);
}
inline bool Value::bool_f() const {
  return bool_f_;
}
inline void Value::set_bool_f(bool value) {
  _set_bit(7);
  bool_f_ = value;
}

// optional string string_f = 9;
inline bool Value::has_string_f() const {
  return _has_bit(8);
}
inline void Value::clear_string_f() {
  if (string_f_ != &_default_string_f_) {
    string_f_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& Value::string_f() const {
  return *string_f_;
}
inline void Value::set_string_f(const ::std::string& value) {
  _set_bit(8);
  if (string_f_ == &_default_string_f_) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(value);
}
inline void Value::set_string_f(const char* value) {
  _set_bit(8);
  if (string_f_ == &_default_string_f_) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(value);
}
inline void Value::set_string_f(const char* value, size_t size) {
  _set_bit(8);
  if (string_f_ == &_default_string_f_) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_string_f() {
  _set_bit(8);
  if (string_f_ == &_default_string_f_) {
    string_f_ = new ::std::string;
  }
  return string_f_;
}

// optional bytes group_f = 10;
inline bool Value::has_group_f() const {
  return _has_bit(9);
}
inline void Value::clear_group_f() {
  if (group_f_ != &_default_group_f_) {
    group_f_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& Value::group_f() const {
  return *group_f_;
}
inline void Value::set_group_f(const ::std::string& value) {
  _set_bit(9);
  if (group_f_ == &_default_group_f_) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(value);
}
inline void Value::set_group_f(const char* value) {
  _set_bit(9);
  if (group_f_ == &_default_group_f_) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(value);
}
inline void Value::set_group_f(const void* value, size_t size) {
  _set_bit(9);
  if (group_f_ == &_default_group_f_) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_group_f() {
  _set_bit(9);
  if (group_f_ == &_default_group_f_) {
    group_f_ = new ::std::string;
  }
  return group_f_;
}

// optional bytes message_f = 11;
inline bool Value::has_message_f() const {
  return _has_bit(10);
}
inline void Value::clear_message_f() {
  if (message_f_ != &_default_message_f_) {
    message_f_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& Value::message_f() const {
  return *message_f_;
}
inline void Value::set_message_f(const ::std::string& value) {
  _set_bit(10);
  if (message_f_ == &_default_message_f_) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(value);
}
inline void Value::set_message_f(const char* value) {
  _set_bit(10);
  if (message_f_ == &_default_message_f_) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(value);
}
inline void Value::set_message_f(const void* value, size_t size) {
  _set_bit(10);
  if (message_f_ == &_default_message_f_) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_message_f() {
  _set_bit(10);
  if (message_f_ == &_default_message_f_) {
    message_f_ = new ::std::string;
  }
  return message_f_;
}

// optional bytes bytes_f = 12;
inline bool Value::has_bytes_f() const {
  return _has_bit(11);
}
inline void Value::clear_bytes_f() {
  if (bytes_f_ != &_default_bytes_f_) {
    bytes_f_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& Value::bytes_f() const {
  return *bytes_f_;
}
inline void Value::set_bytes_f(const ::std::string& value) {
  _set_bit(11);
  if (bytes_f_ == &_default_bytes_f_) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(value);
}
inline void Value::set_bytes_f(const char* value) {
  _set_bit(11);
  if (bytes_f_ == &_default_bytes_f_) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(value);
}
inline void Value::set_bytes_f(const void* value, size_t size) {
  _set_bit(11);
  if (bytes_f_ == &_default_bytes_f_) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_bytes_f() {
  _set_bit(11);
  if (bytes_f_ == &_default_bytes_f_) {
    bytes_f_ = new ::std::string;
  }
  return bytes_f_;
}

// optional uint32 uint32_f = 13;
inline bool Value::has_uint32_f() const {
  return _has_bit(12);
}
inline void Value::clear_uint32_f() {
  uint32_f_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 Value::uint32_f() const {
  return uint32_f_;
}
inline void Value::set_uint32_f(::google::protobuf::uint32 value) {
  _set_bit(12);
  uint32_f_ = value;
}

// optional int32 enum_f = 14;
inline bool Value::has_enum_f() const {
  return _has_bit(13);
}
inline void Value::clear_enum_f() {
  enum_f_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 Value::enum_f() const {
  return enum_f_;
}
inline void Value::set_enum_f(::google::protobuf::int32 value) {
  _set_bit(13);
  enum_f_ = value;
}

// optional sfixed32 sfixed32_f = 15;
inline bool Value::has_sfixed32_f() const {
  return _has_bit(14);
}
inline void Value::clear_sfixed32_f() {
  sfixed32_f_ = 0;
  _clear_bit(14);
}
inline ::google::protobuf::int32 Value::sfixed32_f() const {
  return sfixed32_f_;
}
inline void Value::set_sfixed32_f(::google::protobuf::int32 value) {
  _set_bit(14);
  sfixed32_f_ = value;
}

// optional sfixed64 sfixed64_f = 16;
inline bool Value::has_sfixed64_f() const {
  return _has_bit(15);
}
inline void Value::clear_sfixed64_f() {
  sfixed64_f_ = GOOGLE_LONGLONG(0);
  _clear_bit(15);
}
inline ::google::protobuf::int64 Value::sfixed64_f() const {
  return sfixed64_f_;
}
inline void Value::set_sfixed64_f(::google::protobuf::int64 value) {
  _set_bit(15);
  sfixed64_f_ = value;
}

// optional sint32 sint32_f = 17;
inline bool Value::has_sint32_f() const {
  return _has_bit(16);
}
inline void Value::clear_sint32_f() {
  sint32_f_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 Value::sint32_f() const {
  return sint32_f_;
}
inline void Value::set_sint32_f(::google::protobuf::int32 value) {
  _set_bit(16);
  sint32_f_ = value;
}

// optional sint64 sint64_f = 18;
inline bool Value::has_sint64_f() const {
  return _has_bit(17);
}
inline void Value::clear_sint64_f() {
  sint64_f_ = GOOGLE_LONGLONG(0);
  _clear_bit(17);
}
inline ::google::protobuf::int64 Value::sint64_f() const {
  return sint64_f_;
}
inline void Value::set_sint64_f(::google::protobuf::int64 value) {
  _set_bit(17);
  sint64_f_ = value;
}

// -------------------------------------------------------------------

// Operation

// optional .rec.proto.Operation.Command command = 1;
inline bool Operation::has_command() const {
  return _has_bit(0);
}
inline void Operation::clear_command() {
  command_ = 1;
  _clear_bit(0);
}
inline ::rec::proto::Operation_Command Operation::command() const {
  return static_cast< ::rec::proto::Operation_Command >(command_);
}
inline void Operation::set_command(::rec::proto::Operation_Command value) {
  GOOGLE_DCHECK(::rec::proto::Operation_Command_IsValid(value));
  _set_bit(0);
  command_ = value;
}

// repeated uint32 address = 2;
inline int Operation::address_size() const {
  return address_.size();
}
inline void Operation::clear_address() {
  address_.Clear();
}
inline ::google::protobuf::uint32 Operation::address(int index) const {
  return address_.Get(index);
}
inline void Operation::set_address(int index, ::google::protobuf::uint32 value) {
  address_.Set(index, value);
}
inline void Operation::add_address(::google::protobuf::uint32 value) {
  address_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Operation::address() const {
  return address_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Operation::mutable_address() {
  return &address_;
}

// repeated .rec.proto.Value value = 3;
inline int Operation::value_size() const {
  return value_.size();
}
inline void Operation::clear_value() {
  value_.Clear();
}
inline const ::rec::proto::Value& Operation::value(int index) const {
  return value_.Get(index);
}
inline ::rec::proto::Value* Operation::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::rec::proto::Value* Operation::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::proto::Value >&
Operation::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::proto::Value >*
Operation::mutable_value() {
  return &value_;
}

// optional uint32 remove = 4;
inline bool Operation::has_remove() const {
  return _has_bit(3);
}
inline void Operation::clear_remove() {
  remove_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Operation::remove() const {
  return remove_;
}
inline void Operation::set_remove(::google::protobuf::uint32 value) {
  _set_bit(3);
  remove_ = value;
}

// optional uint32 swap1 = 5;
inline bool Operation::has_swap1() const {
  return _has_bit(4);
}
inline void Operation::clear_swap1() {
  swap1_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Operation::swap1() const {
  return swap1_;
}
inline void Operation::set_swap1(::google::protobuf::uint32 value) {
  _set_bit(4);
  swap1_ = value;
}

// optional uint32 swap2 = 6;
inline bool Operation::has_swap2() const {
  return _has_bit(5);
}
inline void Operation::clear_swap2() {
  swap2_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Operation::swap2() const {
  return swap2_;
}
inline void Operation::set_swap2(::google::protobuf::uint32 value) {
  _set_bit(5);
  swap2_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::proto::Operation_Command>() {
  return ::rec::proto::Operation_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fproto_2fProto_2eproto__INCLUDED
