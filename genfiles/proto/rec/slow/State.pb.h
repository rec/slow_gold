// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/State.proto

#ifndef PROTOBUF_rec_2fslow_2fState_2eproto__INCLUDED
#define PROTOBUF_rec_2fslow_2fState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/gui/RecentFiles.pb.h"
#include "rec/gui/Appearance.pb.h"
#include "rec/access/Access.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fslow_2fState_2eproto();
void protobuf_AssignDesc_rec_2fslow_2fState_2eproto();
void protobuf_ShutdownFile_rec_2fslow_2fState_2eproto();

class State;

// ===================================================================

class State : public ::google::protobuf::Message {
 public:
  State();
  virtual ~State();
  
  State(const State& from);
  
  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();
  
  void Swap(State* other);
  
  // implements Message ----------------------------------------------
  
  State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string windows_open = 1;
  inline int windows_open_size() const;
  inline void clear_windows_open();
  static const int kWindowsOpenFieldNumber = 1;
  inline const ::std::string& windows_open(int index) const;
  inline ::std::string* mutable_windows_open(int index);
  inline void set_windows_open(int index, const ::std::string& value);
  inline void set_windows_open(int index, const char* value);
  inline void set_windows_open(int index, const char* value, size_t size);
  inline ::std::string* add_windows_open();
  inline void add_windows_open(const ::std::string& value);
  inline void add_windows_open(const char* value);
  inline void add_windows_open(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& windows_open() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_windows_open();
  
  // optional .rec.gui.Appearance appearance = 2;
  inline bool has_appearance() const;
  inline void clear_appearance();
  static const int kAppearanceFieldNumber = 2;
  inline const ::rec::gui::Appearance& appearance() const;
  inline ::rec::gui::Appearance* mutable_appearance();
  
  // optional .rec.access.Access access = 3;
  inline bool has_access() const;
  inline void clear_access();
  static const int kAccessFieldNumber = 3;
  inline const ::rec::access::Access& access() const;
  inline ::rec::access::Access* mutable_access();
  
  // optional .rec.gui.RecentFiles recent_files = 4;
  inline bool has_recent_files() const;
  inline void clear_recent_files();
  static const int kRecentFilesFieldNumber = 4;
  inline const ::rec::gui::RecentFiles& recent_files() const;
  inline ::rec::gui::RecentFiles* mutable_recent_files();
  
  // @@protoc_insertion_point(class_scope:rec.slow.State)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> windows_open_;
  ::rec::gui::Appearance* appearance_;
  ::rec::access::Access* access_;
  ::rec::gui::RecentFiles* recent_files_;
  friend void  protobuf_AddDesc_rec_2fslow_2fState_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fState_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fState_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static State* default_instance_;
};
// ===================================================================


// ===================================================================

// State

// repeated string windows_open = 1;
inline int State::windows_open_size() const {
  return windows_open_.size();
}
inline void State::clear_windows_open() {
  windows_open_.Clear();
}
inline const ::std::string& State::windows_open(int index) const {
  return windows_open_.Get(index);
}
inline ::std::string* State::mutable_windows_open(int index) {
  return windows_open_.Mutable(index);
}
inline void State::set_windows_open(int index, const ::std::string& value) {
  windows_open_.Mutable(index)->assign(value);
}
inline void State::set_windows_open(int index, const char* value) {
  windows_open_.Mutable(index)->assign(value);
}
inline void State::set_windows_open(int index, const char* value, size_t size) {
  windows_open_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* State::add_windows_open() {
  return windows_open_.Add();
}
inline void State::add_windows_open(const ::std::string& value) {
  windows_open_.Add()->assign(value);
}
inline void State::add_windows_open(const char* value) {
  windows_open_.Add()->assign(value);
}
inline void State::add_windows_open(const char* value, size_t size) {
  windows_open_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
State::windows_open() const {
  return windows_open_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
State::mutable_windows_open() {
  return &windows_open_;
}

// optional .rec.gui.Appearance appearance = 2;
inline bool State::has_appearance() const {
  return _has_bit(1);
}
inline void State::clear_appearance() {
  if (appearance_ != NULL) appearance_->::rec::gui::Appearance::Clear();
  _clear_bit(1);
}
inline const ::rec::gui::Appearance& State::appearance() const {
  return appearance_ != NULL ? *appearance_ : *default_instance_->appearance_;
}
inline ::rec::gui::Appearance* State::mutable_appearance() {
  _set_bit(1);
  if (appearance_ == NULL) appearance_ = new ::rec::gui::Appearance;
  return appearance_;
}

// optional .rec.access.Access access = 3;
inline bool State::has_access() const {
  return _has_bit(2);
}
inline void State::clear_access() {
  if (access_ != NULL) access_->::rec::access::Access::Clear();
  _clear_bit(2);
}
inline const ::rec::access::Access& State::access() const {
  return access_ != NULL ? *access_ : *default_instance_->access_;
}
inline ::rec::access::Access* State::mutable_access() {
  _set_bit(2);
  if (access_ == NULL) access_ = new ::rec::access::Access;
  return access_;
}

// optional .rec.gui.RecentFiles recent_files = 4;
inline bool State::has_recent_files() const {
  return _has_bit(3);
}
inline void State::clear_recent_files() {
  if (recent_files_ != NULL) recent_files_->::rec::gui::RecentFiles::Clear();
  _clear_bit(3);
}
inline const ::rec::gui::RecentFiles& State::recent_files() const {
  return recent_files_ != NULL ? *recent_files_ : *default_instance_->recent_files_;
}
inline ::rec::gui::RecentFiles* State::mutable_recent_files() {
  _set_bit(3);
  if (recent_files_ == NULL) recent_files_ = new ::rec::gui::RecentFiles;
  return recent_files_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fslow_2fState_2eproto__INCLUDED
