// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/commands/SlowCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/commands/SlowCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* SlowCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlowCommand_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlowCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowCommandMapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommandMapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowCommandMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommandMapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowMenuEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowMenuEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowMenus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowMenus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/commands/SlowCommand.proto");
  GOOGLE_CHECK(file != NULL);
  SlowCommand_descriptor_ = file->message_type(0);
  static const int SlowCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, command_),
  };
  SlowCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommand_descriptor_,
      SlowCommand::default_instance_,
      SlowCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommand));
  SlowCommand_Type_descriptor_ = SlowCommand_descriptor_->enum_type(0);
  SlowCommands_descriptor_ = file->message_type(1);
  static const int SlowCommands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, slow_command_),
  };
  SlowCommands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommands_descriptor_,
      SlowCommands::default_instance_,
      SlowCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommands));
  SlowCommandMapEntry_descriptor_ = file->message_type(2);
  static const int SlowCommandMapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, entry_),
  };
  SlowCommandMapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommandMapEntry_descriptor_,
      SlowCommandMapEntry::default_instance_,
      SlowCommandMapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommandMapEntry));
  SlowCommandMapProto_descriptor_ = file->message_type(3);
  static const int SlowCommandMapProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, slow_entry_),
  };
  SlowCommandMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommandMapProto_descriptor_,
      SlowCommandMapProto::default_instance_,
      SlowCommandMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommandMapProto));
  SlowMenuEntry_descriptor_ = file->message_type(4);
  static const int SlowMenuEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, submenu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, is_recent_files_menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, callout_function_),
  };
  SlowMenuEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowMenuEntry_descriptor_,
      SlowMenuEntry::default_instance_,
      SlowMenuEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenuEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowMenuEntry));
  SlowMenu_descriptor_ = file->message_type(5);
  static const int SlowMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenu, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenu, extends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenu, entry_),
  };
  SlowMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowMenu_descriptor_,
      SlowMenu::default_instance_,
      SlowMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowMenu));
  SlowMenus_descriptor_ = file->message_type(6);
  static const int SlowMenus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenus, menu_),
  };
  SlowMenus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowMenus_descriptor_,
      SlowMenus::default_instance_,
      SlowMenus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowMenus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowMenus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommand_descriptor_, &SlowCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommands_descriptor_, &SlowCommands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommandMapEntry_descriptor_, &SlowCommandMapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommandMapProto_descriptor_, &SlowCommandMapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowMenuEntry_descriptor_, &SlowMenuEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowMenu_descriptor_, &SlowMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowMenus_descriptor_, &SlowMenus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  delete SlowCommand::default_instance_;
  delete SlowCommand_reflection_;
  delete SlowCommands::default_instance_;
  delete SlowCommands_reflection_;
  delete SlowCommandMapEntry::default_instance_;
  delete SlowCommandMapEntry_reflection_;
  delete SlowCommandMapProto::default_instance_;
  delete SlowCommandMapProto_reflection_;
  delete SlowMenuEntry::default_instance_;
  delete SlowMenuEntry_reflection_;
  delete SlowMenu::default_instance_;
  delete SlowMenu_reflection_;
  delete SlowMenus::default_instance_;
  delete SlowMenus_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fmap_2fCommandMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#rec/slow/commands/SlowCommand.proto\022\010r"
    "ec.slow\032\031rec/command/Command.proto\032 rec/"
    "command/map/CommandMap.proto\"\223\023\n\013SlowCom"
    "mand\022(\n\004type\030\001 \001(\0162\032.rec.slow.SlowComman"
    "d.Type\022%\n\007command\030\002 \001(\0132\024.rec.command.Co"
    "mmand\"\262\022\n\004Type\022\010\n\004NONE\020\000\022\026\n\022ABOUT_THIS_P"
    "ROGRAM\020:\022\022\n\016ADD_LOOP_POINT\020\001\022\025\n\021AUDIO_PR"
    "EFERENCES\020\002\022\025\n\021CHECK_FOR_UPDATES\020D\022\033\n\027CL"
    "EAR_KEYBOARD_MAPPINGS\020[\022\027\n\023CLEAR_MIDI_MA"
    "PPINGS\020\\\022\017\n\013CLEAR_LOOPS\020\004\022\023\n\017CLEAR_NAVIG"
    "ATOR\020\003\022\026\n\022CLEAR_ALL_SETTINGS\020O\022!\n\035CLEAR_"
    "SETTINGS_FOR_THIS_TRACK\020P\022\031\n\025CLEAR_SAVED"
    "_FILE_DATA\020\005\022\016\n\nCLOSE_FILE\020\006\022\030\n\024COPY_ALL"
    "_LOOP_POINTS\020_\022\025\n\021DIM_VOLUME_TOGGLE\020\007\022\r\n"
    "\tEJECT_CDS\020\010\022\034\n\030EXPORT_KEYBOARD_MAPPINGS"
    "\020R\022\030\n\024EXPORT_MIDI_MAPPINGS\020S\022\023\n\017EXPORT_S"
    "ETTINGS\020K\022\034\n\030IMPORT_KEYBOARD_MAPPINGS\020T\022"
    "\030\n\024IMPORT_MIDI_MAPPINGS\020U\022\023\n\017IMPORT_SETT"
    "INGS\020L\022\031\n\025INVERT_LOOP_SELECTION\020\t\022\n\n\004JUM"
    "P\020\240\215\006\022\023\n\rJUMP_SELECTED\020\260\333\006\022\025\n\021KEYBOARD_M"
    "APPINGS\020\014\022\025\n\021LOOP_NEXT_SEGMENT\020^\022\021\n\rMIDI"
    "_MAPPINGS\020\r\022\027\n\023MODE_ADD_LOOP_POINT\020\?\022\r\n\t"
    "MODE_DRAG\020<\022\021\n\rMODE_SET_TIME\020=\022\020\n\014MODE_Z"
    "OOM_IN\020>\022\026\n\022MUTE_VOLUME_TOGGLE\020\016\022\022\n\016NUDG"
    "E_BACKWARD\020Y\022\021\n\rNUDGE_FORWARD\020Z\022\024\n\020NUDGE"
    "_BEGIN_LEFT\020\017\022\025\n\021NUDGE_BEGIN_RIGHT\020\020\022\022\n\016"
    "NUDGE_END_LEFT\020\021\022\023\n\017NUDGE_END_RIGHT\020\022\022\024\n"
    "\020NUDGE_SPEED_DOWN\020V\022\022\n\016NUDGE_SPEED_UP\020W\022"
    "\025\n\021NUDGE_VOLUME_DOWN\020\023\022\023\n\017NUDGE_VOLUME_U"
    "P\020\024\022\010\n\004OPEN\020\025\022\017\n\013OPEN_MANUAL\020A\022\026\n\022OPEN_P"
    "REVIOUS_FILE\020N\022\033\n\027OPEN_SLOWGOLD_DIRECTOR"
    "Y\020J\022\032\n\026PASTE_OVER_LOOP_POINTS\020`\022\022\n\014RECEN"
    "T_FILES\020\340\266\r\022\010\n\004REDO\020\027\022\023\n\017REQUEST_SUPPORT"
    "\020B\022\027\n\023RESET_GAIN_TO_UNITY\020\030\022\r\n\tSAVE_FILE"
    "\020E\022\027\n\023SAVE_FILE_SELECTION\020F\022\014\n\006SELECT\020\220\241"
    "\017\022\021\n\013SELECT_ONLY\020\240\357\017\022\022\n\014SET_LANGUAGE\020\320\3418"
    "\022\025\n\017SET_SAVE_FORMAT\020\360\252+\022\024\n\020SET_SAVE_AS_A"
    "IFF\020a\022\024\n\020SET_SAVE_AS_FLAC\020b\022\023\n\017SET_SAVE_"
    "AS_OGG\020c\022\023\n\017SET_SAVE_AS_WAV\020d\022\031\n\025TOGGLE_"
    "ADVANCED_MENUS\020;\022\034\n\030TOGGLE_AUTOMATIC_UPD"
    "ATES\020C\022\030\n\024TOGGLE_FOLLOW_CURSOR\020+\022\027\n\023TOGG"
    "LE_GRID_DISPLAY\020\033\022\036\n\032TOGGLE_COMMAND_BAR_"
    "AT_LEFT\0206\022\035\n\031TOGGLE_COMMAND_BAR_AT_TOP\0207"
    "\022!\n\035TOGGLE_FILE_OPEN_TREE_DISPLAY\020H\022\030\n\024T"
    "OGGLE_MODES_AT_LEFT\0208\022\027\n\023TOGGLE_MODES_AT"
    "_TOP\0209\022\035\n\031TOGGLE_PARALLEL_WAVEFORMS\020*\022\032\n"
    "\026TOGGLE_PREFADER_LEVELS\020.\022\026\n\020TOGGLE_SELE"
    "CTION\020\220\203\031\022\'\n#TOGGLE_SHOW_ABOUT_WINDOW_AT"
    "_STARTUP\020Q\022\035\n\031TOGGLE_SHOW_CURSOR_LABELS\020"
    "3\022\031\n\025TOGGLE_SHOW_HELP_PANE\0201\022\035\n\031TOGGLE_S"
    "HOW_LABELS_AT_TOP\0204\022\033\n\027TOGGLE_SHOW_MASTE"
    "R_TUNE\020M\022!\n\035TOGGLE_SHOW_SELECTION_BUTTON"
    "S\0202\022\034\n\030TOGGLE_SHOW_TIMES_AT_TOP\0205\022\030\n\024TOG"
    "GLE_SHOW_TOOLTIPS\0200\022\025\n\021TOGGLE_START_STOP"
    "\020\034\022\031\n\025TOGGLE_STRETCH_ENABLE\020\035\022\033\n\027TOGGLE_"
    "TRANSFORM_ENABLE\020X\022\032\n\026TOGGLE_WHOLE_SONG_"
    "LOOP\020\036\022\016\n\nTREE_CLOSE\020\037\022\r\n\tTREE_DOWN\020 \022\r\n"
    "\tTREE_LEFT\020!\022\r\n\tTREE_OPEN\020\"\022\016\n\nTREE_RIGH"
    "T\020#\022\013\n\007TREE_UP\020$\022\010\n\004UNDO\020%\022\016\n\010UNSELECT\020\340"
    "\230\027\022\022\n\016WHATS_NEW_PAGE\020I\022\013\n\007ZOOM_IN\020\'\022\014\n\010Z"
    "OOM_OUT\020(\022\021\n\rZOOM_OUT_FULL\020@\022\025\n\021ZOOM_TO_"
    "SELECTION\020-\022\023\n\017FIRST_FREE_TYPE\020e\022\t\n\004QUIT"
    "\020\201 \022\010\n\003DEL\020\202 \022\010\n\003CUT\020\203 \022\t\n\004COPY\020\204 \022\n\n\005PA"
    "STE\020\205 \022\017\n\nSELECT_ALL\020\206 \022\021\n\014DESELECT_ALL\020"
    "\207 \";\n\014SlowCommands\022+\n\014slow_command\030\001 \003(\013"
    "2\025.rec.slow.SlowCommand\"o\n\023SlowCommandMa"
    "pEntry\022+\n\007command\030\001 \001(\0162\032.rec.slow.SlowC"
    "ommand.Type\022+\n\005entry\030\002 \001(\0132\034.rec.command"
    ".CommandMapEntry\"H\n\023SlowCommandMapProto\022"
    "1\n\nslow_entry\030\001 \003(\0132\035.rec.slow.SlowComma"
    "ndMapEntry\"\205\001\n\rSlowMenuEntry\022+\n\007command\030"
    "\001 \003(\0162\032.rec.slow.SlowCommand.Type\022\017\n\007sub"
    "menu\030\002 \001(\t\022\034\n\024is_recent_files_menu\030\003 \001(\010"
    "\022\030\n\020callout_function\030\004 \001(\t\"r\n\010SlowMenu\022-"
    "\n\013description\030\001 \001(\0132\030.rec.command.Descri"
    "ption\022\017\n\007extends\030\002 \001(\t\022&\n\005entry\030\003 \003(\0132\027."
    "rec.slow.SlowMenuEntry\"-\n\tSlowMenus\022 \n\004m"
    "enu\030\001 \003(\0132\022.rec.slow.SlowMenu", 3109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/commands/SlowCommand.proto", &protobuf_RegisterTypes);
  SlowCommand::default_instance_ = new SlowCommand();
  SlowCommands::default_instance_ = new SlowCommands();
  SlowCommandMapEntry::default_instance_ = new SlowCommandMapEntry();
  SlowCommandMapProto::default_instance_ = new SlowCommandMapProto();
  SlowMenuEntry::default_instance_ = new SlowMenuEntry();
  SlowMenu::default_instance_ = new SlowMenu();
  SlowMenus::default_instance_ = new SlowMenus();
  SlowCommand::default_instance_->InitAsDefaultInstance();
  SlowCommands::default_instance_->InitAsDefaultInstance();
  SlowCommandMapEntry::default_instance_->InitAsDefaultInstance();
  SlowCommandMapProto::default_instance_->InitAsDefaultInstance();
  SlowMenuEntry::default_instance_->InitAsDefaultInstance();
  SlowMenu::default_instance_->InitAsDefaultInstance();
  SlowMenus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SlowCommand_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommand_Type_descriptor_;
}
bool SlowCommand_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 42:
    case 43:
    case 45:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 100000:
    case 110000:
    case 220000:
    case 250000:
    case 260000:
    case 380000:
    case 410000:
    case 710000:
    case 930000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SlowCommand_Type SlowCommand::NONE;
const SlowCommand_Type SlowCommand::ABOUT_THIS_PROGRAM;
const SlowCommand_Type SlowCommand::ADD_LOOP_POINT;
const SlowCommand_Type SlowCommand::AUDIO_PREFERENCES;
const SlowCommand_Type SlowCommand::CHECK_FOR_UPDATES;
const SlowCommand_Type SlowCommand::CLEAR_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::CLEAR_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::CLEAR_LOOPS;
const SlowCommand_Type SlowCommand::CLEAR_NAVIGATOR;
const SlowCommand_Type SlowCommand::CLEAR_ALL_SETTINGS;
const SlowCommand_Type SlowCommand::CLEAR_SETTINGS_FOR_THIS_TRACK;
const SlowCommand_Type SlowCommand::CLEAR_SAVED_FILE_DATA;
const SlowCommand_Type SlowCommand::CLOSE_FILE;
const SlowCommand_Type SlowCommand::COPY_ALL_LOOP_POINTS;
const SlowCommand_Type SlowCommand::DIM_VOLUME_TOGGLE;
const SlowCommand_Type SlowCommand::EJECT_CDS;
const SlowCommand_Type SlowCommand::EXPORT_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::EXPORT_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::EXPORT_SETTINGS;
const SlowCommand_Type SlowCommand::IMPORT_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::IMPORT_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::IMPORT_SETTINGS;
const SlowCommand_Type SlowCommand::INVERT_LOOP_SELECTION;
const SlowCommand_Type SlowCommand::JUMP;
const SlowCommand_Type SlowCommand::JUMP_SELECTED;
const SlowCommand_Type SlowCommand::KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::LOOP_NEXT_SEGMENT;
const SlowCommand_Type SlowCommand::MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::MODE_ADD_LOOP_POINT;
const SlowCommand_Type SlowCommand::MODE_DRAG;
const SlowCommand_Type SlowCommand::MODE_SET_TIME;
const SlowCommand_Type SlowCommand::MODE_ZOOM_IN;
const SlowCommand_Type SlowCommand::MUTE_VOLUME_TOGGLE;
const SlowCommand_Type SlowCommand::NUDGE_BACKWARD;
const SlowCommand_Type SlowCommand::NUDGE_FORWARD;
const SlowCommand_Type SlowCommand::NUDGE_BEGIN_LEFT;
const SlowCommand_Type SlowCommand::NUDGE_BEGIN_RIGHT;
const SlowCommand_Type SlowCommand::NUDGE_END_LEFT;
const SlowCommand_Type SlowCommand::NUDGE_END_RIGHT;
const SlowCommand_Type SlowCommand::NUDGE_SPEED_DOWN;
const SlowCommand_Type SlowCommand::NUDGE_SPEED_UP;
const SlowCommand_Type SlowCommand::NUDGE_VOLUME_DOWN;
const SlowCommand_Type SlowCommand::NUDGE_VOLUME_UP;
const SlowCommand_Type SlowCommand::OPEN;
const SlowCommand_Type SlowCommand::OPEN_MANUAL;
const SlowCommand_Type SlowCommand::OPEN_PREVIOUS_FILE;
const SlowCommand_Type SlowCommand::OPEN_SLOWGOLD_DIRECTORY;
const SlowCommand_Type SlowCommand::PASTE_OVER_LOOP_POINTS;
const SlowCommand_Type SlowCommand::RECENT_FILES;
const SlowCommand_Type SlowCommand::REDO;
const SlowCommand_Type SlowCommand::REQUEST_SUPPORT;
const SlowCommand_Type SlowCommand::RESET_GAIN_TO_UNITY;
const SlowCommand_Type SlowCommand::SAVE_FILE;
const SlowCommand_Type SlowCommand::SAVE_FILE_SELECTION;
const SlowCommand_Type SlowCommand::SELECT;
const SlowCommand_Type SlowCommand::SELECT_ONLY;
const SlowCommand_Type SlowCommand::SET_LANGUAGE;
const SlowCommand_Type SlowCommand::SET_SAVE_FORMAT;
const SlowCommand_Type SlowCommand::SET_SAVE_AS_AIFF;
const SlowCommand_Type SlowCommand::SET_SAVE_AS_FLAC;
const SlowCommand_Type SlowCommand::SET_SAVE_AS_OGG;
const SlowCommand_Type SlowCommand::SET_SAVE_AS_WAV;
const SlowCommand_Type SlowCommand::TOGGLE_ADVANCED_MENUS;
const SlowCommand_Type SlowCommand::TOGGLE_AUTOMATIC_UPDATES;
const SlowCommand_Type SlowCommand::TOGGLE_FOLLOW_CURSOR;
const SlowCommand_Type SlowCommand::TOGGLE_GRID_DISPLAY;
const SlowCommand_Type SlowCommand::TOGGLE_COMMAND_BAR_AT_LEFT;
const SlowCommand_Type SlowCommand::TOGGLE_COMMAND_BAR_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_FILE_OPEN_TREE_DISPLAY;
const SlowCommand_Type SlowCommand::TOGGLE_MODES_AT_LEFT;
const SlowCommand_Type SlowCommand::TOGGLE_MODES_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_PARALLEL_WAVEFORMS;
const SlowCommand_Type SlowCommand::TOGGLE_PREFADER_LEVELS;
const SlowCommand_Type SlowCommand::TOGGLE_SELECTION;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_CURSOR_LABELS;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_HELP_PANE;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_LABELS_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_MASTER_TUNE;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_SELECTION_BUTTONS;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_TIMES_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_TOOLTIPS;
const SlowCommand_Type SlowCommand::TOGGLE_START_STOP;
const SlowCommand_Type SlowCommand::TOGGLE_STRETCH_ENABLE;
const SlowCommand_Type SlowCommand::TOGGLE_TRANSFORM_ENABLE;
const SlowCommand_Type SlowCommand::TOGGLE_WHOLE_SONG_LOOP;
const SlowCommand_Type SlowCommand::TREE_CLOSE;
const SlowCommand_Type SlowCommand::TREE_DOWN;
const SlowCommand_Type SlowCommand::TREE_LEFT;
const SlowCommand_Type SlowCommand::TREE_OPEN;
const SlowCommand_Type SlowCommand::TREE_RIGHT;
const SlowCommand_Type SlowCommand::TREE_UP;
const SlowCommand_Type SlowCommand::UNDO;
const SlowCommand_Type SlowCommand::UNSELECT;
const SlowCommand_Type SlowCommand::WHATS_NEW_PAGE;
const SlowCommand_Type SlowCommand::ZOOM_IN;
const SlowCommand_Type SlowCommand::ZOOM_OUT;
const SlowCommand_Type SlowCommand::ZOOM_OUT_FULL;
const SlowCommand_Type SlowCommand::ZOOM_TO_SELECTION;
const SlowCommand_Type SlowCommand::FIRST_FREE_TYPE;
const SlowCommand_Type SlowCommand::QUIT;
const SlowCommand_Type SlowCommand::DEL;
const SlowCommand_Type SlowCommand::CUT;
const SlowCommand_Type SlowCommand::COPY;
const SlowCommand_Type SlowCommand::PASTE;
const SlowCommand_Type SlowCommand::SELECT_ALL;
const SlowCommand_Type SlowCommand::DESELECT_ALL;
const SlowCommand_Type SlowCommand::Type_MIN;
const SlowCommand_Type SlowCommand::Type_MAX;
const int SlowCommand::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SlowCommand::kTypeFieldNumber;
const int SlowCommand::kCommandFieldNumber;
#endif  // !_MSC_VER

SlowCommand::SlowCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommand::InitAsDefaultInstance() {
  command_ = const_cast< ::rec::command::Command*>(&::rec::command::Command::default_instance());
}

SlowCommand::SlowCommand(const SlowCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommand::~SlowCommand() {
  SharedDtor();
}

void SlowCommand::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
  }
}

void SlowCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommand_descriptor_;
}

const SlowCommand& SlowCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommand* SlowCommand::default_instance_ = NULL;

SlowCommand* SlowCommand::New() const {
  return new SlowCommand;
}

void SlowCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_command()) {
      if (command_ != NULL) command_->::rec::command::Command::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.SlowCommand.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::SlowCommand_Type_IsValid(value)) {
            set_type(static_cast< ::rec::slow::SlowCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional .rec.command.Command command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.SlowCommand.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.SlowCommand.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.SlowCommand.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .rec.command.Command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommand::MergeFrom(const SlowCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_command()) {
      mutable_command()->::rec::command::Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommand::CopyFrom(const SlowCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommand::IsInitialized() const {

  return true;
}

void SlowCommand::Swap(SlowCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommand_descriptor_;
  metadata.reflection = SlowCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommands::kSlowCommandFieldNumber;
#endif  // !_MSC_VER

SlowCommands::SlowCommands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommands::InitAsDefaultInstance() {
}

SlowCommands::SlowCommands(const SlowCommands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommands::~SlowCommands() {
  SharedDtor();
}

void SlowCommands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommands_descriptor_;
}

const SlowCommands& SlowCommands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommands* SlowCommands::default_instance_ = NULL;

SlowCommands* SlowCommands::New() const {
  return new SlowCommands;
}

void SlowCommands::Clear() {
  slow_command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowCommand slow_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slow_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slow_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slow_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowCommand slow_command = 1;
  for (int i = 0; i < this->slow_command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slow_command(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowCommand slow_command = 1;
  for (int i = 0; i < this->slow_command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slow_command(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommands::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.SlowCommand slow_command = 1;
  total_size += 1 * this->slow_command_size();
  for (int i = 0; i < this->slow_command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slow_command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommands::MergeFrom(const SlowCommands& from) {
  GOOGLE_CHECK_NE(&from, this);
  slow_command_.MergeFrom(from.slow_command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommands::CopyFrom(const SlowCommands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommands::IsInitialized() const {

  return true;
}

void SlowCommands::Swap(SlowCommands* other) {
  if (other != this) {
    slow_command_.Swap(&other->slow_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommands_descriptor_;
  metadata.reflection = SlowCommands_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommandMapEntry::kCommandFieldNumber;
const int SlowCommandMapEntry::kEntryFieldNumber;
#endif  // !_MSC_VER

SlowCommandMapEntry::SlowCommandMapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommandMapEntry::InitAsDefaultInstance() {
  entry_ = const_cast< ::rec::command::CommandMapEntry*>(&::rec::command::CommandMapEntry::default_instance());
}

SlowCommandMapEntry::SlowCommandMapEntry(const SlowCommandMapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommandMapEntry::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommandMapEntry::~SlowCommandMapEntry() {
  SharedDtor();
}

void SlowCommandMapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
  }
}

void SlowCommandMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommandMapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommandMapEntry_descriptor_;
}

const SlowCommandMapEntry& SlowCommandMapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommandMapEntry* SlowCommandMapEntry::default_instance_ = NULL;

SlowCommandMapEntry* SlowCommandMapEntry::New() const {
  return new SlowCommandMapEntry;
}

void SlowCommandMapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    if (has_entry()) {
      if (entry_ != NULL) entry_->::rec::command::CommandMapEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommandMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.SlowCommand.Type command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::SlowCommand_Type_IsValid(value)) {
            set_command(static_cast< ::rec::slow::SlowCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // optional .rec.command.CommandMapEntry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommandMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.SlowCommand.Type command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommandMapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.SlowCommand.Type command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommandMapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.SlowCommand.Type command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional .rec.command.CommandMapEntry entry = 2;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommandMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommandMapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommandMapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommandMapEntry::MergeFrom(const SlowCommandMapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_entry()) {
      mutable_entry()->::rec::command::CommandMapEntry::MergeFrom(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommandMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommandMapEntry::CopyFrom(const SlowCommandMapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommandMapEntry::IsInitialized() const {

  return true;
}

void SlowCommandMapEntry::Swap(SlowCommandMapEntry* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommandMapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommandMapEntry_descriptor_;
  metadata.reflection = SlowCommandMapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommandMapProto::kSlowEntryFieldNumber;
#endif  // !_MSC_VER

SlowCommandMapProto::SlowCommandMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommandMapProto::InitAsDefaultInstance() {
}

SlowCommandMapProto::SlowCommandMapProto(const SlowCommandMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommandMapProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommandMapProto::~SlowCommandMapProto() {
  SharedDtor();
}

void SlowCommandMapProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowCommandMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommandMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommandMapProto_descriptor_;
}

const SlowCommandMapProto& SlowCommandMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommandMapProto* SlowCommandMapProto::default_instance_ = NULL;

SlowCommandMapProto* SlowCommandMapProto::New() const {
  return new SlowCommandMapProto;
}

void SlowCommandMapProto::Clear() {
  slow_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommandMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slow_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slow_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slow_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommandMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  for (int i = 0; i < this->slow_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slow_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommandMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  for (int i = 0; i < this->slow_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slow_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommandMapProto::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  total_size += 1 * this->slow_entry_size();
  for (int i = 0; i < this->slow_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slow_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommandMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommandMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommandMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommandMapProto::MergeFrom(const SlowCommandMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  slow_entry_.MergeFrom(from.slow_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommandMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommandMapProto::CopyFrom(const SlowCommandMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommandMapProto::IsInitialized() const {

  return true;
}

void SlowCommandMapProto::Swap(SlowCommandMapProto* other) {
  if (other != this) {
    slow_entry_.Swap(&other->slow_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommandMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommandMapProto_descriptor_;
  metadata.reflection = SlowCommandMapProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowMenuEntry::kCommandFieldNumber;
const int SlowMenuEntry::kSubmenuFieldNumber;
const int SlowMenuEntry::kIsRecentFilesMenuFieldNumber;
const int SlowMenuEntry::kCalloutFunctionFieldNumber;
#endif  // !_MSC_VER

SlowMenuEntry::SlowMenuEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowMenuEntry::InitAsDefaultInstance() {
}

SlowMenuEntry::SlowMenuEntry(const SlowMenuEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowMenuEntry::SharedCtor() {
  _cached_size_ = 0;
  submenu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_recent_files_menu_ = false;
  callout_function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowMenuEntry::~SlowMenuEntry() {
  SharedDtor();
}

void SlowMenuEntry::SharedDtor() {
  if (submenu_ != &::google::protobuf::internal::kEmptyString) {
    delete submenu_;
  }
  if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
    delete callout_function_;
  }
  if (this != default_instance_) {
  }
}

void SlowMenuEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowMenuEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowMenuEntry_descriptor_;
}

const SlowMenuEntry& SlowMenuEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowMenuEntry* SlowMenuEntry::default_instance_ = NULL;

SlowMenuEntry* SlowMenuEntry::New() const {
  return new SlowMenuEntry;
}

void SlowMenuEntry::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_submenu()) {
      if (submenu_ != &::google::protobuf::internal::kEmptyString) {
        submenu_->clear();
      }
    }
    is_recent_files_menu_ = false;
    if (has_callout_function()) {
      if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
        callout_function_->clear();
      }
    }
  }
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowMenuEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowCommand.Type command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::SlowCommand_Type_IsValid(value)) {
            add_command(static_cast< ::rec::slow::SlowCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::rec::slow::SlowCommand_Type_IsValid,
                 this->mutable_command())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_command;
        if (input->ExpectTag(18)) goto parse_submenu;
        break;
      }

      // optional string submenu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submenu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submenu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->submenu().data(), this->submenu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_recent_files_menu;
        break;
      }

      // optional bool is_recent_files_menu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_recent_files_menu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recent_files_menu_)));
          set_has_is_recent_files_menu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_callout_function;
        break;
      }

      // optional string callout_function = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callout_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callout_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callout_function().data(), this->callout_function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowMenuEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowCommand.Type command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(i), output);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->submenu(), output);
  }

  // optional bool is_recent_files_menu = 3;
  if (has_is_recent_files_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_recent_files_menu(), output);
  }

  // optional string callout_function = 4;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->callout_function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowMenuEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowCommand.Type command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(i), target);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submenu(), target);
  }

  // optional bool is_recent_files_menu = 3;
  if (has_is_recent_files_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_recent_files_menu(), target);
  }

  // optional string callout_function = 4;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->callout_function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowMenuEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string submenu = 2;
    if (has_submenu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->submenu());
    }

    // optional bool is_recent_files_menu = 3;
    if (has_is_recent_files_menu()) {
      total_size += 1 + 1;
    }

    // optional string callout_function = 4;
    if (has_callout_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callout_function());
    }

  }
  // repeated .rec.slow.SlowCommand.Type command = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->command_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->command(i));
    }
    total_size += 1 * this->command_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowMenuEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowMenuEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowMenuEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowMenuEntry::MergeFrom(const SlowMenuEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_submenu()) {
      set_submenu(from.submenu());
    }
    if (from.has_is_recent_files_menu()) {
      set_is_recent_files_menu(from.is_recent_files_menu());
    }
    if (from.has_callout_function()) {
      set_callout_function(from.callout_function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowMenuEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowMenuEntry::CopyFrom(const SlowMenuEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowMenuEntry::IsInitialized() const {

  return true;
}

void SlowMenuEntry::Swap(SlowMenuEntry* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(submenu_, other->submenu_);
    std::swap(is_recent_files_menu_, other->is_recent_files_menu_);
    std::swap(callout_function_, other->callout_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowMenuEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowMenuEntry_descriptor_;
  metadata.reflection = SlowMenuEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowMenu::kDescriptionFieldNumber;
const int SlowMenu::kExtendsFieldNumber;
const int SlowMenu::kEntryFieldNumber;
#endif  // !_MSC_VER

SlowMenu::SlowMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowMenu::InitAsDefaultInstance() {
  description_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
}

SlowMenu::SlowMenu(const SlowMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowMenu::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowMenu::~SlowMenu() {
  SharedDtor();
}

void SlowMenu::SharedDtor() {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    delete extends_;
  }
  if (this != default_instance_) {
    delete description_;
  }
}

void SlowMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowMenu_descriptor_;
}

const SlowMenu& SlowMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowMenu* SlowMenu::default_instance_ = NULL;

SlowMenu* SlowMenu::New() const {
  return new SlowMenu;
}

void SlowMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::rec::command::Description::Clear();
    }
    if (has_extends()) {
      if (extends_ != &::google::protobuf::internal::kEmptyString) {
        extends_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extends;
        break;
      }

      // optional string extends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extends().data(), this->extends().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }

      // repeated .rec.slow.SlowMenuEntry entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extends(), output);
  }

  // repeated .rec.slow.SlowMenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extends(), target);
  }

  // repeated .rec.slow.SlowMenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

    // optional string extends = 2;
    if (has_extends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extends());
    }

  }
  // repeated .rec.slow.SlowMenuEntry entry = 3;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowMenu::MergeFrom(const SlowMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::rec::command::Description::MergeFrom(from.description());
    }
    if (from.has_extends()) {
      set_extends(from.extends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowMenu::CopyFrom(const SlowMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowMenu::IsInitialized() const {

  return true;
}

void SlowMenu::Swap(SlowMenu* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(extends_, other->extends_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowMenu_descriptor_;
  metadata.reflection = SlowMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowMenus::kMenuFieldNumber;
#endif  // !_MSC_VER

SlowMenus::SlowMenus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowMenus::InitAsDefaultInstance() {
}

SlowMenus::SlowMenus(const SlowMenus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowMenus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowMenus::~SlowMenus() {
  SharedDtor();
}

void SlowMenus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowMenus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowMenus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowMenus_descriptor_;
}

const SlowMenus& SlowMenus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowMenus* SlowMenus::default_instance_ = NULL;

SlowMenus* SlowMenus::New() const {
  return new SlowMenus;
}

void SlowMenus::Clear() {
  menu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowMenus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowMenu menu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_menu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_menu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowMenus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowMenu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->menu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowMenus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowMenu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->menu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowMenus::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.SlowMenu menu = 1;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->menu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowMenus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowMenus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowMenus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowMenus::MergeFrom(const SlowMenus& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowMenus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowMenus::CopyFrom(const SlowMenus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowMenus::IsInitialized() const {

  return true;
}

void SlowMenus::Swap(SlowMenus* other) {
  if (other != this) {
    menu_.Swap(&other->menu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowMenus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowMenus_descriptor_;
  metadata.reflection = SlowMenus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
