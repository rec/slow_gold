// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/commands/SlowCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/commands/SlowCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* SlowCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlowCommand_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlowCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowCommandMapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommandMapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlowCommandMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlowCommandMapProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/commands/SlowCommand.proto");
  GOOGLE_CHECK(file != NULL);
  SlowCommand_descriptor_ = file->message_type(0);
  static const int SlowCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, command_),
  };
  SlowCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommand_descriptor_,
      SlowCommand::default_instance_,
      SlowCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommand));
  SlowCommand_Type_descriptor_ = SlowCommand_descriptor_->enum_type(0);
  SlowCommands_descriptor_ = file->message_type(1);
  static const int SlowCommands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, slow_command_),
  };
  SlowCommands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommands_descriptor_,
      SlowCommands::default_instance_,
      SlowCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommands));
  SlowCommandMapEntry_descriptor_ = file->message_type(2);
  static const int SlowCommandMapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, entry_),
  };
  SlowCommandMapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommandMapEntry_descriptor_,
      SlowCommandMapEntry::default_instance_,
      SlowCommandMapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommandMapEntry));
  SlowCommandMapProto_descriptor_ = file->message_type(3);
  static const int SlowCommandMapProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, slow_entry_),
  };
  SlowCommandMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlowCommandMapProto_descriptor_,
      SlowCommandMapProto::default_instance_,
      SlowCommandMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlowCommandMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlowCommandMapProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommand_descriptor_, &SlowCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommands_descriptor_, &SlowCommands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommandMapEntry_descriptor_, &SlowCommandMapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlowCommandMapProto_descriptor_, &SlowCommandMapProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  delete SlowCommand::default_instance_;
  delete SlowCommand_reflection_;
  delete SlowCommands::default_instance_;
  delete SlowCommands_reflection_;
  delete SlowCommandMapEntry::default_instance_;
  delete SlowCommandMapEntry_reflection_;
  delete SlowCommandMapProto::default_instance_;
  delete SlowCommandMapProto_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fmap_2fCommandMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#rec/slow/commands/SlowCommand.proto\022\010r"
    "ec.slow\032\031rec/command/Command.proto\032 rec/"
    "command/map/CommandMap.proto\"\334\022\n\013SlowCom"
    "mand\022(\n\004type\030\001 \001(\0162\032.rec.slow.SlowComman"
    "d.Type\022%\n\007command\030\002 \001(\0132\024.rec.command.Co"
    "mmand\"\373\021\n\004Type\022\010\n\004NONE\020\000\022\026\n\022ABOUT_THIS_P"
    "ROGRAM\020:\022\022\n\016ADD_LOOP_POINT\020\001\022\025\n\021AUDIO_PR"
    "EFERENCES\020\002\022\025\n\021CHECK_FOR_UPDATES\020D\022\033\n\027CL"
    "EAR_KEYBOARD_MAPPINGS\020[\022\027\n\023CLEAR_MIDI_MA"
    "PPINGS\020\\\022\017\n\013CLEAR_LOOPS\020\004\022\023\n\017CLEAR_NAVIG"
    "ATOR\020\003\022\026\n\022CLEAR_ALL_SETTINGS\020O\022!\n\035CLEAR_"
    "SETTINGS_FOR_THIS_TRACK\020P\022\031\n\025CLEAR_SAVED"
    "_FILE_DATA\020\005\022\016\n\nCLOSE_FILE\020\006\022\030\n\024COPY_ALL"
    "_LOOP_POINTS\020_\022\025\n\021DIM_VOLUME_TOGGLE\020\007\022\r\n"
    "\tEJECT_CDS\020\010\022\034\n\030EXPORT_KEYBOARD_MAPPINGS"
    "\020R\022\030\n\024EXPORT_MIDI_MAPPINGS\020S\022\023\n\017EXPORT_S"
    "ETTINGS\020K\022\034\n\030IMPORT_KEYBOARD_MAPPINGS\020T\022"
    "\030\n\024IMPORT_MIDI_MAPPINGS\020U\022\023\n\017IMPORT_SETT"
    "INGS\020L\022\031\n\025INVERT_LOOP_SELECTION\020\t\022\010\n\004JUM"
    "P\020\n\022\021\n\rJUMP_SELECTED\020\013\022\025\n\021KEYBOARD_MAPPI"
    "NGS\020\014\022\025\n\021LOOP_NEXT_SEGMENT\020^\022\021\n\rMIDI_MAP"
    "PINGS\020\r\022\027\n\023MODE_ADD_LOOP_POINT\020\?\022\r\n\tMODE"
    "_DRAG\020<\022\021\n\rMODE_SET_TIME\020=\022\020\n\014MODE_ZOOM_"
    "IN\020>\022\026\n\022MUTE_VOLUME_TOGGLE\020\016\022\022\n\016NUDGE_BA"
    "CKWARD\020Y\022\021\n\rNUDGE_FORWARD\020Z\022\024\n\020NUDGE_BEG"
    "IN_LEFT\020\017\022\025\n\021NUDGE_BEGIN_RIGHT\020\020\022\022\n\016NUDG"
    "E_END_LEFT\020\021\022\023\n\017NUDGE_END_RIGHT\020\022\022\024\n\020NUD"
    "GE_SPEED_DOWN\020V\022\022\n\016NUDGE_SPEED_UP\020W\022\025\n\021N"
    "UDGE_VOLUME_DOWN\020\023\022\023\n\017NUDGE_VOLUME_UP\020\024\022"
    "\010\n\004OPEN\020\025\022\017\n\013OPEN_MANUAL\020A\022\026\n\022OPEN_PREVI"
    "OUS_FILE\020N\022\033\n\027OPEN_SLOWGOLD_DIRECTORY\020J\022"
    "\032\n\026PASTE_OVER_LOOP_POINTS\020`\022\020\n\014RECENT_FI"
    "LES\020\026\022\010\n\004REDO\020\027\022\023\n\017REQUEST_SUPPORT\020B\022\027\n\023"
    "RESET_GAIN_TO_UNITY\020\030\022\r\n\tSAVE_FILE\020E\022\027\n\023"
    "SAVE_FILE_SELECTION\020F\022\n\n\006SELECT\020\031\022\017\n\013SEL"
    "ECT_ONLY\020\032\022\020\n\014SET_LANGUAGE\020]\022\023\n\017SET_SAVE"
    "_FORMAT\020G\022\031\n\025TOGGLE_ADVANCED_MENUS\020;\022\034\n\030"
    "TOGGLE_AUTOMATIC_UPDATES\020C\022\030\n\024TOGGLE_FOL"
    "LOW_CURSOR\020+\022\027\n\023TOGGLE_GRID_DISPLAY\020\033\022\036\n"
    "\032TOGGLE_COMMAND_BAR_AT_LEFT\0206\022\035\n\031TOGGLE_"
    "COMMAND_BAR_AT_TOP\0207\022!\n\035TOGGLE_FILE_OPEN"
    "_TREE_DISPLAY\020H\022\030\n\024TOGGLE_MODES_AT_LEFT\020"
    "8\022\027\n\023TOGGLE_MODES_AT_TOP\0209\022\035\n\031TOGGLE_PAR"
    "ALLEL_WAVEFORMS\020*\022\032\n\026TOGGLE_PREFADER_LEV"
    "ELS\020.\022\024\n\020TOGGLE_SELECTION\020)\022\'\n#TOGGLE_SH"
    "OW_ABOUT_WINDOW_AT_STARTUP\020Q\022\035\n\031TOGGLE_S"
    "HOW_CURSOR_LABELS\0203\022\031\n\025TOGGLE_SHOW_HELP_"
    "PANE\0201\022\035\n\031TOGGLE_SHOW_LABELS_AT_TOP\0204\022\033\n"
    "\027TOGGLE_SHOW_MASTER_TUNE\020M\022!\n\035TOGGLE_SHO"
    "W_SELECTION_BUTTONS\0202\022\034\n\030TOGGLE_SHOW_TIM"
    "ES_AT_TOP\0205\022\030\n\024TOGGLE_SHOW_TOOLTIPS\0200\022\025\n"
    "\021TOGGLE_START_STOP\020\034\022\031\n\025TOGGLE_STRETCH_E"
    "NABLE\020\035\022\033\n\027TOGGLE_TRANSFORM_ENABLE\020X\022\032\n\026"
    "TOGGLE_WHOLE_SONG_LOOP\020\036\022\016\n\nTREE_CLOSE\020\037"
    "\022\r\n\tTREE_DOWN\020 \022\r\n\tTREE_LEFT\020!\022\r\n\tTREE_O"
    "PEN\020\"\022\016\n\nTREE_RIGHT\020#\022\013\n\007TREE_UP\020$\022\010\n\004UN"
    "DO\020%\022\014\n\010UNSELECT\020&\022\022\n\016WHATS_NEW_PAGE\020I\022\013"
    "\n\007ZOOM_IN\020\'\022\014\n\010ZOOM_OUT\020(\022\021\n\rZOOM_OUT_FU"
    "LL\020@\022\025\n\021ZOOM_TO_SELECTION\020-\022\023\n\017FIRST_FRE"
    "E_TYPE\020a\022\t\n\004QUIT\020\201 \022\010\n\003DEL\020\202 \022\010\n\003CUT\020\203 \022"
    "\t\n\004COPY\020\204 \022\n\n\005PASTE\020\205 \022\017\n\nSELECT_ALL\020\206 \022"
    "\021\n\014DESELECT_ALL\020\207 \022\017\n\nJUCE_START\020\200 \022\r\n\010J"
    "UCE_END\020\210 \022\017\n\tBANK_SIZE\020\240\215\006\";\n\014SlowComma"
    "nds\022+\n\014slow_command\030\001 \003(\0132\025.rec.slow.Slo"
    "wCommand\"o\n\023SlowCommandMapEntry\022+\n\007comma"
    "nd\030\001 \001(\0162\032.rec.slow.SlowCommand.Type\022+\n\005"
    "entry\030\002 \001(\0132\034.rec.command.CommandMapEntr"
    "y\"H\n\023SlowCommandMapProto\0221\n\nslow_entry\030\001"
    " \003(\0132\035.rec.slow.SlowCommandMapEntry", 2755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/commands/SlowCommand.proto", &protobuf_RegisterTypes);
  SlowCommand::default_instance_ = new SlowCommand();
  SlowCommands::default_instance_ = new SlowCommands();
  SlowCommandMapEntry::default_instance_ = new SlowCommandMapEntry();
  SlowCommandMapProto::default_instance_ = new SlowCommandMapProto();
  SlowCommand::default_instance_->InitAsDefaultInstance();
  SlowCommands::default_instance_->InitAsDefaultInstance();
  SlowCommandMapEntry::default_instance_->InitAsDefaultInstance();
  SlowCommandMapProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fcommands_2fSlowCommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SlowCommand_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommand_Type_descriptor_;
}
bool SlowCommand_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 100000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SlowCommand_Type SlowCommand::NONE;
const SlowCommand_Type SlowCommand::ABOUT_THIS_PROGRAM;
const SlowCommand_Type SlowCommand::ADD_LOOP_POINT;
const SlowCommand_Type SlowCommand::AUDIO_PREFERENCES;
const SlowCommand_Type SlowCommand::CHECK_FOR_UPDATES;
const SlowCommand_Type SlowCommand::CLEAR_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::CLEAR_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::CLEAR_LOOPS;
const SlowCommand_Type SlowCommand::CLEAR_NAVIGATOR;
const SlowCommand_Type SlowCommand::CLEAR_ALL_SETTINGS;
const SlowCommand_Type SlowCommand::CLEAR_SETTINGS_FOR_THIS_TRACK;
const SlowCommand_Type SlowCommand::CLEAR_SAVED_FILE_DATA;
const SlowCommand_Type SlowCommand::CLOSE_FILE;
const SlowCommand_Type SlowCommand::COPY_ALL_LOOP_POINTS;
const SlowCommand_Type SlowCommand::DIM_VOLUME_TOGGLE;
const SlowCommand_Type SlowCommand::EJECT_CDS;
const SlowCommand_Type SlowCommand::EXPORT_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::EXPORT_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::EXPORT_SETTINGS;
const SlowCommand_Type SlowCommand::IMPORT_KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::IMPORT_MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::IMPORT_SETTINGS;
const SlowCommand_Type SlowCommand::INVERT_LOOP_SELECTION;
const SlowCommand_Type SlowCommand::JUMP;
const SlowCommand_Type SlowCommand::JUMP_SELECTED;
const SlowCommand_Type SlowCommand::KEYBOARD_MAPPINGS;
const SlowCommand_Type SlowCommand::LOOP_NEXT_SEGMENT;
const SlowCommand_Type SlowCommand::MIDI_MAPPINGS;
const SlowCommand_Type SlowCommand::MODE_ADD_LOOP_POINT;
const SlowCommand_Type SlowCommand::MODE_DRAG;
const SlowCommand_Type SlowCommand::MODE_SET_TIME;
const SlowCommand_Type SlowCommand::MODE_ZOOM_IN;
const SlowCommand_Type SlowCommand::MUTE_VOLUME_TOGGLE;
const SlowCommand_Type SlowCommand::NUDGE_BACKWARD;
const SlowCommand_Type SlowCommand::NUDGE_FORWARD;
const SlowCommand_Type SlowCommand::NUDGE_BEGIN_LEFT;
const SlowCommand_Type SlowCommand::NUDGE_BEGIN_RIGHT;
const SlowCommand_Type SlowCommand::NUDGE_END_LEFT;
const SlowCommand_Type SlowCommand::NUDGE_END_RIGHT;
const SlowCommand_Type SlowCommand::NUDGE_SPEED_DOWN;
const SlowCommand_Type SlowCommand::NUDGE_SPEED_UP;
const SlowCommand_Type SlowCommand::NUDGE_VOLUME_DOWN;
const SlowCommand_Type SlowCommand::NUDGE_VOLUME_UP;
const SlowCommand_Type SlowCommand::OPEN;
const SlowCommand_Type SlowCommand::OPEN_MANUAL;
const SlowCommand_Type SlowCommand::OPEN_PREVIOUS_FILE;
const SlowCommand_Type SlowCommand::OPEN_SLOWGOLD_DIRECTORY;
const SlowCommand_Type SlowCommand::PASTE_OVER_LOOP_POINTS;
const SlowCommand_Type SlowCommand::RECENT_FILES;
const SlowCommand_Type SlowCommand::REDO;
const SlowCommand_Type SlowCommand::REQUEST_SUPPORT;
const SlowCommand_Type SlowCommand::RESET_GAIN_TO_UNITY;
const SlowCommand_Type SlowCommand::SAVE_FILE;
const SlowCommand_Type SlowCommand::SAVE_FILE_SELECTION;
const SlowCommand_Type SlowCommand::SELECT;
const SlowCommand_Type SlowCommand::SELECT_ONLY;
const SlowCommand_Type SlowCommand::SET_LANGUAGE;
const SlowCommand_Type SlowCommand::SET_SAVE_FORMAT;
const SlowCommand_Type SlowCommand::TOGGLE_ADVANCED_MENUS;
const SlowCommand_Type SlowCommand::TOGGLE_AUTOMATIC_UPDATES;
const SlowCommand_Type SlowCommand::TOGGLE_FOLLOW_CURSOR;
const SlowCommand_Type SlowCommand::TOGGLE_GRID_DISPLAY;
const SlowCommand_Type SlowCommand::TOGGLE_COMMAND_BAR_AT_LEFT;
const SlowCommand_Type SlowCommand::TOGGLE_COMMAND_BAR_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_FILE_OPEN_TREE_DISPLAY;
const SlowCommand_Type SlowCommand::TOGGLE_MODES_AT_LEFT;
const SlowCommand_Type SlowCommand::TOGGLE_MODES_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_PARALLEL_WAVEFORMS;
const SlowCommand_Type SlowCommand::TOGGLE_PREFADER_LEVELS;
const SlowCommand_Type SlowCommand::TOGGLE_SELECTION;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_CURSOR_LABELS;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_HELP_PANE;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_LABELS_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_MASTER_TUNE;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_SELECTION_BUTTONS;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_TIMES_AT_TOP;
const SlowCommand_Type SlowCommand::TOGGLE_SHOW_TOOLTIPS;
const SlowCommand_Type SlowCommand::TOGGLE_START_STOP;
const SlowCommand_Type SlowCommand::TOGGLE_STRETCH_ENABLE;
const SlowCommand_Type SlowCommand::TOGGLE_TRANSFORM_ENABLE;
const SlowCommand_Type SlowCommand::TOGGLE_WHOLE_SONG_LOOP;
const SlowCommand_Type SlowCommand::TREE_CLOSE;
const SlowCommand_Type SlowCommand::TREE_DOWN;
const SlowCommand_Type SlowCommand::TREE_LEFT;
const SlowCommand_Type SlowCommand::TREE_OPEN;
const SlowCommand_Type SlowCommand::TREE_RIGHT;
const SlowCommand_Type SlowCommand::TREE_UP;
const SlowCommand_Type SlowCommand::UNDO;
const SlowCommand_Type SlowCommand::UNSELECT;
const SlowCommand_Type SlowCommand::WHATS_NEW_PAGE;
const SlowCommand_Type SlowCommand::ZOOM_IN;
const SlowCommand_Type SlowCommand::ZOOM_OUT;
const SlowCommand_Type SlowCommand::ZOOM_OUT_FULL;
const SlowCommand_Type SlowCommand::ZOOM_TO_SELECTION;
const SlowCommand_Type SlowCommand::FIRST_FREE_TYPE;
const SlowCommand_Type SlowCommand::QUIT;
const SlowCommand_Type SlowCommand::DEL;
const SlowCommand_Type SlowCommand::CUT;
const SlowCommand_Type SlowCommand::COPY;
const SlowCommand_Type SlowCommand::PASTE;
const SlowCommand_Type SlowCommand::SELECT_ALL;
const SlowCommand_Type SlowCommand::DESELECT_ALL;
const SlowCommand_Type SlowCommand::JUCE_START;
const SlowCommand_Type SlowCommand::JUCE_END;
const SlowCommand_Type SlowCommand::BANK_SIZE;
const SlowCommand_Type SlowCommand::Type_MIN;
const SlowCommand_Type SlowCommand::Type_MAX;
const int SlowCommand::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SlowCommand::kTypeFieldNumber;
const int SlowCommand::kCommandFieldNumber;
#endif  // !_MSC_VER

SlowCommand::SlowCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommand::InitAsDefaultInstance() {
  command_ = const_cast< ::rec::command::Command*>(&::rec::command::Command::default_instance());
}

SlowCommand::SlowCommand(const SlowCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommand::~SlowCommand() {
  SharedDtor();
}

void SlowCommand::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
  }
}

void SlowCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommand_descriptor_;
}

const SlowCommand& SlowCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommand* SlowCommand::default_instance_ = NULL;

SlowCommand* SlowCommand::New() const {
  return new SlowCommand;
}

void SlowCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_command()) {
      if (command_ != NULL) command_->::rec::command::Command::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.SlowCommand.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::SlowCommand_Type_IsValid(value)) {
            set_type(static_cast< ::rec::slow::SlowCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional .rec.command.Command command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.SlowCommand.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.SlowCommand.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.SlowCommand.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .rec.command.Command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommand::MergeFrom(const SlowCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_command()) {
      mutable_command()->::rec::command::Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommand::CopyFrom(const SlowCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommand::IsInitialized() const {

  return true;
}

void SlowCommand::Swap(SlowCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommand_descriptor_;
  metadata.reflection = SlowCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommands::kSlowCommandFieldNumber;
#endif  // !_MSC_VER

SlowCommands::SlowCommands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommands::InitAsDefaultInstance() {
}

SlowCommands::SlowCommands(const SlowCommands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommands::~SlowCommands() {
  SharedDtor();
}

void SlowCommands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommands_descriptor_;
}

const SlowCommands& SlowCommands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommands* SlowCommands::default_instance_ = NULL;

SlowCommands* SlowCommands::New() const {
  return new SlowCommands;
}

void SlowCommands::Clear() {
  slow_command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowCommand slow_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slow_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slow_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slow_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowCommand slow_command = 1;
  for (int i = 0; i < this->slow_command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slow_command(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowCommand slow_command = 1;
  for (int i = 0; i < this->slow_command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slow_command(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommands::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.SlowCommand slow_command = 1;
  total_size += 1 * this->slow_command_size();
  for (int i = 0; i < this->slow_command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slow_command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommands::MergeFrom(const SlowCommands& from) {
  GOOGLE_CHECK_NE(&from, this);
  slow_command_.MergeFrom(from.slow_command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommands::CopyFrom(const SlowCommands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommands::IsInitialized() const {

  return true;
}

void SlowCommands::Swap(SlowCommands* other) {
  if (other != this) {
    slow_command_.Swap(&other->slow_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommands_descriptor_;
  metadata.reflection = SlowCommands_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommandMapEntry::kCommandFieldNumber;
const int SlowCommandMapEntry::kEntryFieldNumber;
#endif  // !_MSC_VER

SlowCommandMapEntry::SlowCommandMapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommandMapEntry::InitAsDefaultInstance() {
  entry_ = const_cast< ::rec::command::CommandMapEntry*>(&::rec::command::CommandMapEntry::default_instance());
}

SlowCommandMapEntry::SlowCommandMapEntry(const SlowCommandMapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommandMapEntry::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommandMapEntry::~SlowCommandMapEntry() {
  SharedDtor();
}

void SlowCommandMapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
  }
}

void SlowCommandMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommandMapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommandMapEntry_descriptor_;
}

const SlowCommandMapEntry& SlowCommandMapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommandMapEntry* SlowCommandMapEntry::default_instance_ = NULL;

SlowCommandMapEntry* SlowCommandMapEntry::New() const {
  return new SlowCommandMapEntry;
}

void SlowCommandMapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    if (has_entry()) {
      if (entry_ != NULL) entry_->::rec::command::CommandMapEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommandMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.SlowCommand.Type command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::SlowCommand_Type_IsValid(value)) {
            set_command(static_cast< ::rec::slow::SlowCommand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // optional .rec.command.CommandMapEntry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommandMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.SlowCommand.Type command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommandMapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.SlowCommand.Type command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommandMapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.SlowCommand.Type command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional .rec.command.CommandMapEntry entry = 2;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommandMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommandMapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommandMapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommandMapEntry::MergeFrom(const SlowCommandMapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_entry()) {
      mutable_entry()->::rec::command::CommandMapEntry::MergeFrom(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommandMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommandMapEntry::CopyFrom(const SlowCommandMapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommandMapEntry::IsInitialized() const {

  return true;
}

void SlowCommandMapEntry::Swap(SlowCommandMapEntry* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommandMapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommandMapEntry_descriptor_;
  metadata.reflection = SlowCommandMapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlowCommandMapProto::kSlowEntryFieldNumber;
#endif  // !_MSC_VER

SlowCommandMapProto::SlowCommandMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlowCommandMapProto::InitAsDefaultInstance() {
}

SlowCommandMapProto::SlowCommandMapProto(const SlowCommandMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlowCommandMapProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlowCommandMapProto::~SlowCommandMapProto() {
  SharedDtor();
}

void SlowCommandMapProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlowCommandMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlowCommandMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlowCommandMapProto_descriptor_;
}

const SlowCommandMapProto& SlowCommandMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  return *default_instance_;
}

SlowCommandMapProto* SlowCommandMapProto::default_instance_ = NULL;

SlowCommandMapProto* SlowCommandMapProto::New() const {
  return new SlowCommandMapProto;
}

void SlowCommandMapProto::Clear() {
  slow_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlowCommandMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slow_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slow_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slow_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlowCommandMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  for (int i = 0; i < this->slow_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slow_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlowCommandMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  for (int i = 0; i < this->slow_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slow_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlowCommandMapProto::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  total_size += 1 * this->slow_entry_size();
  for (int i = 0; i < this->slow_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slow_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlowCommandMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlowCommandMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlowCommandMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlowCommandMapProto::MergeFrom(const SlowCommandMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  slow_entry_.MergeFrom(from.slow_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlowCommandMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowCommandMapProto::CopyFrom(const SlowCommandMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowCommandMapProto::IsInitialized() const {

  return true;
}

void SlowCommandMapProto::Swap(SlowCommandMapProto* other) {
  if (other != this) {
    slow_entry_.Swap(&other->slow_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlowCommandMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlowCommandMapProto_descriptor_;
  metadata.reflection = SlowCommandMapProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
