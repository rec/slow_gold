// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/commands/Command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/commands/Command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Id_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMapProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMapProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fcommands_2fCommand_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/commands/Command.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Id_descriptor_ = Command_descriptor_->enum_type(0);
  Commands_descriptor_ = file->message_type(1);
  static const int Commands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, command_),
  };
  Commands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_descriptor_,
      Commands::default_instance_,
      Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands));
  CommandMapEntry_descriptor_ = file->message_type(2);
  static const int CommandMapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapEntry, entry_),
  };
  CommandMapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMapEntry_descriptor_,
      CommandMapEntry::default_instance_,
      CommandMapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMapEntry));
  CommandMapProto_descriptor_ = file->message_type(3);
  static const int CommandMapProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapProto, entry_),
  };
  CommandMapProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMapProto_descriptor_,
      CommandMapProto::default_instance_,
      CommandMapProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMapProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMapProto));
  MenuEntry_descriptor_ = file->message_type(4);
  static const int MenuEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, submenu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, callout_function_),
  };
  MenuEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuEntry_descriptor_,
      MenuEntry::default_instance_,
      MenuEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuEntry));
  Menu_descriptor_ = file->message_type(5);
  static const int Menu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, extends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, entry_),
  };
  Menu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menu_descriptor_,
      Menu::default_instance_,
      Menu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menu));
  Menus_descriptor_ = file->message_type(6);
  static const int Menus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, menu_),
  };
  Menus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menus_descriptor_,
      Menus::default_instance_,
      Menus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fcommands_2fCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_descriptor_, &Commands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMapEntry_descriptor_, &CommandMapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMapProto_descriptor_, &CommandMapProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuEntry_descriptor_, &MenuEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menu_descriptor_, &Menu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menus_descriptor_, &Menus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fCommand_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Commands::default_instance_;
  delete Commands_reflection_;
  delete CommandMapEntry::default_instance_;
  delete CommandMapEntry_reflection_;
  delete CommandMapProto::default_instance_;
  delete CommandMapProto_reflection_;
  delete MenuEntry::default_instance_;
  delete MenuEntry_reflection_;
  delete Menu::default_instance_;
  delete Menu_reflection_;
  delete Menus::default_instance_;
  delete Menus_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fmap_2fCommandMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rec/slow/commands/Command.proto\022\010rec.s"
    "low\032\031rec/command/Command.proto\032 rec/comm"
    "and/map/CommandMap.proto\"\205\023\n\007Command\022 \n\002"
    "id\030\001 \001(\0162\024.rec.slow.Command.Id\022%\n\007comman"
    "d\030\002 \001(\0132\024.rec.command.Command\"\260\022\n\002Id\022\010\n\004"
    "NONE\020\000\022\026\n\022ABOUT_THIS_PROGRAM\020:\022\022\n\016ADD_LO"
    "OP_POINT\020\001\022\025\n\021AUDIO_PREFERENCES\020\002\022\025\n\021CHE"
    "CK_FOR_UPDATES\020D\022\033\n\027CLEAR_KEYBOARD_MAPPI"
    "NGS\020[\022\027\n\023CLEAR_MIDI_MAPPINGS\020\\\022\017\n\013CLEAR_"
    "LOOPS\020\004\022\023\n\017CLEAR_NAVIGATOR\020\003\022\026\n\022CLEAR_AL"
    "L_SETTINGS\020O\022!\n\035CLEAR_SETTINGS_FOR_THIS_"
    "TRACK\020P\022\031\n\025CLEAR_SAVED_FILE_DATA\020\005\022\016\n\nCL"
    "OSE_FILE\020\006\022\030\n\024COPY_ALL_LOOP_POINTS\020_\022\025\n\021"
    "DIM_VOLUME_TOGGLE\020\007\022\r\n\tEJECT_CDS\020\010\022\034\n\030EX"
    "PORT_KEYBOARD_MAPPINGS\020R\022\030\n\024EXPORT_MIDI_"
    "MAPPINGS\020S\022\023\n\017EXPORT_SETTINGS\020K\022\034\n\030IMPOR"
    "T_KEYBOARD_MAPPINGS\020T\022\030\n\024IMPORT_MIDI_MAP"
    "PINGS\020U\022\023\n\017IMPORT_SETTINGS\020L\022\031\n\025INVERT_L"
    "OOP_SELECTION\020\t\022\n\n\004JUMP\020\240\215\006\022\023\n\rJUMP_SELE"
    "CTED\020\260\333\006\022\025\n\021KEYBOARD_MAPPINGS\020\014\022\025\n\021LOOP_"
    "NEXT_SEGMENT\020^\022\021\n\rMIDI_MAPPINGS\020\r\022\027\n\023MOD"
    "E_ADD_LOOP_POINT\020\?\022\r\n\tMODE_DRAG\020<\022\021\n\rMOD"
    "E_SET_TIME\020=\022\020\n\014MODE_ZOOM_IN\020>\022\026\n\022MUTE_V"
    "OLUME_TOGGLE\020\016\022\022\n\016NUDGE_BACKWARD\020Y\022\021\n\rNU"
    "DGE_FORWARD\020Z\022\024\n\020NUDGE_BEGIN_LEFT\020\017\022\025\n\021N"
    "UDGE_BEGIN_RIGHT\020\020\022\022\n\016NUDGE_END_LEFT\020\021\022\023"
    "\n\017NUDGE_END_RIGHT\020\022\022\024\n\020NUDGE_SPEED_DOWN\020"
    "V\022\022\n\016NUDGE_SPEED_UP\020W\022\025\n\021NUDGE_VOLUME_DO"
    "WN\020\023\022\023\n\017NUDGE_VOLUME_UP\020\024\022\010\n\004OPEN\020\025\022\017\n\013O"
    "PEN_MANUAL\020A\022\026\n\022OPEN_PREVIOUS_FILE\020N\022\033\n\027"
    "OPEN_SLOWGOLD_DIRECTORY\020J\022\032\n\026PASTE_OVER_"
    "LOOP_POINTS\020`\022\022\n\014RECENT_FILES\020\340\266\r\022\010\n\004RED"
    "O\020\027\022\023\n\017REQUEST_SUPPORT\020B\022\027\n\023RESET_GAIN_T"
    "O_UNITY\020\030\022\r\n\tSAVE_FILE\020E\022\027\n\023SAVE_FILE_SE"
    "LECTION\020F\022\014\n\006SELECT\020\220\241\017\022\021\n\013SELECT_ONLY\020\240"
    "\357\017\022\022\n\014SET_LANGUAGE\020\320\3418\022\025\n\017SET_SAVE_FORMA"
    "T\020\360\252+\022\024\n\020SET_SAVE_AS_AIFF\020a\022\024\n\020SET_SAVE_"
    "AS_FLAC\020b\022\023\n\017SET_SAVE_AS_OGG\020c\022\023\n\017SET_SA"
    "VE_AS_WAV\020d\022\031\n\025TOGGLE_ADVANCED_MENUS\020;\022\034"
    "\n\030TOGGLE_AUTOMATIC_UPDATES\020C\022\030\n\024TOGGLE_F"
    "OLLOW_CURSOR\020+\022\027\n\023TOGGLE_GRID_DISPLAY\020\033\022"
    "\036\n\032TOGGLE_COMMAND_BAR_AT_LEFT\0206\022\035\n\031TOGGL"
    "E_COMMAND_BAR_AT_TOP\0207\022!\n\035TOGGLE_FILE_OP"
    "EN_TREE_DISPLAY\020H\022\030\n\024TOGGLE_MODES_AT_LEF"
    "T\0208\022\027\n\023TOGGLE_MODES_AT_TOP\0209\022\035\n\031TOGGLE_P"
    "ARALLEL_WAVEFORMS\020*\022\032\n\026TOGGLE_PREFADER_L"
    "EVELS\020.\022\026\n\020TOGGLE_SELECTION\020\220\203\031\022\'\n#TOGGL"
    "E_SHOW_ABOUT_WINDOW_AT_STARTUP\020Q\022\035\n\031TOGG"
    "LE_SHOW_CURSOR_LABELS\0203\022\031\n\025TOGGLE_SHOW_H"
    "ELP_PANE\0201\022\035\n\031TOGGLE_SHOW_LABELS_AT_TOP\020"
    "4\022\033\n\027TOGGLE_SHOW_MASTER_TUNE\020M\022!\n\035TOGGLE"
    "_SHOW_SELECTION_BUTTONS\0202\022\034\n\030TOGGLE_SHOW"
    "_TIMES_AT_TOP\0205\022\030\n\024TOGGLE_SHOW_TOOLTIPS\020"
    "0\022\025\n\021TOGGLE_START_STOP\020\034\022\031\n\025TOGGLE_STRET"
    "CH_ENABLE\020\035\022\033\n\027TOGGLE_TRANSFORM_ENABLE\020X"
    "\022\032\n\026TOGGLE_WHOLE_SONG_LOOP\020\036\022\016\n\nTREE_CLO"
    "SE\020\037\022\r\n\tTREE_DOWN\020 \022\r\n\tTREE_LEFT\020!\022\r\n\tTR"
    "EE_OPEN\020\"\022\016\n\nTREE_RIGHT\020#\022\013\n\007TREE_UP\020$\022\010"
    "\n\004UNDO\020%\022\016\n\010UNSELECT\020\340\230\027\022\022\n\016WHATS_NEW_PA"
    "GE\020I\022\013\n\007ZOOM_IN\020\'\022\014\n\010ZOOM_OUT\020(\022\021\n\rZOOM_"
    "OUT_FULL\020@\022\025\n\021ZOOM_TO_SELECTION\020-\022\023\n\017FIR"
    "ST_FREE_TYPE\020e\022\t\n\004QUIT\020\201 \022\010\n\003DEL\020\202 \022\010\n\003C"
    "UT\020\203 \022\t\n\004COPY\020\204 \022\n\n\005PASTE\020\205 \022\017\n\nSELECT_A"
    "LL\020\206 \022\021\n\014DESELECT_ALL\020\207 \".\n\010Commands\022\"\n\007"
    "command\030\001 \003(\0132\021.rec.slow.Command\"`\n\017Comm"
    "andMapEntry\022 \n\002id\030\001 \001(\0162\024.rec.slow.Comma"
    "nd.Id\022+\n\005entry\030\002 \001(\0132\034.rec.command.Comma"
    "ndMapEntry\";\n\017CommandMapProto\022(\n\005entry\030\001"
    " \003(\0132\031.rec.slow.CommandMapEntry\"X\n\tMenuE"
    "ntry\022 \n\002id\030\001 \003(\0162\024.rec.slow.Command.Id\022\017"
    "\n\007submenu\030\002 \001(\t\022\030\n\020callout_function\030\003 \001("
    "\t\"j\n\004Menu\022-\n\013description\030\001 \001(\0132\030.rec.com"
    "mand.Description\022\017\n\007extends\030\002 \001(\t\022\"\n\005ent"
    "ry\030\003 \003(\0132\023.rec.slow.MenuEntry\"%\n\005Menus\022\034"
    "\n\004menu\030\001 \003(\0132\016.rec.slow.Menu", 2988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/commands/Command.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  Commands::default_instance_ = new Commands();
  CommandMapEntry::default_instance_ = new CommandMapEntry();
  CommandMapProto::default_instance_ = new CommandMapProto();
  MenuEntry::default_instance_ = new MenuEntry();
  Menu::default_instance_ = new Menu();
  Menus::default_instance_ = new Menus();
  Command::default_instance_->InitAsDefaultInstance();
  Commands::default_instance_->InitAsDefaultInstance();
  CommandMapEntry::default_instance_->InitAsDefaultInstance();
  CommandMapProto::default_instance_->InitAsDefaultInstance();
  MenuEntry::default_instance_->InitAsDefaultInstance();
  Menu::default_instance_->InitAsDefaultInstance();
  Menus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fcommands_2fCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fcommands_2fCommand_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fcommands_2fCommand_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fcommands_2fCommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Id_descriptor_;
}
bool Command_Id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 42:
    case 43:
    case 45:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 100000:
    case 110000:
    case 220000:
    case 250000:
    case 260000:
    case 380000:
    case 410000:
    case 710000:
    case 930000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Id Command::NONE;
const Command_Id Command::ABOUT_THIS_PROGRAM;
const Command_Id Command::ADD_LOOP_POINT;
const Command_Id Command::AUDIO_PREFERENCES;
const Command_Id Command::CHECK_FOR_UPDATES;
const Command_Id Command::CLEAR_KEYBOARD_MAPPINGS;
const Command_Id Command::CLEAR_MIDI_MAPPINGS;
const Command_Id Command::CLEAR_LOOPS;
const Command_Id Command::CLEAR_NAVIGATOR;
const Command_Id Command::CLEAR_ALL_SETTINGS;
const Command_Id Command::CLEAR_SETTINGS_FOR_THIS_TRACK;
const Command_Id Command::CLEAR_SAVED_FILE_DATA;
const Command_Id Command::CLOSE_FILE;
const Command_Id Command::COPY_ALL_LOOP_POINTS;
const Command_Id Command::DIM_VOLUME_TOGGLE;
const Command_Id Command::EJECT_CDS;
const Command_Id Command::EXPORT_KEYBOARD_MAPPINGS;
const Command_Id Command::EXPORT_MIDI_MAPPINGS;
const Command_Id Command::EXPORT_SETTINGS;
const Command_Id Command::IMPORT_KEYBOARD_MAPPINGS;
const Command_Id Command::IMPORT_MIDI_MAPPINGS;
const Command_Id Command::IMPORT_SETTINGS;
const Command_Id Command::INVERT_LOOP_SELECTION;
const Command_Id Command::JUMP;
const Command_Id Command::JUMP_SELECTED;
const Command_Id Command::KEYBOARD_MAPPINGS;
const Command_Id Command::LOOP_NEXT_SEGMENT;
const Command_Id Command::MIDI_MAPPINGS;
const Command_Id Command::MODE_ADD_LOOP_POINT;
const Command_Id Command::MODE_DRAG;
const Command_Id Command::MODE_SET_TIME;
const Command_Id Command::MODE_ZOOM_IN;
const Command_Id Command::MUTE_VOLUME_TOGGLE;
const Command_Id Command::NUDGE_BACKWARD;
const Command_Id Command::NUDGE_FORWARD;
const Command_Id Command::NUDGE_BEGIN_LEFT;
const Command_Id Command::NUDGE_BEGIN_RIGHT;
const Command_Id Command::NUDGE_END_LEFT;
const Command_Id Command::NUDGE_END_RIGHT;
const Command_Id Command::NUDGE_SPEED_DOWN;
const Command_Id Command::NUDGE_SPEED_UP;
const Command_Id Command::NUDGE_VOLUME_DOWN;
const Command_Id Command::NUDGE_VOLUME_UP;
const Command_Id Command::OPEN;
const Command_Id Command::OPEN_MANUAL;
const Command_Id Command::OPEN_PREVIOUS_FILE;
const Command_Id Command::OPEN_SLOWGOLD_DIRECTORY;
const Command_Id Command::PASTE_OVER_LOOP_POINTS;
const Command_Id Command::RECENT_FILES;
const Command_Id Command::REDO;
const Command_Id Command::REQUEST_SUPPORT;
const Command_Id Command::RESET_GAIN_TO_UNITY;
const Command_Id Command::SAVE_FILE;
const Command_Id Command::SAVE_FILE_SELECTION;
const Command_Id Command::SELECT;
const Command_Id Command::SELECT_ONLY;
const Command_Id Command::SET_LANGUAGE;
const Command_Id Command::SET_SAVE_FORMAT;
const Command_Id Command::SET_SAVE_AS_AIFF;
const Command_Id Command::SET_SAVE_AS_FLAC;
const Command_Id Command::SET_SAVE_AS_OGG;
const Command_Id Command::SET_SAVE_AS_WAV;
const Command_Id Command::TOGGLE_ADVANCED_MENUS;
const Command_Id Command::TOGGLE_AUTOMATIC_UPDATES;
const Command_Id Command::TOGGLE_FOLLOW_CURSOR;
const Command_Id Command::TOGGLE_GRID_DISPLAY;
const Command_Id Command::TOGGLE_COMMAND_BAR_AT_LEFT;
const Command_Id Command::TOGGLE_COMMAND_BAR_AT_TOP;
const Command_Id Command::TOGGLE_FILE_OPEN_TREE_DISPLAY;
const Command_Id Command::TOGGLE_MODES_AT_LEFT;
const Command_Id Command::TOGGLE_MODES_AT_TOP;
const Command_Id Command::TOGGLE_PARALLEL_WAVEFORMS;
const Command_Id Command::TOGGLE_PREFADER_LEVELS;
const Command_Id Command::TOGGLE_SELECTION;
const Command_Id Command::TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP;
const Command_Id Command::TOGGLE_SHOW_CURSOR_LABELS;
const Command_Id Command::TOGGLE_SHOW_HELP_PANE;
const Command_Id Command::TOGGLE_SHOW_LABELS_AT_TOP;
const Command_Id Command::TOGGLE_SHOW_MASTER_TUNE;
const Command_Id Command::TOGGLE_SHOW_SELECTION_BUTTONS;
const Command_Id Command::TOGGLE_SHOW_TIMES_AT_TOP;
const Command_Id Command::TOGGLE_SHOW_TOOLTIPS;
const Command_Id Command::TOGGLE_START_STOP;
const Command_Id Command::TOGGLE_STRETCH_ENABLE;
const Command_Id Command::TOGGLE_TRANSFORM_ENABLE;
const Command_Id Command::TOGGLE_WHOLE_SONG_LOOP;
const Command_Id Command::TREE_CLOSE;
const Command_Id Command::TREE_DOWN;
const Command_Id Command::TREE_LEFT;
const Command_Id Command::TREE_OPEN;
const Command_Id Command::TREE_RIGHT;
const Command_Id Command::TREE_UP;
const Command_Id Command::UNDO;
const Command_Id Command::UNSELECT;
const Command_Id Command::WHATS_NEW_PAGE;
const Command_Id Command::ZOOM_IN;
const Command_Id Command::ZOOM_OUT;
const Command_Id Command::ZOOM_OUT_FULL;
const Command_Id Command::ZOOM_TO_SELECTION;
const Command_Id Command::FIRST_FREE_TYPE;
const Command_Id Command::QUIT;
const Command_Id Command::DEL;
const Command_Id Command::CUT;
const Command_Id Command::COPY;
const Command_Id Command::PASTE;
const Command_Id Command::SELECT_ALL;
const Command_Id Command::DESELECT_ALL;
const Command_Id Command::Id_MIN;
const Command_Id Command::Id_MAX;
const int Command::Id_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kIdFieldNumber;
const int Command::kCommandFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  command_ = const_cast< ::rec::command::Command*>(&::rec::command::Command::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_command()) {
      if (command_ != NULL) command_->::rec::command::Command::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.Command.Id id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::Command_Id_IsValid(value)) {
            set_id(static_cast< ::rec::slow::Command_Id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional .rec.command.Command command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.Command.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.Command.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional .rec.command.Command command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.Command.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional .rec.command.Command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_command()) {
      mutable_command()->::rec::command::Command::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Commands::kCommandFieldNumber;
#endif  // !_MSC_VER

Commands::Commands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands::InitAsDefaultInstance() {
}

Commands::Commands(const Commands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands::~Commands() {
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_descriptor_;
}

const Commands& Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

Commands* Commands::default_instance_ = NULL;

Commands* Commands::New() const {
  return new Commands;
}

void Commands::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.Command command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {

  return true;
}

void Commands::Swap(Commands* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_descriptor_;
  metadata.reflection = Commands_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMapEntry::kIdFieldNumber;
const int CommandMapEntry::kEntryFieldNumber;
#endif  // !_MSC_VER

CommandMapEntry::CommandMapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMapEntry::InitAsDefaultInstance() {
  entry_ = const_cast< ::rec::command::CommandMapEntry*>(&::rec::command::CommandMapEntry::default_instance());
}

CommandMapEntry::CommandMapEntry(const CommandMapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMapEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMapEntry::~CommandMapEntry() {
  SharedDtor();
}

void CommandMapEntry::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
  }
}

void CommandMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMapEntry_descriptor_;
}

const CommandMapEntry& CommandMapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

CommandMapEntry* CommandMapEntry::default_instance_ = NULL;

CommandMapEntry* CommandMapEntry::New() const {
  return new CommandMapEntry;
}

void CommandMapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_entry()) {
      if (entry_ != NULL) entry_->::rec::command::CommandMapEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.slow.Command.Id id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::Command_Id_IsValid(value)) {
            set_id(static_cast< ::rec::slow::Command_Id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }

      // optional .rec.command.CommandMapEntry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.slow.Command.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.slow.Command.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional .rec.command.CommandMapEntry entry = 2;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.slow.Command.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional .rec.command.CommandMapEntry entry = 2;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMapEntry::MergeFrom(const CommandMapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_entry()) {
      mutable_entry()->::rec::command::CommandMapEntry::MergeFrom(from.entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMapEntry::CopyFrom(const CommandMapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMapEntry::IsInitialized() const {

  return true;
}

void CommandMapEntry::Swap(CommandMapEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(entry_, other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMapEntry_descriptor_;
  metadata.reflection = CommandMapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMapProto::kEntryFieldNumber;
#endif  // !_MSC_VER

CommandMapProto::CommandMapProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMapProto::InitAsDefaultInstance() {
}

CommandMapProto::CommandMapProto(const CommandMapProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMapProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMapProto::~CommandMapProto() {
  SharedDtor();
}

void CommandMapProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandMapProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMapProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMapProto_descriptor_;
}

const CommandMapProto& CommandMapProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

CommandMapProto* CommandMapProto::default_instance_ = NULL;

CommandMapProto* CommandMapProto::New() const {
  return new CommandMapProto;
}

void CommandMapProto::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMapProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.CommandMapEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMapProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.CommandMapEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMapProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.CommandMapEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMapProto::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.CommandMapEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMapProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMapProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMapProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMapProto::MergeFrom(const CommandMapProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMapProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMapProto::CopyFrom(const CommandMapProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMapProto::IsInitialized() const {

  return true;
}

void CommandMapProto::Swap(CommandMapProto* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMapProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMapProto_descriptor_;
  metadata.reflection = CommandMapProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuEntry::kIdFieldNumber;
const int MenuEntry::kSubmenuFieldNumber;
const int MenuEntry::kCalloutFunctionFieldNumber;
#endif  // !_MSC_VER

MenuEntry::MenuEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuEntry::InitAsDefaultInstance() {
}

MenuEntry::MenuEntry(const MenuEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuEntry::SharedCtor() {
  _cached_size_ = 0;
  submenu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callout_function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuEntry::~MenuEntry() {
  SharedDtor();
}

void MenuEntry::SharedDtor() {
  if (submenu_ != &::google::protobuf::internal::kEmptyString) {
    delete submenu_;
  }
  if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
    delete callout_function_;
  }
  if (this != default_instance_) {
  }
}

void MenuEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntry_descriptor_;
}

const MenuEntry& MenuEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

MenuEntry* MenuEntry::default_instance_ = NULL;

MenuEntry* MenuEntry::New() const {
  return new MenuEntry;
}

void MenuEntry::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_submenu()) {
      if (submenu_ != &::google::protobuf::internal::kEmptyString) {
        submenu_->clear();
      }
    }
    if (has_callout_function()) {
      if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
        callout_function_->clear();
      }
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.Command.Id id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::slow::Command_Id_IsValid(value)) {
            add_id(static_cast< ::rec::slow::Command_Id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::rec::slow::Command_Id_IsValid,
                 this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_submenu;
        break;
      }

      // optional string submenu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submenu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submenu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->submenu().data(), this->submenu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_callout_function;
        break;
      }

      // optional string callout_function = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callout_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callout_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callout_function().data(), this->callout_function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.Command.Id id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(i), output);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->submenu(), output);
  }

  // optional string callout_function = 3;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->callout_function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.Command.Id id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(i), target);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submenu(), target);
  }

  // optional string callout_function = 3;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->callout_function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string submenu = 2;
    if (has_submenu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->submenu());
    }

    // optional string callout_function = 3;
    if (has_callout_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callout_function());
    }

  }
  // repeated .rec.slow.Command.Id id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuEntry::MergeFrom(const MenuEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_submenu()) {
      set_submenu(from.submenu());
    }
    if (from.has_callout_function()) {
      set_callout_function(from.callout_function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuEntry::CopyFrom(const MenuEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuEntry::IsInitialized() const {

  return true;
}

void MenuEntry::Swap(MenuEntry* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(submenu_, other->submenu_);
    std::swap(callout_function_, other->callout_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuEntry_descriptor_;
  metadata.reflection = MenuEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menu::kDescriptionFieldNumber;
const int Menu::kExtendsFieldNumber;
const int Menu::kEntryFieldNumber;
#endif  // !_MSC_VER

Menu::Menu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Menu::InitAsDefaultInstance() {
  description_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
}

Menu::Menu(const Menu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Menu::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menu::~Menu() {
  SharedDtor();
}

void Menu::SharedDtor() {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    delete extends_;
  }
  if (this != default_instance_) {
    delete description_;
  }
}

void Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menu_descriptor_;
}

const Menu& Menu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

Menu* Menu::default_instance_ = NULL;

Menu* Menu::New() const {
  return new Menu;
}

void Menu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::rec::command::Description::Clear();
    }
    if (has_extends()) {
      if (extends_ != &::google::protobuf::internal::kEmptyString) {
        extends_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extends;
        break;
      }

      // optional string extends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extends().data(), this->extends().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }

      // repeated .rec.slow.MenuEntry entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extends(), output);
  }

  // repeated .rec.slow.MenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Menu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extends(), target);
  }

  // repeated .rec.slow.MenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Menu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

    // optional string extends = 2;
    if (has_extends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extends());
    }

  }
  // repeated .rec.slow.MenuEntry entry = 3;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menu::MergeFrom(const Menu& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::rec::command::Description::MergeFrom(from.description());
    }
    if (from.has_extends()) {
      set_extends(from.extends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menu::CopyFrom(const Menu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menu::IsInitialized() const {

  return true;
}

void Menu::Swap(Menu* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(extends_, other->extends_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menu_descriptor_;
  metadata.reflection = Menu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menus::kMenuFieldNumber;
#endif  // !_MSC_VER

Menus::Menus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Menus::InitAsDefaultInstance() {
}

Menus::Menus(const Menus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Menus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menus::~Menus() {
  SharedDtor();
}

void Menus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Menus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menus_descriptor_;
}

const Menus& Menus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fcommands_2fCommand_2eproto();
  return *default_instance_;
}

Menus* Menus::default_instance_ = NULL;

Menus* Menus::New() const {
  return new Menus;
}

void Menus::Clear() {
  menu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.slow.Menu menu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_menu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_menu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Menus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.slow.Menu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->menu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Menus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.slow.Menu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->menu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Menus::ByteSize() const {
  int total_size = 0;

  // repeated .rec.slow.Menu menu = 1;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->menu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menus::MergeFrom(const Menus& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menus::CopyFrom(const Menus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menus::IsInitialized() const {

  return true;
}

void Menus::Swap(Menus* other) {
  if (other != this) {
    menu_.Swap(&other->menu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menus_descriptor_;
  metadata.reflection = Menus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
