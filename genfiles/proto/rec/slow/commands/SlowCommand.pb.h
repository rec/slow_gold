// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/commands/SlowCommand.proto

#ifndef PROTOBUF_rec_2fslow_2fcommands_2fSlowCommand_2eproto__INCLUDED
#define PROTOBUF_rec_2fslow_2fcommands_2fSlowCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/command/Command.pb.h"
#include "rec/command/map/CommandMap.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

class SlowCommand;
class SlowCommands;
class SlowCommandMapEntry;
class SlowCommandMapProto;
class SlowMenuEntry;
class SlowMenu;
class SlowMenus;

enum SlowCommand_Type {
  SlowCommand_Type_NONE = 0,
  SlowCommand_Type_ABOUT_THIS_PROGRAM = 58,
  SlowCommand_Type_ADD_LOOP_POINT = 1,
  SlowCommand_Type_AUDIO_PREFERENCES = 2,
  SlowCommand_Type_CHECK_FOR_UPDATES = 68,
  SlowCommand_Type_CLEAR_KEYBOARD_MAPPINGS = 91,
  SlowCommand_Type_CLEAR_MIDI_MAPPINGS = 92,
  SlowCommand_Type_CLEAR_LOOPS = 4,
  SlowCommand_Type_CLEAR_NAVIGATOR = 3,
  SlowCommand_Type_CLEAR_ALL_SETTINGS = 79,
  SlowCommand_Type_CLEAR_SETTINGS_FOR_THIS_TRACK = 80,
  SlowCommand_Type_CLEAR_SAVED_FILE_DATA = 5,
  SlowCommand_Type_CLOSE_FILE = 6,
  SlowCommand_Type_COPY_ALL_LOOP_POINTS = 95,
  SlowCommand_Type_DIM_VOLUME_TOGGLE = 7,
  SlowCommand_Type_EJECT_CDS = 8,
  SlowCommand_Type_EXPORT_KEYBOARD_MAPPINGS = 82,
  SlowCommand_Type_EXPORT_MIDI_MAPPINGS = 83,
  SlowCommand_Type_EXPORT_SETTINGS = 75,
  SlowCommand_Type_IMPORT_KEYBOARD_MAPPINGS = 84,
  SlowCommand_Type_IMPORT_MIDI_MAPPINGS = 85,
  SlowCommand_Type_IMPORT_SETTINGS = 76,
  SlowCommand_Type_INVERT_LOOP_SELECTION = 9,
  SlowCommand_Type_JUMP = 100000,
  SlowCommand_Type_JUMP_SELECTED = 110000,
  SlowCommand_Type_KEYBOARD_MAPPINGS = 12,
  SlowCommand_Type_LOOP_NEXT_SEGMENT = 94,
  SlowCommand_Type_MIDI_MAPPINGS = 13,
  SlowCommand_Type_MODE_ADD_LOOP_POINT = 63,
  SlowCommand_Type_MODE_DRAG = 60,
  SlowCommand_Type_MODE_SET_TIME = 61,
  SlowCommand_Type_MODE_ZOOM_IN = 62,
  SlowCommand_Type_MUTE_VOLUME_TOGGLE = 14,
  SlowCommand_Type_NUDGE_BACKWARD = 89,
  SlowCommand_Type_NUDGE_FORWARD = 90,
  SlowCommand_Type_NUDGE_BEGIN_LEFT = 15,
  SlowCommand_Type_NUDGE_BEGIN_RIGHT = 16,
  SlowCommand_Type_NUDGE_END_LEFT = 17,
  SlowCommand_Type_NUDGE_END_RIGHT = 18,
  SlowCommand_Type_NUDGE_SPEED_DOWN = 86,
  SlowCommand_Type_NUDGE_SPEED_UP = 87,
  SlowCommand_Type_NUDGE_VOLUME_DOWN = 19,
  SlowCommand_Type_NUDGE_VOLUME_UP = 20,
  SlowCommand_Type_OPEN = 21,
  SlowCommand_Type_OPEN_MANUAL = 65,
  SlowCommand_Type_OPEN_PREVIOUS_FILE = 78,
  SlowCommand_Type_OPEN_SLOWGOLD_DIRECTORY = 74,
  SlowCommand_Type_PASTE_OVER_LOOP_POINTS = 96,
  SlowCommand_Type_RECENT_FILES = 220000,
  SlowCommand_Type_REDO = 23,
  SlowCommand_Type_REQUEST_SUPPORT = 66,
  SlowCommand_Type_RESET_GAIN_TO_UNITY = 24,
  SlowCommand_Type_SAVE_FILE = 69,
  SlowCommand_Type_SAVE_FILE_SELECTION = 70,
  SlowCommand_Type_SELECT = 250000,
  SlowCommand_Type_SELECT_ONLY = 260000,
  SlowCommand_Type_SET_LANGUAGE = 930000,
  SlowCommand_Type_SET_SAVE_FORMAT = 710000,
  SlowCommand_Type_SET_SAVE_AS_AIFF = 97,
  SlowCommand_Type_SET_SAVE_AS_FLAC = 98,
  SlowCommand_Type_SET_SAVE_AS_OGG = 99,
  SlowCommand_Type_SET_SAVE_AS_WAV = 100,
  SlowCommand_Type_TOGGLE_ADVANCED_MENUS = 59,
  SlowCommand_Type_TOGGLE_AUTOMATIC_UPDATES = 67,
  SlowCommand_Type_TOGGLE_FOLLOW_CURSOR = 43,
  SlowCommand_Type_TOGGLE_GRID_DISPLAY = 27,
  SlowCommand_Type_TOGGLE_COMMAND_BAR_AT_LEFT = 54,
  SlowCommand_Type_TOGGLE_COMMAND_BAR_AT_TOP = 55,
  SlowCommand_Type_TOGGLE_FILE_OPEN_TREE_DISPLAY = 72,
  SlowCommand_Type_TOGGLE_MODES_AT_LEFT = 56,
  SlowCommand_Type_TOGGLE_MODES_AT_TOP = 57,
  SlowCommand_Type_TOGGLE_PARALLEL_WAVEFORMS = 42,
  SlowCommand_Type_TOGGLE_PREFADER_LEVELS = 46,
  SlowCommand_Type_TOGGLE_SELECTION = 410000,
  SlowCommand_Type_TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP = 81,
  SlowCommand_Type_TOGGLE_SHOW_CURSOR_LABELS = 51,
  SlowCommand_Type_TOGGLE_SHOW_HELP_PANE = 49,
  SlowCommand_Type_TOGGLE_SHOW_LABELS_AT_TOP = 52,
  SlowCommand_Type_TOGGLE_SHOW_MASTER_TUNE = 77,
  SlowCommand_Type_TOGGLE_SHOW_SELECTION_BUTTONS = 50,
  SlowCommand_Type_TOGGLE_SHOW_TIMES_AT_TOP = 53,
  SlowCommand_Type_TOGGLE_SHOW_TOOLTIPS = 48,
  SlowCommand_Type_TOGGLE_START_STOP = 28,
  SlowCommand_Type_TOGGLE_STRETCH_ENABLE = 29,
  SlowCommand_Type_TOGGLE_TRANSFORM_ENABLE = 88,
  SlowCommand_Type_TOGGLE_WHOLE_SONG_LOOP = 30,
  SlowCommand_Type_TREE_CLOSE = 31,
  SlowCommand_Type_TREE_DOWN = 32,
  SlowCommand_Type_TREE_LEFT = 33,
  SlowCommand_Type_TREE_OPEN = 34,
  SlowCommand_Type_TREE_RIGHT = 35,
  SlowCommand_Type_TREE_UP = 36,
  SlowCommand_Type_UNDO = 37,
  SlowCommand_Type_UNSELECT = 380000,
  SlowCommand_Type_WHATS_NEW_PAGE = 73,
  SlowCommand_Type_ZOOM_IN = 39,
  SlowCommand_Type_ZOOM_OUT = 40,
  SlowCommand_Type_ZOOM_OUT_FULL = 64,
  SlowCommand_Type_ZOOM_TO_SELECTION = 45,
  SlowCommand_Type_FIRST_FREE_TYPE = 101,
  SlowCommand_Type_QUIT = 4097,
  SlowCommand_Type_DEL = 4098,
  SlowCommand_Type_CUT = 4099,
  SlowCommand_Type_COPY = 4100,
  SlowCommand_Type_PASTE = 4101,
  SlowCommand_Type_SELECT_ALL = 4102,
  SlowCommand_Type_DESELECT_ALL = 4103
};
bool SlowCommand_Type_IsValid(int value);
const SlowCommand_Type SlowCommand_Type_Type_MIN = SlowCommand_Type_NONE;
const SlowCommand_Type SlowCommand_Type_Type_MAX = SlowCommand_Type_SET_LANGUAGE;
const int SlowCommand_Type_Type_ARRAYSIZE = SlowCommand_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SlowCommand_Type_descriptor();
inline const ::std::string& SlowCommand_Type_Name(SlowCommand_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SlowCommand_Type_descriptor(), value);
}
inline bool SlowCommand_Type_Parse(
    const ::std::string& name, SlowCommand_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SlowCommand_Type>(
    SlowCommand_Type_descriptor(), name, value);
}
// ===================================================================

class SlowCommand : public ::google::protobuf::Message {
 public:
  SlowCommand();
  virtual ~SlowCommand();

  SlowCommand(const SlowCommand& from);

  inline SlowCommand& operator=(const SlowCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowCommand& default_instance();

  void Swap(SlowCommand* other);

  // implements Message ----------------------------------------------

  SlowCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowCommand& from);
  void MergeFrom(const SlowCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SlowCommand_Type Type;
  static const Type NONE = SlowCommand_Type_NONE;
  static const Type ABOUT_THIS_PROGRAM = SlowCommand_Type_ABOUT_THIS_PROGRAM;
  static const Type ADD_LOOP_POINT = SlowCommand_Type_ADD_LOOP_POINT;
  static const Type AUDIO_PREFERENCES = SlowCommand_Type_AUDIO_PREFERENCES;
  static const Type CHECK_FOR_UPDATES = SlowCommand_Type_CHECK_FOR_UPDATES;
  static const Type CLEAR_KEYBOARD_MAPPINGS = SlowCommand_Type_CLEAR_KEYBOARD_MAPPINGS;
  static const Type CLEAR_MIDI_MAPPINGS = SlowCommand_Type_CLEAR_MIDI_MAPPINGS;
  static const Type CLEAR_LOOPS = SlowCommand_Type_CLEAR_LOOPS;
  static const Type CLEAR_NAVIGATOR = SlowCommand_Type_CLEAR_NAVIGATOR;
  static const Type CLEAR_ALL_SETTINGS = SlowCommand_Type_CLEAR_ALL_SETTINGS;
  static const Type CLEAR_SETTINGS_FOR_THIS_TRACK = SlowCommand_Type_CLEAR_SETTINGS_FOR_THIS_TRACK;
  static const Type CLEAR_SAVED_FILE_DATA = SlowCommand_Type_CLEAR_SAVED_FILE_DATA;
  static const Type CLOSE_FILE = SlowCommand_Type_CLOSE_FILE;
  static const Type COPY_ALL_LOOP_POINTS = SlowCommand_Type_COPY_ALL_LOOP_POINTS;
  static const Type DIM_VOLUME_TOGGLE = SlowCommand_Type_DIM_VOLUME_TOGGLE;
  static const Type EJECT_CDS = SlowCommand_Type_EJECT_CDS;
  static const Type EXPORT_KEYBOARD_MAPPINGS = SlowCommand_Type_EXPORT_KEYBOARD_MAPPINGS;
  static const Type EXPORT_MIDI_MAPPINGS = SlowCommand_Type_EXPORT_MIDI_MAPPINGS;
  static const Type EXPORT_SETTINGS = SlowCommand_Type_EXPORT_SETTINGS;
  static const Type IMPORT_KEYBOARD_MAPPINGS = SlowCommand_Type_IMPORT_KEYBOARD_MAPPINGS;
  static const Type IMPORT_MIDI_MAPPINGS = SlowCommand_Type_IMPORT_MIDI_MAPPINGS;
  static const Type IMPORT_SETTINGS = SlowCommand_Type_IMPORT_SETTINGS;
  static const Type INVERT_LOOP_SELECTION = SlowCommand_Type_INVERT_LOOP_SELECTION;
  static const Type JUMP = SlowCommand_Type_JUMP;
  static const Type JUMP_SELECTED = SlowCommand_Type_JUMP_SELECTED;
  static const Type KEYBOARD_MAPPINGS = SlowCommand_Type_KEYBOARD_MAPPINGS;
  static const Type LOOP_NEXT_SEGMENT = SlowCommand_Type_LOOP_NEXT_SEGMENT;
  static const Type MIDI_MAPPINGS = SlowCommand_Type_MIDI_MAPPINGS;
  static const Type MODE_ADD_LOOP_POINT = SlowCommand_Type_MODE_ADD_LOOP_POINT;
  static const Type MODE_DRAG = SlowCommand_Type_MODE_DRAG;
  static const Type MODE_SET_TIME = SlowCommand_Type_MODE_SET_TIME;
  static const Type MODE_ZOOM_IN = SlowCommand_Type_MODE_ZOOM_IN;
  static const Type MUTE_VOLUME_TOGGLE = SlowCommand_Type_MUTE_VOLUME_TOGGLE;
  static const Type NUDGE_BACKWARD = SlowCommand_Type_NUDGE_BACKWARD;
  static const Type NUDGE_FORWARD = SlowCommand_Type_NUDGE_FORWARD;
  static const Type NUDGE_BEGIN_LEFT = SlowCommand_Type_NUDGE_BEGIN_LEFT;
  static const Type NUDGE_BEGIN_RIGHT = SlowCommand_Type_NUDGE_BEGIN_RIGHT;
  static const Type NUDGE_END_LEFT = SlowCommand_Type_NUDGE_END_LEFT;
  static const Type NUDGE_END_RIGHT = SlowCommand_Type_NUDGE_END_RIGHT;
  static const Type NUDGE_SPEED_DOWN = SlowCommand_Type_NUDGE_SPEED_DOWN;
  static const Type NUDGE_SPEED_UP = SlowCommand_Type_NUDGE_SPEED_UP;
  static const Type NUDGE_VOLUME_DOWN = SlowCommand_Type_NUDGE_VOLUME_DOWN;
  static const Type NUDGE_VOLUME_UP = SlowCommand_Type_NUDGE_VOLUME_UP;
  static const Type OPEN = SlowCommand_Type_OPEN;
  static const Type OPEN_MANUAL = SlowCommand_Type_OPEN_MANUAL;
  static const Type OPEN_PREVIOUS_FILE = SlowCommand_Type_OPEN_PREVIOUS_FILE;
  static const Type OPEN_SLOWGOLD_DIRECTORY = SlowCommand_Type_OPEN_SLOWGOLD_DIRECTORY;
  static const Type PASTE_OVER_LOOP_POINTS = SlowCommand_Type_PASTE_OVER_LOOP_POINTS;
  static const Type RECENT_FILES = SlowCommand_Type_RECENT_FILES;
  static const Type REDO = SlowCommand_Type_REDO;
  static const Type REQUEST_SUPPORT = SlowCommand_Type_REQUEST_SUPPORT;
  static const Type RESET_GAIN_TO_UNITY = SlowCommand_Type_RESET_GAIN_TO_UNITY;
  static const Type SAVE_FILE = SlowCommand_Type_SAVE_FILE;
  static const Type SAVE_FILE_SELECTION = SlowCommand_Type_SAVE_FILE_SELECTION;
  static const Type SELECT = SlowCommand_Type_SELECT;
  static const Type SELECT_ONLY = SlowCommand_Type_SELECT_ONLY;
  static const Type SET_LANGUAGE = SlowCommand_Type_SET_LANGUAGE;
  static const Type SET_SAVE_FORMAT = SlowCommand_Type_SET_SAVE_FORMAT;
  static const Type SET_SAVE_AS_AIFF = SlowCommand_Type_SET_SAVE_AS_AIFF;
  static const Type SET_SAVE_AS_FLAC = SlowCommand_Type_SET_SAVE_AS_FLAC;
  static const Type SET_SAVE_AS_OGG = SlowCommand_Type_SET_SAVE_AS_OGG;
  static const Type SET_SAVE_AS_WAV = SlowCommand_Type_SET_SAVE_AS_WAV;
  static const Type TOGGLE_ADVANCED_MENUS = SlowCommand_Type_TOGGLE_ADVANCED_MENUS;
  static const Type TOGGLE_AUTOMATIC_UPDATES = SlowCommand_Type_TOGGLE_AUTOMATIC_UPDATES;
  static const Type TOGGLE_FOLLOW_CURSOR = SlowCommand_Type_TOGGLE_FOLLOW_CURSOR;
  static const Type TOGGLE_GRID_DISPLAY = SlowCommand_Type_TOGGLE_GRID_DISPLAY;
  static const Type TOGGLE_COMMAND_BAR_AT_LEFT = SlowCommand_Type_TOGGLE_COMMAND_BAR_AT_LEFT;
  static const Type TOGGLE_COMMAND_BAR_AT_TOP = SlowCommand_Type_TOGGLE_COMMAND_BAR_AT_TOP;
  static const Type TOGGLE_FILE_OPEN_TREE_DISPLAY = SlowCommand_Type_TOGGLE_FILE_OPEN_TREE_DISPLAY;
  static const Type TOGGLE_MODES_AT_LEFT = SlowCommand_Type_TOGGLE_MODES_AT_LEFT;
  static const Type TOGGLE_MODES_AT_TOP = SlowCommand_Type_TOGGLE_MODES_AT_TOP;
  static const Type TOGGLE_PARALLEL_WAVEFORMS = SlowCommand_Type_TOGGLE_PARALLEL_WAVEFORMS;
  static const Type TOGGLE_PREFADER_LEVELS = SlowCommand_Type_TOGGLE_PREFADER_LEVELS;
  static const Type TOGGLE_SELECTION = SlowCommand_Type_TOGGLE_SELECTION;
  static const Type TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP = SlowCommand_Type_TOGGLE_SHOW_ABOUT_WINDOW_AT_STARTUP;
  static const Type TOGGLE_SHOW_CURSOR_LABELS = SlowCommand_Type_TOGGLE_SHOW_CURSOR_LABELS;
  static const Type TOGGLE_SHOW_HELP_PANE = SlowCommand_Type_TOGGLE_SHOW_HELP_PANE;
  static const Type TOGGLE_SHOW_LABELS_AT_TOP = SlowCommand_Type_TOGGLE_SHOW_LABELS_AT_TOP;
  static const Type TOGGLE_SHOW_MASTER_TUNE = SlowCommand_Type_TOGGLE_SHOW_MASTER_TUNE;
  static const Type TOGGLE_SHOW_SELECTION_BUTTONS = SlowCommand_Type_TOGGLE_SHOW_SELECTION_BUTTONS;
  static const Type TOGGLE_SHOW_TIMES_AT_TOP = SlowCommand_Type_TOGGLE_SHOW_TIMES_AT_TOP;
  static const Type TOGGLE_SHOW_TOOLTIPS = SlowCommand_Type_TOGGLE_SHOW_TOOLTIPS;
  static const Type TOGGLE_START_STOP = SlowCommand_Type_TOGGLE_START_STOP;
  static const Type TOGGLE_STRETCH_ENABLE = SlowCommand_Type_TOGGLE_STRETCH_ENABLE;
  static const Type TOGGLE_TRANSFORM_ENABLE = SlowCommand_Type_TOGGLE_TRANSFORM_ENABLE;
  static const Type TOGGLE_WHOLE_SONG_LOOP = SlowCommand_Type_TOGGLE_WHOLE_SONG_LOOP;
  static const Type TREE_CLOSE = SlowCommand_Type_TREE_CLOSE;
  static const Type TREE_DOWN = SlowCommand_Type_TREE_DOWN;
  static const Type TREE_LEFT = SlowCommand_Type_TREE_LEFT;
  static const Type TREE_OPEN = SlowCommand_Type_TREE_OPEN;
  static const Type TREE_RIGHT = SlowCommand_Type_TREE_RIGHT;
  static const Type TREE_UP = SlowCommand_Type_TREE_UP;
  static const Type UNDO = SlowCommand_Type_UNDO;
  static const Type UNSELECT = SlowCommand_Type_UNSELECT;
  static const Type WHATS_NEW_PAGE = SlowCommand_Type_WHATS_NEW_PAGE;
  static const Type ZOOM_IN = SlowCommand_Type_ZOOM_IN;
  static const Type ZOOM_OUT = SlowCommand_Type_ZOOM_OUT;
  static const Type ZOOM_OUT_FULL = SlowCommand_Type_ZOOM_OUT_FULL;
  static const Type ZOOM_TO_SELECTION = SlowCommand_Type_ZOOM_TO_SELECTION;
  static const Type FIRST_FREE_TYPE = SlowCommand_Type_FIRST_FREE_TYPE;
  static const Type QUIT = SlowCommand_Type_QUIT;
  static const Type DEL = SlowCommand_Type_DEL;
  static const Type CUT = SlowCommand_Type_CUT;
  static const Type COPY = SlowCommand_Type_COPY;
  static const Type PASTE = SlowCommand_Type_PASTE;
  static const Type SELECT_ALL = SlowCommand_Type_SELECT_ALL;
  static const Type DESELECT_ALL = SlowCommand_Type_DESELECT_ALL;
  static inline bool Type_IsValid(int value) {
    return SlowCommand_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SlowCommand_Type_Type_MIN;
  static const Type Type_MAX =
    SlowCommand_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SlowCommand_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SlowCommand_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SlowCommand_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SlowCommand_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rec.slow.SlowCommand.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rec::slow::SlowCommand_Type type() const;
  inline void set_type(::rec::slow::SlowCommand_Type value);

  // optional .rec.command.Command command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::rec::command::Command& command() const;
  inline ::rec::command::Command* mutable_command();
  inline ::rec::command::Command* release_command();
  inline void set_allocated_command(::rec::command::Command* command);

  // @@protoc_insertion_point(class_scope:rec.slow.SlowCommand)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::command::Command* command_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowCommand* default_instance_;
};
// -------------------------------------------------------------------

class SlowCommands : public ::google::protobuf::Message {
 public:
  SlowCommands();
  virtual ~SlowCommands();

  SlowCommands(const SlowCommands& from);

  inline SlowCommands& operator=(const SlowCommands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowCommands& default_instance();

  void Swap(SlowCommands* other);

  // implements Message ----------------------------------------------

  SlowCommands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowCommands& from);
  void MergeFrom(const SlowCommands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.slow.SlowCommand slow_command = 1;
  inline int slow_command_size() const;
  inline void clear_slow_command();
  static const int kSlowCommandFieldNumber = 1;
  inline const ::rec::slow::SlowCommand& slow_command(int index) const;
  inline ::rec::slow::SlowCommand* mutable_slow_command(int index);
  inline ::rec::slow::SlowCommand* add_slow_command();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommand >&
      slow_command() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommand >*
      mutable_slow_command();

  // @@protoc_insertion_point(class_scope:rec.slow.SlowCommands)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommand > slow_command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowCommands* default_instance_;
};
// -------------------------------------------------------------------

class SlowCommandMapEntry : public ::google::protobuf::Message {
 public:
  SlowCommandMapEntry();
  virtual ~SlowCommandMapEntry();

  SlowCommandMapEntry(const SlowCommandMapEntry& from);

  inline SlowCommandMapEntry& operator=(const SlowCommandMapEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowCommandMapEntry& default_instance();

  void Swap(SlowCommandMapEntry* other);

  // implements Message ----------------------------------------------

  SlowCommandMapEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowCommandMapEntry& from);
  void MergeFrom(const SlowCommandMapEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rec.slow.SlowCommand.Type command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::rec::slow::SlowCommand_Type command() const;
  inline void set_command(::rec::slow::SlowCommand_Type value);

  // optional .rec.command.CommandMapEntry entry = 2;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::rec::command::CommandMapEntry& entry() const;
  inline ::rec::command::CommandMapEntry* mutable_entry();
  inline ::rec::command::CommandMapEntry* release_entry();
  inline void set_allocated_entry(::rec::command::CommandMapEntry* entry);

  // @@protoc_insertion_point(class_scope:rec.slow.SlowCommandMapEntry)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_entry();
  inline void clear_has_entry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::command::CommandMapEntry* entry_;
  int command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowCommandMapEntry* default_instance_;
};
// -------------------------------------------------------------------

class SlowCommandMapProto : public ::google::protobuf::Message {
 public:
  SlowCommandMapProto();
  virtual ~SlowCommandMapProto();

  SlowCommandMapProto(const SlowCommandMapProto& from);

  inline SlowCommandMapProto& operator=(const SlowCommandMapProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowCommandMapProto& default_instance();

  void Swap(SlowCommandMapProto* other);

  // implements Message ----------------------------------------------

  SlowCommandMapProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowCommandMapProto& from);
  void MergeFrom(const SlowCommandMapProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
  inline int slow_entry_size() const;
  inline void clear_slow_entry();
  static const int kSlowEntryFieldNumber = 1;
  inline const ::rec::slow::SlowCommandMapEntry& slow_entry(int index) const;
  inline ::rec::slow::SlowCommandMapEntry* mutable_slow_entry(int index);
  inline ::rec::slow::SlowCommandMapEntry* add_slow_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommandMapEntry >&
      slow_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommandMapEntry >*
      mutable_slow_entry();

  // @@protoc_insertion_point(class_scope:rec.slow.SlowCommandMapProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommandMapEntry > slow_entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowCommandMapProto* default_instance_;
};
// -------------------------------------------------------------------

class SlowMenuEntry : public ::google::protobuf::Message {
 public:
  SlowMenuEntry();
  virtual ~SlowMenuEntry();

  SlowMenuEntry(const SlowMenuEntry& from);

  inline SlowMenuEntry& operator=(const SlowMenuEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowMenuEntry& default_instance();

  void Swap(SlowMenuEntry* other);

  // implements Message ----------------------------------------------

  SlowMenuEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowMenuEntry& from);
  void MergeFrom(const SlowMenuEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.slow.SlowCommand.Type command = 1;
  inline int command_size() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::rec::slow::SlowCommand_Type command(int index) const;
  inline void set_command(int index, ::rec::slow::SlowCommand_Type value);
  inline void add_command(::rec::slow::SlowCommand_Type value);
  inline const ::google::protobuf::RepeatedField<int>& command() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_command();

  // optional string submenu = 2;
  inline bool has_submenu() const;
  inline void clear_submenu();
  static const int kSubmenuFieldNumber = 2;
  inline const ::std::string& submenu() const;
  inline void set_submenu(const ::std::string& value);
  inline void set_submenu(const char* value);
  inline void set_submenu(const char* value, size_t size);
  inline ::std::string* mutable_submenu();
  inline ::std::string* release_submenu();
  inline void set_allocated_submenu(::std::string* submenu);

  // optional bool is_recent_files_menu = 3;
  inline bool has_is_recent_files_menu() const;
  inline void clear_is_recent_files_menu();
  static const int kIsRecentFilesMenuFieldNumber = 3;
  inline bool is_recent_files_menu() const;
  inline void set_is_recent_files_menu(bool value);

  // optional string callout_function = 4;
  inline bool has_callout_function() const;
  inline void clear_callout_function();
  static const int kCalloutFunctionFieldNumber = 4;
  inline const ::std::string& callout_function() const;
  inline void set_callout_function(const ::std::string& value);
  inline void set_callout_function(const char* value);
  inline void set_callout_function(const char* value, size_t size);
  inline ::std::string* mutable_callout_function();
  inline ::std::string* release_callout_function();
  inline void set_allocated_callout_function(::std::string* callout_function);

  // @@protoc_insertion_point(class_scope:rec.slow.SlowMenuEntry)
 private:
  inline void set_has_submenu();
  inline void clear_has_submenu();
  inline void set_has_is_recent_files_menu();
  inline void clear_has_is_recent_files_menu();
  inline void set_has_callout_function();
  inline void clear_has_callout_function();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> command_;
  ::std::string* submenu_;
  ::std::string* callout_function_;
  bool is_recent_files_menu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowMenuEntry* default_instance_;
};
// -------------------------------------------------------------------

class SlowMenu : public ::google::protobuf::Message {
 public:
  SlowMenu();
  virtual ~SlowMenu();

  SlowMenu(const SlowMenu& from);

  inline SlowMenu& operator=(const SlowMenu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowMenu& default_instance();

  void Swap(SlowMenu* other);

  // implements Message ----------------------------------------------

  SlowMenu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowMenu& from);
  void MergeFrom(const SlowMenu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rec.command.Description description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::rec::command::Description& description() const;
  inline ::rec::command::Description* mutable_description();
  inline ::rec::command::Description* release_description();
  inline void set_allocated_description(::rec::command::Description* description);

  // optional string extends = 2;
  inline bool has_extends() const;
  inline void clear_extends();
  static const int kExtendsFieldNumber = 2;
  inline const ::std::string& extends() const;
  inline void set_extends(const ::std::string& value);
  inline void set_extends(const char* value);
  inline void set_extends(const char* value, size_t size);
  inline ::std::string* mutable_extends();
  inline ::std::string* release_extends();
  inline void set_allocated_extends(::std::string* extends);

  // repeated .rec.slow.SlowMenuEntry entry = 3;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 3;
  inline const ::rec::slow::SlowMenuEntry& entry(int index) const;
  inline ::rec::slow::SlowMenuEntry* mutable_entry(int index);
  inline ::rec::slow::SlowMenuEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenuEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenuEntry >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:rec.slow.SlowMenu)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_extends();
  inline void clear_has_extends();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::command::Description* description_;
  ::std::string* extends_;
  ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenuEntry > entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowMenu* default_instance_;
};
// -------------------------------------------------------------------

class SlowMenus : public ::google::protobuf::Message {
 public:
  SlowMenus();
  virtual ~SlowMenus();

  SlowMenus(const SlowMenus& from);

  inline SlowMenus& operator=(const SlowMenus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlowMenus& default_instance();

  void Swap(SlowMenus* other);

  // implements Message ----------------------------------------------

  SlowMenus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlowMenus& from);
  void MergeFrom(const SlowMenus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.slow.SlowMenu menu = 1;
  inline int menu_size() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 1;
  inline const ::rec::slow::SlowMenu& menu(int index) const;
  inline ::rec::slow::SlowMenu* mutable_menu(int index);
  inline ::rec::slow::SlowMenu* add_menu();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenu >&
      menu() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenu >*
      mutable_menu();

  // @@protoc_insertion_point(class_scope:rec.slow.SlowMenus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenu > menu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fcommands_2fSlowCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fcommands_2fSlowCommand_2eproto();

  void InitAsDefaultInstance();
  static SlowMenus* default_instance_;
};
// ===================================================================


// ===================================================================

// SlowCommand

// optional .rec.slow.SlowCommand.Type type = 1;
inline bool SlowCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlowCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlowCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlowCommand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rec::slow::SlowCommand_Type SlowCommand::type() const {
  return static_cast< ::rec::slow::SlowCommand_Type >(type_);
}
inline void SlowCommand::set_type(::rec::slow::SlowCommand_Type value) {
  assert(::rec::slow::SlowCommand_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .rec.command.Command command = 2;
inline bool SlowCommand::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlowCommand::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlowCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlowCommand::clear_command() {
  if (command_ != NULL) command_->::rec::command::Command::Clear();
  clear_has_command();
}
inline const ::rec::command::Command& SlowCommand::command() const {
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
inline ::rec::command::Command* SlowCommand::mutable_command() {
  set_has_command();
  if (command_ == NULL) command_ = new ::rec::command::Command;
  return command_;
}
inline ::rec::command::Command* SlowCommand::release_command() {
  clear_has_command();
  ::rec::command::Command* temp = command_;
  command_ = NULL;
  return temp;
}
inline void SlowCommand::set_allocated_command(::rec::command::Command* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
}

// -------------------------------------------------------------------

// SlowCommands

// repeated .rec.slow.SlowCommand slow_command = 1;
inline int SlowCommands::slow_command_size() const {
  return slow_command_.size();
}
inline void SlowCommands::clear_slow_command() {
  slow_command_.Clear();
}
inline const ::rec::slow::SlowCommand& SlowCommands::slow_command(int index) const {
  return slow_command_.Get(index);
}
inline ::rec::slow::SlowCommand* SlowCommands::mutable_slow_command(int index) {
  return slow_command_.Mutable(index);
}
inline ::rec::slow::SlowCommand* SlowCommands::add_slow_command() {
  return slow_command_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommand >&
SlowCommands::slow_command() const {
  return slow_command_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommand >*
SlowCommands::mutable_slow_command() {
  return &slow_command_;
}

// -------------------------------------------------------------------

// SlowCommandMapEntry

// optional .rec.slow.SlowCommand.Type command = 1;
inline bool SlowCommandMapEntry::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlowCommandMapEntry::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlowCommandMapEntry::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlowCommandMapEntry::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::rec::slow::SlowCommand_Type SlowCommandMapEntry::command() const {
  return static_cast< ::rec::slow::SlowCommand_Type >(command_);
}
inline void SlowCommandMapEntry::set_command(::rec::slow::SlowCommand_Type value) {
  assert(::rec::slow::SlowCommand_Type_IsValid(value));
  set_has_command();
  command_ = value;
}

// optional .rec.command.CommandMapEntry entry = 2;
inline bool SlowCommandMapEntry::has_entry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlowCommandMapEntry::set_has_entry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlowCommandMapEntry::clear_has_entry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlowCommandMapEntry::clear_entry() {
  if (entry_ != NULL) entry_->::rec::command::CommandMapEntry::Clear();
  clear_has_entry();
}
inline const ::rec::command::CommandMapEntry& SlowCommandMapEntry::entry() const {
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
inline ::rec::command::CommandMapEntry* SlowCommandMapEntry::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) entry_ = new ::rec::command::CommandMapEntry;
  return entry_;
}
inline ::rec::command::CommandMapEntry* SlowCommandMapEntry::release_entry() {
  clear_has_entry();
  ::rec::command::CommandMapEntry* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline void SlowCommandMapEntry::set_allocated_entry(::rec::command::CommandMapEntry* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
}

// -------------------------------------------------------------------

// SlowCommandMapProto

// repeated .rec.slow.SlowCommandMapEntry slow_entry = 1;
inline int SlowCommandMapProto::slow_entry_size() const {
  return slow_entry_.size();
}
inline void SlowCommandMapProto::clear_slow_entry() {
  slow_entry_.Clear();
}
inline const ::rec::slow::SlowCommandMapEntry& SlowCommandMapProto::slow_entry(int index) const {
  return slow_entry_.Get(index);
}
inline ::rec::slow::SlowCommandMapEntry* SlowCommandMapProto::mutable_slow_entry(int index) {
  return slow_entry_.Mutable(index);
}
inline ::rec::slow::SlowCommandMapEntry* SlowCommandMapProto::add_slow_entry() {
  return slow_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommandMapEntry >&
SlowCommandMapProto::slow_entry() const {
  return slow_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowCommandMapEntry >*
SlowCommandMapProto::mutable_slow_entry() {
  return &slow_entry_;
}

// -------------------------------------------------------------------

// SlowMenuEntry

// repeated .rec.slow.SlowCommand.Type command = 1;
inline int SlowMenuEntry::command_size() const {
  return command_.size();
}
inline void SlowMenuEntry::clear_command() {
  command_.Clear();
}
inline ::rec::slow::SlowCommand_Type SlowMenuEntry::command(int index) const {
  return static_cast< ::rec::slow::SlowCommand_Type >(command_.Get(index));
}
inline void SlowMenuEntry::set_command(int index, ::rec::slow::SlowCommand_Type value) {
  assert(::rec::slow::SlowCommand_Type_IsValid(value));
  command_.Set(index, value);
}
inline void SlowMenuEntry::add_command(::rec::slow::SlowCommand_Type value) {
  assert(::rec::slow::SlowCommand_Type_IsValid(value));
  command_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
SlowMenuEntry::command() const {
  return command_;
}
inline ::google::protobuf::RepeatedField<int>*
SlowMenuEntry::mutable_command() {
  return &command_;
}

// optional string submenu = 2;
inline bool SlowMenuEntry::has_submenu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlowMenuEntry::set_has_submenu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlowMenuEntry::clear_has_submenu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlowMenuEntry::clear_submenu() {
  if (submenu_ != &::google::protobuf::internal::kEmptyString) {
    submenu_->clear();
  }
  clear_has_submenu();
}
inline const ::std::string& SlowMenuEntry::submenu() const {
  return *submenu_;
}
inline void SlowMenuEntry::set_submenu(const ::std::string& value) {
  set_has_submenu();
  if (submenu_ == &::google::protobuf::internal::kEmptyString) {
    submenu_ = new ::std::string;
  }
  submenu_->assign(value);
}
inline void SlowMenuEntry::set_submenu(const char* value) {
  set_has_submenu();
  if (submenu_ == &::google::protobuf::internal::kEmptyString) {
    submenu_ = new ::std::string;
  }
  submenu_->assign(value);
}
inline void SlowMenuEntry::set_submenu(const char* value, size_t size) {
  set_has_submenu();
  if (submenu_ == &::google::protobuf::internal::kEmptyString) {
    submenu_ = new ::std::string;
  }
  submenu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlowMenuEntry::mutable_submenu() {
  set_has_submenu();
  if (submenu_ == &::google::protobuf::internal::kEmptyString) {
    submenu_ = new ::std::string;
  }
  return submenu_;
}
inline ::std::string* SlowMenuEntry::release_submenu() {
  clear_has_submenu();
  if (submenu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = submenu_;
    submenu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlowMenuEntry::set_allocated_submenu(::std::string* submenu) {
  if (submenu_ != &::google::protobuf::internal::kEmptyString) {
    delete submenu_;
  }
  if (submenu) {
    set_has_submenu();
    submenu_ = submenu;
  } else {
    clear_has_submenu();
    submenu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_recent_files_menu = 3;
inline bool SlowMenuEntry::has_is_recent_files_menu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SlowMenuEntry::set_has_is_recent_files_menu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SlowMenuEntry::clear_has_is_recent_files_menu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SlowMenuEntry::clear_is_recent_files_menu() {
  is_recent_files_menu_ = false;
  clear_has_is_recent_files_menu();
}
inline bool SlowMenuEntry::is_recent_files_menu() const {
  return is_recent_files_menu_;
}
inline void SlowMenuEntry::set_is_recent_files_menu(bool value) {
  set_has_is_recent_files_menu();
  is_recent_files_menu_ = value;
}

// optional string callout_function = 4;
inline bool SlowMenuEntry::has_callout_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SlowMenuEntry::set_has_callout_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SlowMenuEntry::clear_has_callout_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SlowMenuEntry::clear_callout_function() {
  if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
    callout_function_->clear();
  }
  clear_has_callout_function();
}
inline const ::std::string& SlowMenuEntry::callout_function() const {
  return *callout_function_;
}
inline void SlowMenuEntry::set_callout_function(const ::std::string& value) {
  set_has_callout_function();
  if (callout_function_ == &::google::protobuf::internal::kEmptyString) {
    callout_function_ = new ::std::string;
  }
  callout_function_->assign(value);
}
inline void SlowMenuEntry::set_callout_function(const char* value) {
  set_has_callout_function();
  if (callout_function_ == &::google::protobuf::internal::kEmptyString) {
    callout_function_ = new ::std::string;
  }
  callout_function_->assign(value);
}
inline void SlowMenuEntry::set_callout_function(const char* value, size_t size) {
  set_has_callout_function();
  if (callout_function_ == &::google::protobuf::internal::kEmptyString) {
    callout_function_ = new ::std::string;
  }
  callout_function_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlowMenuEntry::mutable_callout_function() {
  set_has_callout_function();
  if (callout_function_ == &::google::protobuf::internal::kEmptyString) {
    callout_function_ = new ::std::string;
  }
  return callout_function_;
}
inline ::std::string* SlowMenuEntry::release_callout_function() {
  clear_has_callout_function();
  if (callout_function_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = callout_function_;
    callout_function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlowMenuEntry::set_allocated_callout_function(::std::string* callout_function) {
  if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
    delete callout_function_;
  }
  if (callout_function) {
    set_has_callout_function();
    callout_function_ = callout_function;
  } else {
    clear_has_callout_function();
    callout_function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SlowMenu

// optional .rec.command.Description description = 1;
inline bool SlowMenu::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlowMenu::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlowMenu::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlowMenu::clear_description() {
  if (description_ != NULL) description_->::rec::command::Description::Clear();
  clear_has_description();
}
inline const ::rec::command::Description& SlowMenu::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::rec::command::Description* SlowMenu::mutable_description() {
  set_has_description();
  if (description_ == NULL) description_ = new ::rec::command::Description;
  return description_;
}
inline ::rec::command::Description* SlowMenu::release_description() {
  clear_has_description();
  ::rec::command::Description* temp = description_;
  description_ = NULL;
  return temp;
}
inline void SlowMenu::set_allocated_description(::rec::command::Description* description) {
  delete description_;
  description_ = description;
  if (description) {
    set_has_description();
  } else {
    clear_has_description();
  }
}

// optional string extends = 2;
inline bool SlowMenu::has_extends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlowMenu::set_has_extends() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlowMenu::clear_has_extends() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlowMenu::clear_extends() {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    extends_->clear();
  }
  clear_has_extends();
}
inline const ::std::string& SlowMenu::extends() const {
  return *extends_;
}
inline void SlowMenu::set_extends(const ::std::string& value) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(value);
}
inline void SlowMenu::set_extends(const char* value) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(value);
}
inline void SlowMenu::set_extends(const char* value, size_t size) {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  extends_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SlowMenu::mutable_extends() {
  set_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    extends_ = new ::std::string;
  }
  return extends_;
}
inline ::std::string* SlowMenu::release_extends() {
  clear_has_extends();
  if (extends_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extends_;
    extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SlowMenu::set_allocated_extends(::std::string* extends) {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    delete extends_;
  }
  if (extends) {
    set_has_extends();
    extends_ = extends;
  } else {
    clear_has_extends();
    extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .rec.slow.SlowMenuEntry entry = 3;
inline int SlowMenu::entry_size() const {
  return entry_.size();
}
inline void SlowMenu::clear_entry() {
  entry_.Clear();
}
inline const ::rec::slow::SlowMenuEntry& SlowMenu::entry(int index) const {
  return entry_.Get(index);
}
inline ::rec::slow::SlowMenuEntry* SlowMenu::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::rec::slow::SlowMenuEntry* SlowMenu::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenuEntry >&
SlowMenu::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenuEntry >*
SlowMenu::mutable_entry() {
  return &entry_;
}

// -------------------------------------------------------------------

// SlowMenus

// repeated .rec.slow.SlowMenu menu = 1;
inline int SlowMenus::menu_size() const {
  return menu_.size();
}
inline void SlowMenus::clear_menu() {
  menu_.Clear();
}
inline const ::rec::slow::SlowMenu& SlowMenus::menu(int index) const {
  return menu_.Get(index);
}
inline ::rec::slow::SlowMenu* SlowMenus::mutable_menu(int index) {
  return menu_.Mutable(index);
}
inline ::rec::slow::SlowMenu* SlowMenus::add_menu() {
  return menu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenu >&
SlowMenus::menu() const {
  return menu_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::SlowMenu >*
SlowMenus::mutable_menu() {
  return &menu_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::slow::SlowCommand_Type>() {
  return ::rec::slow::SlowCommand_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fslow_2fcommands_2fSlowCommand_2eproto__INCLUDED
