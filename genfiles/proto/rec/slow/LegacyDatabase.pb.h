// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/LegacyDatabase.proto

#ifndef PROTOBUF_rec_2fslow_2fLegacyDatabase_2eproto__INCLUDED
#define PROTOBUF_rec_2fslow_2fLegacyDatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fslow_2fLegacyDatabase_2eproto();
void protobuf_AssignDesc_rec_2fslow_2fLegacyDatabase_2eproto();
void protobuf_ShutdownFile_rec_2fslow_2fLegacyDatabase_2eproto();

class LegacyLoopPoint;
class Track;
class CD;
class LegacyDatabase;

// ===================================================================

class LegacyLoopPoint : public ::google::protobuf::Message {
 public:
  LegacyLoopPoint();
  virtual ~LegacyLoopPoint();
  
  LegacyLoopPoint(const LegacyLoopPoint& from);
  
  inline LegacyLoopPoint& operator=(const LegacyLoopPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacyLoopPoint& default_instance();
  
  void Swap(LegacyLoopPoint* other);
  
  // implements Message ----------------------------------------------
  
  LegacyLoopPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegacyLoopPoint& from);
  void MergeFrom(const LegacyLoopPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);
  
  // optional uint64 end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);
  
  // optional string comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  
  // optional string chords = 4;
  inline bool has_chords() const;
  inline void clear_chords();
  static const int kChordsFieldNumber = 4;
  inline const ::std::string& chords() const;
  inline void set_chords(const ::std::string& value);
  inline void set_chords(const char* value);
  inline void set_chords(const char* value, size_t size);
  inline ::std::string* mutable_chords();
  
  // optional string lyrics = 5;
  inline bool has_lyrics() const;
  inline void clear_lyrics();
  static const int kLyricsFieldNumber = 5;
  inline const ::std::string& lyrics() const;
  inline void set_lyrics(const ::std::string& value);
  inline void set_lyrics(const char* value);
  inline void set_lyrics(const char* value, size_t size);
  inline ::std::string* mutable_lyrics();
  
  // optional string notation = 6;
  inline bool has_notation() const;
  inline void clear_notation();
  static const int kNotationFieldNumber = 6;
  inline const ::std::string& notation() const;
  inline void set_notation(const ::std::string& value);
  inline void set_notation(const char* value);
  inline void set_notation(const char* value, size_t size);
  inline ::std::string* mutable_notation();
  
  // @@protoc_insertion_point(class_scope:rec.slow.LegacyLoopPoint)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::std::string* comment_;
  static const ::std::string _default_comment_;
  ::std::string* chords_;
  static const ::std::string _default_chords_;
  ::std::string* lyrics_;
  static const ::std::string _default_lyrics_;
  ::std::string* notation_;
  static const ::std::string _default_notation_;
  friend void  protobuf_AddDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fLegacyDatabase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LegacyLoopPoint* default_instance_;
};
// -------------------------------------------------------------------

class Track : public ::google::protobuf::Message {
 public:
  Track();
  virtual ~Track();
  
  Track(const Track& from);
  
  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Track& default_instance();
  
  void Swap(Track* other);
  
  // implements Message ----------------------------------------------
  
  Track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string artist = 3;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 3;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  
  // optional string comments = 4;
  inline bool has_comments() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 4;
  inline const ::std::string& comments() const;
  inline void set_comments(const ::std::string& value);
  inline void set_comments(const char* value);
  inline void set_comments(const char* value, size_t size);
  inline ::std::string* mutable_comments();
  
  // optional string notation = 5;
  inline bool has_notation() const;
  inline void clear_notation();
  static const int kNotationFieldNumber = 5;
  inline const ::std::string& notation() const;
  inline void set_notation(const ::std::string& value);
  inline void set_notation(const char* value);
  inline void set_notation(const char* value, size_t size);
  inline ::std::string* mutable_notation();
  
  // optional uint32 last_pitch_change = 6;
  inline bool has_last_pitch_change() const;
  inline void clear_last_pitch_change();
  static const int kLastPitchChangeFieldNumber = 6;
  inline ::google::protobuf::uint32 last_pitch_change() const;
  inline void set_last_pitch_change(::google::protobuf::uint32 value);
  
  // repeated .rec.slow.LegacyLoopPoint loop_point = 7;
  inline int loop_point_size() const;
  inline void clear_loop_point();
  static const int kLoopPointFieldNumber = 7;
  inline const ::rec::slow::LegacyLoopPoint& loop_point(int index) const;
  inline ::rec::slow::LegacyLoopPoint* mutable_loop_point(int index);
  inline ::rec::slow::LegacyLoopPoint* add_loop_point();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::LegacyLoopPoint >&
      loop_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::LegacyLoopPoint >*
      mutable_loop_point();
  
  // @@protoc_insertion_point(class_scope:rec.slow.Track)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 number_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* artist_;
  static const ::std::string _default_artist_;
  ::std::string* comments_;
  static const ::std::string _default_comments_;
  ::std::string* notation_;
  static const ::std::string _default_notation_;
  ::google::protobuf::uint32 last_pitch_change_;
  ::google::protobuf::RepeatedPtrField< ::rec::slow::LegacyLoopPoint > loop_point_;
  friend void  protobuf_AddDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fLegacyDatabase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Track* default_instance_;
};
// -------------------------------------------------------------------

class CD : public ::google::protobuf::Message {
 public:
  CD();
  virtual ~CD();
  
  CD(const CD& from);
  
  inline CD& operator=(const CD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CD& default_instance();
  
  void Swap(CD* other);
  
  // implements Message ----------------------------------------------
  
  CD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CD& from);
  void MergeFrom(const CD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 cd_length = 1;
  inline bool has_cd_length() const;
  inline void clear_cd_length();
  static const int kCdLengthFieldNumber = 1;
  inline ::google::protobuf::uint64 cd_length() const;
  inline void set_cd_length(::google::protobuf::uint64 value);
  
  // optional uint64 track_length = 2;
  inline bool has_track_length() const;
  inline void clear_track_length();
  static const int kTrackLengthFieldNumber = 2;
  inline ::google::protobuf::uint64 track_length() const;
  inline void set_track_length(::google::protobuf::uint64 value);
  
  // optional uint64 num_tracks = 3;
  inline bool has_num_tracks() const;
  inline void clear_num_tracks();
  static const int kNumTracksFieldNumber = 3;
  inline ::google::protobuf::uint64 num_tracks() const;
  inline void set_num_tracks(::google::protobuf::uint64 value);
  
  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional string artist = 5;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 5;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  
  // repeated .rec.slow.Track track = 6;
  inline int track_size() const;
  inline void clear_track();
  static const int kTrackFieldNumber = 6;
  inline const ::rec::slow::Track& track(int index) const;
  inline ::rec::slow::Track* mutable_track(int index);
  inline ::rec::slow::Track* add_track();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::Track >&
      track() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::Track >*
      mutable_track();
  
  // @@protoc_insertion_point(class_scope:rec.slow.CD)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 cd_length_;
  ::google::protobuf::uint64 track_length_;
  ::google::protobuf::uint64 num_tracks_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* artist_;
  static const ::std::string _default_artist_;
  ::google::protobuf::RepeatedPtrField< ::rec::slow::Track > track_;
  friend void  protobuf_AddDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fLegacyDatabase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CD* default_instance_;
};
// -------------------------------------------------------------------

class LegacyDatabase : public ::google::protobuf::Message {
 public:
  LegacyDatabase();
  virtual ~LegacyDatabase();
  
  LegacyDatabase(const LegacyDatabase& from);
  
  inline LegacyDatabase& operator=(const LegacyDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacyDatabase& default_instance();
  
  void Swap(LegacyDatabase* other);
  
  // implements Message ----------------------------------------------
  
  LegacyDatabase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegacyDatabase& from);
  void MergeFrom(const LegacyDatabase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.slow.CD cd = 1;
  inline int cd_size() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 1;
  inline const ::rec::slow::CD& cd(int index) const;
  inline ::rec::slow::CD* mutable_cd(int index);
  inline ::rec::slow::CD* add_cd();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::CD >&
      cd() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::slow::CD >*
      mutable_cd();
  
  // @@protoc_insertion_point(class_scope:rec.slow.LegacyDatabase)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::slow::CD > cd_;
  friend void  protobuf_AddDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fLegacyDatabase_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fLegacyDatabase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LegacyDatabase* default_instance_;
};
// ===================================================================


// ===================================================================

// LegacyLoopPoint

// optional uint64 start_time = 1;
inline bool LegacyLoopPoint::has_start_time() const {
  return _has_bit(0);
}
inline void LegacyLoopPoint::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 LegacyLoopPoint::start_time() const {
  return start_time_;
}
inline void LegacyLoopPoint::set_start_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  start_time_ = value;
}

// optional uint64 end_time = 2;
inline bool LegacyLoopPoint::has_end_time() const {
  return _has_bit(1);
}
inline void LegacyLoopPoint::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 LegacyLoopPoint::end_time() const {
  return end_time_;
}
inline void LegacyLoopPoint::set_end_time(::google::protobuf::uint64 value) {
  _set_bit(1);
  end_time_ = value;
}

// optional string comment = 3;
inline bool LegacyLoopPoint::has_comment() const {
  return _has_bit(2);
}
inline void LegacyLoopPoint::clear_comment() {
  if (comment_ != &_default_comment_) {
    comment_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& LegacyLoopPoint::comment() const {
  return *comment_;
}
inline void LegacyLoopPoint::set_comment(const ::std::string& value) {
  _set_bit(2);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LegacyLoopPoint::set_comment(const char* value) {
  _set_bit(2);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LegacyLoopPoint::set_comment(const char* value, size_t size) {
  _set_bit(2);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegacyLoopPoint::mutable_comment() {
  _set_bit(2);
  if (comment_ == &_default_comment_) {
    comment_ = new ::std::string;
  }
  return comment_;
}

// optional string chords = 4;
inline bool LegacyLoopPoint::has_chords() const {
  return _has_bit(3);
}
inline void LegacyLoopPoint::clear_chords() {
  if (chords_ != &_default_chords_) {
    chords_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& LegacyLoopPoint::chords() const {
  return *chords_;
}
inline void LegacyLoopPoint::set_chords(const ::std::string& value) {
  _set_bit(3);
  if (chords_ == &_default_chords_) {
    chords_ = new ::std::string;
  }
  chords_->assign(value);
}
inline void LegacyLoopPoint::set_chords(const char* value) {
  _set_bit(3);
  if (chords_ == &_default_chords_) {
    chords_ = new ::std::string;
  }
  chords_->assign(value);
}
inline void LegacyLoopPoint::set_chords(const char* value, size_t size) {
  _set_bit(3);
  if (chords_ == &_default_chords_) {
    chords_ = new ::std::string;
  }
  chords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegacyLoopPoint::mutable_chords() {
  _set_bit(3);
  if (chords_ == &_default_chords_) {
    chords_ = new ::std::string;
  }
  return chords_;
}

// optional string lyrics = 5;
inline bool LegacyLoopPoint::has_lyrics() const {
  return _has_bit(4);
}
inline void LegacyLoopPoint::clear_lyrics() {
  if (lyrics_ != &_default_lyrics_) {
    lyrics_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& LegacyLoopPoint::lyrics() const {
  return *lyrics_;
}
inline void LegacyLoopPoint::set_lyrics(const ::std::string& value) {
  _set_bit(4);
  if (lyrics_ == &_default_lyrics_) {
    lyrics_ = new ::std::string;
  }
  lyrics_->assign(value);
}
inline void LegacyLoopPoint::set_lyrics(const char* value) {
  _set_bit(4);
  if (lyrics_ == &_default_lyrics_) {
    lyrics_ = new ::std::string;
  }
  lyrics_->assign(value);
}
inline void LegacyLoopPoint::set_lyrics(const char* value, size_t size) {
  _set_bit(4);
  if (lyrics_ == &_default_lyrics_) {
    lyrics_ = new ::std::string;
  }
  lyrics_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegacyLoopPoint::mutable_lyrics() {
  _set_bit(4);
  if (lyrics_ == &_default_lyrics_) {
    lyrics_ = new ::std::string;
  }
  return lyrics_;
}

// optional string notation = 6;
inline bool LegacyLoopPoint::has_notation() const {
  return _has_bit(5);
}
inline void LegacyLoopPoint::clear_notation() {
  if (notation_ != &_default_notation_) {
    notation_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& LegacyLoopPoint::notation() const {
  return *notation_;
}
inline void LegacyLoopPoint::set_notation(const ::std::string& value) {
  _set_bit(5);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(value);
}
inline void LegacyLoopPoint::set_notation(const char* value) {
  _set_bit(5);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(value);
}
inline void LegacyLoopPoint::set_notation(const char* value, size_t size) {
  _set_bit(5);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LegacyLoopPoint::mutable_notation() {
  _set_bit(5);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  return notation_;
}

// -------------------------------------------------------------------

// Track

// optional uint32 number = 1;
inline bool Track::has_number() const {
  return _has_bit(0);
}
inline void Track::clear_number() {
  number_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 Track::number() const {
  return number_;
}
inline void Track::set_number(::google::protobuf::uint32 value) {
  _set_bit(0);
  number_ = value;
}

// optional string name = 2;
inline bool Track::has_name() const {
  return _has_bit(1);
}
inline void Track::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Track::name() const {
  return *name_;
}
inline void Track::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Track::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Track::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string artist = 3;
inline bool Track::has_artist() const {
  return _has_bit(2);
}
inline void Track::clear_artist() {
  if (artist_ != &_default_artist_) {
    artist_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Track::artist() const {
  return *artist_;
}
inline void Track::set_artist(const ::std::string& value) {
  _set_bit(2);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value) {
  _set_bit(2);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void Track::set_artist(const char* value, size_t size) {
  _set_bit(2);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_artist() {
  _set_bit(2);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  return artist_;
}

// optional string comments = 4;
inline bool Track::has_comments() const {
  return _has_bit(3);
}
inline void Track::clear_comments() {
  if (comments_ != &_default_comments_) {
    comments_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Track::comments() const {
  return *comments_;
}
inline void Track::set_comments(const ::std::string& value) {
  _set_bit(3);
  if (comments_ == &_default_comments_) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void Track::set_comments(const char* value) {
  _set_bit(3);
  if (comments_ == &_default_comments_) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void Track::set_comments(const char* value, size_t size) {
  _set_bit(3);
  if (comments_ == &_default_comments_) {
    comments_ = new ::std::string;
  }
  comments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_comments() {
  _set_bit(3);
  if (comments_ == &_default_comments_) {
    comments_ = new ::std::string;
  }
  return comments_;
}

// optional string notation = 5;
inline bool Track::has_notation() const {
  return _has_bit(4);
}
inline void Track::clear_notation() {
  if (notation_ != &_default_notation_) {
    notation_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Track::notation() const {
  return *notation_;
}
inline void Track::set_notation(const ::std::string& value) {
  _set_bit(4);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(value);
}
inline void Track::set_notation(const char* value) {
  _set_bit(4);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(value);
}
inline void Track::set_notation(const char* value, size_t size) {
  _set_bit(4);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  notation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Track::mutable_notation() {
  _set_bit(4);
  if (notation_ == &_default_notation_) {
    notation_ = new ::std::string;
  }
  return notation_;
}

// optional uint32 last_pitch_change = 6;
inline bool Track::has_last_pitch_change() const {
  return _has_bit(5);
}
inline void Track::clear_last_pitch_change() {
  last_pitch_change_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Track::last_pitch_change() const {
  return last_pitch_change_;
}
inline void Track::set_last_pitch_change(::google::protobuf::uint32 value) {
  _set_bit(5);
  last_pitch_change_ = value;
}

// repeated .rec.slow.LegacyLoopPoint loop_point = 7;
inline int Track::loop_point_size() const {
  return loop_point_.size();
}
inline void Track::clear_loop_point() {
  loop_point_.Clear();
}
inline const ::rec::slow::LegacyLoopPoint& Track::loop_point(int index) const {
  return loop_point_.Get(index);
}
inline ::rec::slow::LegacyLoopPoint* Track::mutable_loop_point(int index) {
  return loop_point_.Mutable(index);
}
inline ::rec::slow::LegacyLoopPoint* Track::add_loop_point() {
  return loop_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::LegacyLoopPoint >&
Track::loop_point() const {
  return loop_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::LegacyLoopPoint >*
Track::mutable_loop_point() {
  return &loop_point_;
}

// -------------------------------------------------------------------

// CD

// optional uint64 cd_length = 1;
inline bool CD::has_cd_length() const {
  return _has_bit(0);
}
inline void CD::clear_cd_length() {
  cd_length_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 CD::cd_length() const {
  return cd_length_;
}
inline void CD::set_cd_length(::google::protobuf::uint64 value) {
  _set_bit(0);
  cd_length_ = value;
}

// optional uint64 track_length = 2;
inline bool CD::has_track_length() const {
  return _has_bit(1);
}
inline void CD::clear_track_length() {
  track_length_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 CD::track_length() const {
  return track_length_;
}
inline void CD::set_track_length(::google::protobuf::uint64 value) {
  _set_bit(1);
  track_length_ = value;
}

// optional uint64 num_tracks = 3;
inline bool CD::has_num_tracks() const {
  return _has_bit(2);
}
inline void CD::clear_num_tracks() {
  num_tracks_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 CD::num_tracks() const {
  return num_tracks_;
}
inline void CD::set_num_tracks(::google::protobuf::uint64 value) {
  _set_bit(2);
  num_tracks_ = value;
}

// optional string title = 4;
inline bool CD::has_title() const {
  return _has_bit(3);
}
inline void CD::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CD::title() const {
  return *title_;
}
inline void CD::set_title(const ::std::string& value) {
  _set_bit(3);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CD::set_title(const char* value) {
  _set_bit(3);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CD::set_title(const char* value, size_t size) {
  _set_bit(3);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CD::mutable_title() {
  _set_bit(3);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional string artist = 5;
inline bool CD::has_artist() const {
  return _has_bit(4);
}
inline void CD::clear_artist() {
  if (artist_ != &_default_artist_) {
    artist_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CD::artist() const {
  return *artist_;
}
inline void CD::set_artist(const ::std::string& value) {
  _set_bit(4);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void CD::set_artist(const char* value) {
  _set_bit(4);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void CD::set_artist(const char* value, size_t size) {
  _set_bit(4);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CD::mutable_artist() {
  _set_bit(4);
  if (artist_ == &_default_artist_) {
    artist_ = new ::std::string;
  }
  return artist_;
}

// repeated .rec.slow.Track track = 6;
inline int CD::track_size() const {
  return track_.size();
}
inline void CD::clear_track() {
  track_.Clear();
}
inline const ::rec::slow::Track& CD::track(int index) const {
  return track_.Get(index);
}
inline ::rec::slow::Track* CD::mutable_track(int index) {
  return track_.Mutable(index);
}
inline ::rec::slow::Track* CD::add_track() {
  return track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::Track >&
CD::track() const {
  return track_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::Track >*
CD::mutable_track() {
  return &track_;
}

// -------------------------------------------------------------------

// LegacyDatabase

// repeated .rec.slow.CD cd = 1;
inline int LegacyDatabase::cd_size() const {
  return cd_.size();
}
inline void LegacyDatabase::clear_cd() {
  cd_.Clear();
}
inline const ::rec::slow::CD& LegacyDatabase::cd(int index) const {
  return cd_.Get(index);
}
inline ::rec::slow::CD* LegacyDatabase::mutable_cd(int index) {
  return cd_.Mutable(index);
}
inline ::rec::slow::CD* LegacyDatabase::add_cd() {
  return cd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::slow::CD >&
LegacyDatabase::cd() const {
  return cd_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::slow::CD >*
LegacyDatabase::mutable_cd() {
  return &cd_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fslow_2fLegacyDatabase_2eproto__INCLUDED
