// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/State.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fState_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fState_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/State.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, windows_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, appearance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, recent_files_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fState_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fState_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::slow::protobuf_AddDesc_rec_2fslow_2fRecentFiles_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fAppearance_2eproto();
  ::rec::access::protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024rec/slow/State.proto\022\010rec.slow\032\032rec/sl"
    "ow/RecentFiles.proto\032\030rec/gui/Appearance"
    ".proto\032\027rec/access/Access.proto\"\227\001\n\005Stat"
    "e\022\024\n\014windows_open\030\001 \003(\t\022\'\n\nappearance\030\002 "
    "\001(\0132\023.rec.gui.Appearance\022\"\n\006access\030\003 \001(\013"
    "2\022.rec.access.Access\022+\n\014recent_files\030\004 \001"
    "(\0132\025.rec.slow.RecentFiles", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/State.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fState_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fState_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fState_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fState_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fState_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int State::kWindowsOpenFieldNumber;
const int State::kAppearanceFieldNumber;
const int State::kAccessFieldNumber;
const int State::kRecentFilesFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
  appearance_ = const_cast< ::rec::gui::Appearance*>(&::rec::gui::Appearance::default_instance());
  access_ = const_cast< ::rec::access::Access*>(&::rec::access::Access::default_instance());
  recent_files_ = const_cast< ::rec::slow::RecentFiles*>(&::rec::slow::RecentFiles::default_instance());
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  appearance_ = NULL;
  access_ = NULL;
  recent_files_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
    delete appearance_;
    delete access_;
    delete recent_files_;
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fState_2eproto();  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (appearance_ != NULL) appearance_->::rec::gui::Appearance::Clear();
    }
    if (_has_bit(2)) {
      if (access_ != NULL) access_->::rec::access::Access::Clear();
    }
    if (_has_bit(3)) {
      if (recent_files_ != NULL) recent_files_->::rec::slow::RecentFiles::Clear();
    }
  }
  windows_open_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string windows_open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windows_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_windows_open()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windows_open(0).data(), this->windows_open(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_windows_open;
        if (input->ExpectTag(18)) goto parse_appearance;
        break;
      }
      
      // optional .rec.gui.Appearance appearance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appearance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appearance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access;
        break;
      }
      
      // optional .rec.access.Access access = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recent_files;
        break;
      }
      
      // optional .rec.slow.RecentFiles recent_files = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recent_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string windows_open = 1;
  for (int i = 0; i < this->windows_open_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->windows_open(i).data(), this->windows_open(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->windows_open(i), output);
  }
  
  // optional .rec.gui.Appearance appearance = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appearance(), output);
  }
  
  // optional .rec.access.Access access = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->access(), output);
  }
  
  // optional .rec.slow.RecentFiles recent_files = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recent_files(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string windows_open = 1;
  for (int i = 0; i < this->windows_open_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windows_open(i).data(), this->windows_open(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->windows_open(i), target);
  }
  
  // optional .rec.gui.Appearance appearance = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appearance(), target);
  }
  
  // optional .rec.access.Access access = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->access(), target);
  }
  
  // optional .rec.slow.RecentFiles recent_files = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recent_files(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .rec.gui.Appearance appearance = 2;
    if (has_appearance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appearance());
    }
    
    // optional .rec.access.Access access = 3;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access());
    }
    
    // optional .rec.slow.RecentFiles recent_files = 4;
    if (has_recent_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recent_files());
    }
    
  }
  // repeated string windows_open = 1;
  total_size += 1 * this->windows_open_size();
  for (int i = 0; i < this->windows_open_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->windows_open(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  windows_open_.MergeFrom(from.windows_open_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_appearance()->::rec::gui::Appearance::MergeFrom(from.appearance());
    }
    if (from._has_bit(2)) {
      mutable_access()->::rec::access::Access::MergeFrom(from.access());
    }
    if (from._has_bit(3)) {
      mutable_recent_files()->::rec::slow::RecentFiles::MergeFrom(from.recent_files());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  
  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    windows_open_.Swap(&other->windows_open_);
    std::swap(appearance_, other->appearance_);
    std::swap(access_, other->access_);
    std::swap(recent_files_, other->recent_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
