// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/Instance.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* InstanceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fInstance_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fInstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/Instance.proto");
  GOOGLE_CHECK(file != NULL);
  InstanceProto_descriptor_ = file->message_type(0);
  static const int InstanceProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceProto, loop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceProto, zoom_),
  };
  InstanceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceProto_descriptor_,
      InstanceProto::default_instance_,
      InstanceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fInstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceProto_descriptor_, &InstanceProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fInstance_2eproto() {
  delete InstanceProto::default_instance_;
  delete InstanceProto_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fInstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::util::protobuf_AddDesc_rec_2futil_2fLoopPoint_2eproto();
  ::rec::widget::waveform::protobuf_AddDesc_rec_2fwidget_2fwaveform_2fZoom_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rec/slow/Instance.proto\022\010rec.slow\032\030rec"
    "/util/LoopPoint.proto\032\036rec/widget/wavefo"
    "rm/Zoom.proto\"k\n\rInstanceProto\022,\n\013loop_p"
    "oints\030\001 \001(\0132\027.rec.util.LoopPointList\022,\n\004"
    "zoom\030\002 \001(\0132\036.rec.widget.waveform.ZoomPro"
    "to", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/Instance.proto", &protobuf_RegisterTypes);
  InstanceProto::default_instance_ = new InstanceProto();
  InstanceProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fInstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fInstance_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fInstance_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fInstance_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fInstance_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int InstanceProto::kLoopPointsFieldNumber;
const int InstanceProto::kZoomFieldNumber;
#endif  // !_MSC_VER

InstanceProto::InstanceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceProto::InitAsDefaultInstance() {
  loop_points_ = const_cast< ::rec::util::LoopPointList*>(&::rec::util::LoopPointList::default_instance());
  zoom_ = const_cast< ::rec::widget::waveform::ZoomProto*>(&::rec::widget::waveform::ZoomProto::default_instance());
}

InstanceProto::InstanceProto(const InstanceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceProto::SharedCtor() {
  _cached_size_ = 0;
  loop_points_ = NULL;
  zoom_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceProto::~InstanceProto() {
  SharedDtor();
}

void InstanceProto::SharedDtor() {
  if (this != default_instance_) {
    delete loop_points_;
    delete zoom_;
  }
}

void InstanceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceProto_descriptor_;
}

const InstanceProto& InstanceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fInstance_2eproto();  return *default_instance_;
}

InstanceProto* InstanceProto::default_instance_ = NULL;

InstanceProto* InstanceProto::New() const {
  return new InstanceProto;
}

void InstanceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (loop_points_ != NULL) loop_points_->::rec::util::LoopPointList::Clear();
    }
    if (_has_bit(1)) {
      if (zoom_ != NULL) zoom_->::rec::widget::waveform::ZoomProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.util.LoopPointList loop_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zoom;
        break;
      }
      
      // optional .rec.widget.waveform.ZoomProto zoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.util.LoopPointList loop_points = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loop_points(), output);
  }
  
  // optional .rec.widget.waveform.ZoomProto zoom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zoom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.util.LoopPointList loop_points = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loop_points(), target);
  }
  
  // optional .rec.widget.waveform.ZoomProto zoom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zoom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.util.LoopPointList loop_points = 1;
    if (has_loop_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loop_points());
    }
    
    // optional .rec.widget.waveform.ZoomProto zoom = 2;
    if (has_zoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceProto::MergeFrom(const InstanceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_loop_points()->::rec::util::LoopPointList::MergeFrom(from.loop_points());
    }
    if (from._has_bit(1)) {
      mutable_zoom()->::rec::widget::waveform::ZoomProto::MergeFrom(from.zoom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceProto::CopyFrom(const InstanceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceProto::IsInitialized() const {
  
  return true;
}

void InstanceProto::Swap(InstanceProto* other) {
  if (other != this) {
    std::swap(loop_points_, other->loop_points_);
    std::swap(zoom_, other->zoom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceProto_descriptor_;
  metadata.reflection = InstanceProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
