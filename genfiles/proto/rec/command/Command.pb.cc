// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/command/Command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/command/Command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace command {

namespace {

const ::google::protobuf::Descriptor* Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* Setter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Setter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto() {
  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/command/Command.proto");
  GOOGLE_CHECK(file != NULL);
  Description_descriptor_ = file->message_type(0);
  static const int Description_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, help_),
  };
  Description_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Description_descriptor_,
      Description::default_instance_,
      Description_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Description));
  Setter_descriptor_ = file->message_type(1);
  static const int Setter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setter, is_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setter, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setter, type_name_),
  };
  Setter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Setter_descriptor_,
      Setter::default_instance_,
      Setter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Setter));
  Command_descriptor_ = file->message_type(2);
  static const int Command_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, keypress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, setter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, disable_on_feature_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Type_descriptor_ = Command_descriptor_->enum_type(0);
  Commands_descriptor_ = file->message_type(3);
  static const int Commands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, command_),
  };
  Commands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_descriptor_,
      Commands::default_instance_,
      Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Description_descriptor_, &Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Setter_descriptor_, &Setter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_descriptor_, &Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto() {
  delete Description::default_instance_;
  delete Description_reflection_;
  delete Setter::default_instance_;
  delete Setter_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Commands::default_instance_;
  delete Commands_reflection_;
}

void protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::data::protobuf_AddDesc_rec_2fdata_2fproto_2fAddress_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/command/Command.proto\022\013rec.command"
    "\032\034rec/data/proto/Address.proto\"7\n\013Descri"
    "ption\022\014\n\004menu\030\001 \003(\t\022\014\n\004full\030\002 \003(\t\022\014\n\004hel"
    "p\030\003 \001(\t\"]\n\006Setter\022\027\n\tis_global\030\001 \001(\010:\004tr"
    "ue\022\'\n\007address\030\002 \001(\0132\026.rec.data.AddressPr"
    "oto\022\021\n\ttype_name\030\003 \001(\t\"\361\002\n\007Command\022\014\n\004ty"
    "pe\030\001 \001(\r\022\r\n\005index\030\002 \001(\021\022\023\n\013start_index\030\003"
    " \001(\021\022\014\n\004menu\030\004 \001(\t\022&\n\004desc\030\005 \001(\0132\030.rec.c"
    "ommand.Description\022\020\n\010keypress\030\006 \003(\t\022#\n\006"
    "setter\030\007 \001(\0132\023.rec.command.Setter\022\r\n\005fla"
    "gs\030\010 \001(\r\022\032\n\022disable_on_feature\030\t \003(\t\"\233\001\n"
    "\004Type\022\010\n\004NONE\020\000\022\t\n\004QUIT\020\201 \022\010\n\003DEL\020\202 \022\010\n\003"
    "CUT\020\203 \022\t\n\004COPY\020\204 \022\n\n\005PASTE\020\205 \022\017\n\nSELECT_"
    "ALL\020\206 \022\021\n\014DESELECT_ALL\020\207 \022\017\n\nJUCE_START\020"
    "\200 \022\r\n\010JUCE_END\020\210 \022\017\n\tBANK_SIZE\020\240\215\006\"1\n\010Co"
    "mmands\022%\n\007command\030\001 \003(\0132\024.rec.command.Co"
    "mmand", 645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/command/Command.proto", &protobuf_RegisterTypes);
  Description::default_instance_ = new Description();
  Setter::default_instance_ = new Setter();
  Command::default_instance_ = new Command();
  Commands::default_instance_ = new Commands();
  Description::default_instance_->InitAsDefaultInstance();
  Setter::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fcommand_2fCommand_2eproto {
  StaticDescriptorInitializer_rec_2fcommand_2fCommand_2eproto() {
    protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  }
} static_descriptor_initializer_rec_2fcommand_2fCommand_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Description::kMenuFieldNumber;
const int Description::kFullFieldNumber;
const int Description::kHelpFieldNumber;
#endif  // !_MSC_VER

Description::Description()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Description::InitAsDefaultInstance() {
}

Description::Description(const Description& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Description::SharedCtor() {
  _cached_size_ = 0;
  help_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Description::~Description() {
  SharedDtor();
}

void Description::SharedDtor() {
  if (help_ != &::google::protobuf::internal::kEmptyString) {
    delete help_;
  }
  if (this != default_instance_) {
  }
}

void Description::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Description_descriptor_;
}

const Description& Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  return *default_instance_;
}

Description* Description::default_instance_ = NULL;

Description* Description::New() const {
  return new Description;
}

void Description::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_help()) {
      if (help_ != &::google::protobuf::internal::kEmptyString) {
        help_->clear();
      }
    }
  }
  menu_.Clear();
  full_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string menu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_menu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu(this->menu_size() - 1).data(),
            this->menu(this->menu_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_menu;
        if (input->ExpectTag(18)) goto parse_full;
        break;
      }

      // repeated string full = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_full()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full(this->full_size() - 1).data(),
            this->full(this->full_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full;
        if (input->ExpectTag(26)) goto parse_help;
        break;
      }

      // optional string help = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help().data(), this->help().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->menu(i).data(), this->menu(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->menu(i), output);
  }

  // repeated string full = 2;
  for (int i = 0; i < this->full_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->full(i).data(), this->full(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full(i), output);
  }

  // optional string help = 3;
  if (has_help()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->help(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu(i).data(), this->menu(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->menu(i), target);
  }

  // repeated string full = 2;
  for (int i = 0; i < this->full_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full(i).data(), this->full(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->full(i), target);
  }

  // optional string help = 3;
  if (has_help()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->help(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Description::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string help = 3;
    if (has_help()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->help());
    }

  }
  // repeated string menu = 1;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->menu(i));
  }

  // repeated string full = 2;
  total_size += 1 * this->full_size();
  for (int i = 0; i < this->full_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->full(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Description::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Description* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Description*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Description::MergeFrom(const Description& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  full_.MergeFrom(from.full_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_help()) {
      set_help(from.help());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Description::CopyFrom(const Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {

  return true;
}

void Description::Swap(Description* other) {
  if (other != this) {
    menu_.Swap(&other->menu_);
    full_.Swap(&other->full_);
    std::swap(help_, other->help_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Description::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Description_descriptor_;
  metadata.reflection = Description_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Setter::kIsGlobalFieldNumber;
const int Setter::kAddressFieldNumber;
const int Setter::kTypeNameFieldNumber;
#endif  // !_MSC_VER

Setter::Setter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Setter::InitAsDefaultInstance() {
  address_ = const_cast< ::rec::data::AddressProto*>(&::rec::data::AddressProto::default_instance());
}

Setter::Setter(const Setter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Setter::SharedCtor() {
  _cached_size_ = 0;
  is_global_ = true;
  address_ = NULL;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Setter::~Setter() {
  SharedDtor();
}

void Setter::SharedDtor() {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void Setter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Setter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Setter_descriptor_;
}

const Setter& Setter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  return *default_instance_;
}

Setter* Setter::default_instance_ = NULL;

Setter* Setter::New() const {
  return new Setter;
}

void Setter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_global_ = true;
    if (has_address()) {
      if (address_ != NULL) address_->::rec::data::AddressProto::Clear();
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kEmptyString) {
        type_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Setter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_global = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_global_)));
          set_has_is_global();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .rec.data.AddressProto address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional string type_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Setter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_global = 1 [default = true];
  if (has_is_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_global(), output);
  }

  // optional .rec.data.AddressProto address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->address(), output);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Setter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_global = 1 [default = true];
  if (has_is_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_global(), target);
  }

  // optional .rec.data.AddressProto address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->address(), target);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Setter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_global = 1 [default = true];
    if (has_is_global()) {
      total_size += 1 + 1;
    }

    // optional .rec.data.AddressProto address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional string type_name = 3;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Setter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Setter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Setter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Setter::MergeFrom(const Setter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_global()) {
      set_is_global(from.is_global());
    }
    if (from.has_address()) {
      mutable_address()->::rec::data::AddressProto::MergeFrom(from.address());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Setter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setter::CopyFrom(const Setter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setter::IsInitialized() const {

  return true;
}

void Setter::Swap(Setter* other) {
  if (other != this) {
    std::swap(is_global_, other->is_global_);
    std::swap(address_, other->address_);
    std::swap(type_name_, other->type_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Setter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Setter_descriptor_;
  metadata.reflection = Setter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Type_descriptor_;
}
bool Command_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 4096:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 100000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Type Command::NONE;
const Command_Type Command::QUIT;
const Command_Type Command::DEL;
const Command_Type Command::CUT;
const Command_Type Command::COPY;
const Command_Type Command::PASTE;
const Command_Type Command::SELECT_ALL;
const Command_Type Command::DESELECT_ALL;
const Command_Type Command::JUCE_START;
const Command_Type Command::JUCE_END;
const Command_Type Command::BANK_SIZE;
const Command_Type Command::Type_MIN;
const Command_Type Command::Type_MAX;
const int Command::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kIndexFieldNumber;
const int Command::kStartIndexFieldNumber;
const int Command::kMenuFieldNumber;
const int Command::kDescFieldNumber;
const int Command::kKeypressFieldNumber;
const int Command::kSetterFieldNumber;
const int Command::kFlagsFieldNumber;
const int Command::kDisableOnFeatureFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  desc_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
  setter_ = const_cast< ::rec::command::Setter*>(&::rec::command::Setter::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  index_ = 0;
  start_index_ = 0;
  menu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = NULL;
  setter_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (menu_ != &::google::protobuf::internal::kEmptyString) {
    delete menu_;
  }
  if (this != default_instance_) {
    delete desc_;
    delete setter_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    index_ = 0;
    start_index_ = 0;
    if (has_menu()) {
      if (menu_ != &::google::protobuf::internal::kEmptyString) {
        menu_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != NULL) desc_->::rec::command::Description::Clear();
    }
    if (has_setter()) {
      if (setter_ != NULL) setter_->::rec::command::Setter::Clear();
    }
    flags_ = 0u;
  }
  keypress_.Clear();
  disable_on_feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional sint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional sint32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_menu;
        break;
      }

      // optional string menu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu().data(), this->menu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional .rec.command.Description desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keypress;
        break;
      }

      // repeated string keypress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keypress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keypress(this->keypress_size() - 1).data(),
            this->keypress(this->keypress_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keypress;
        if (input->ExpectTag(58)) goto parse_setter;
        break;
      }

      // optional .rec.command.Setter setter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_disable_on_feature;
        break;
      }

      // repeated string disable_on_feature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disable_on_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_on_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disable_on_feature(this->disable_on_feature_size() - 1).data(),
            this->disable_on_feature(this->disable_on_feature_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_disable_on_feature;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional sint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->index(), output);
  }

  // optional sint32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->start_index(), output);
  }

  // optional string menu = 4;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu().data(), this->menu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->menu(), output);
  }

  // optional .rec.command.Description desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->desc(), output);
  }

  // repeated string keypress = 6;
  for (int i = 0; i < this->keypress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keypress(i).data(), this->keypress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->keypress(i), output);
  }

  // optional .rec.command.Setter setter = 7;
  if (has_setter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->setter(), output);
  }

  // optional uint32 flags = 8;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  // repeated string disable_on_feature = 9;
  for (int i = 0; i < this->disable_on_feature_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->disable_on_feature(i).data(), this->disable_on_feature(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->disable_on_feature(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional sint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->index(), target);
  }

  // optional sint32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->start_index(), target);
  }

  // optional string menu = 4;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu().data(), this->menu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->menu(), target);
  }

  // optional .rec.command.Description desc = 5;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->desc(), target);
  }

  // repeated string keypress = 6;
  for (int i = 0; i < this->keypress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keypress(i).data(), this->keypress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->keypress(i), target);
  }

  // optional .rec.command.Setter setter = 7;
  if (has_setter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->setter(), target);
  }

  // optional uint32 flags = 8;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  // repeated string disable_on_feature = 9;
  for (int i = 0; i < this->disable_on_feature_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disable_on_feature(i).data(), this->disable_on_feature(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->disable_on_feature(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional sint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->index());
    }

    // optional sint32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->start_index());
    }

    // optional string menu = 4;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menu());
    }

    // optional .rec.command.Description desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc());
    }

    // optional .rec.command.Setter setter = 7;
    if (has_setter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setter());
    }

    // optional uint32 flags = 8;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  // repeated string keypress = 6;
  total_size += 1 * this->keypress_size();
  for (int i = 0; i < this->keypress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keypress(i));
  }

  // repeated string disable_on_feature = 9;
  total_size += 1 * this->disable_on_feature_size();
  for (int i = 0; i < this->disable_on_feature_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_on_feature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypress_.MergeFrom(from.keypress_);
  disable_on_feature_.MergeFrom(from.disable_on_feature_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_menu()) {
      set_menu(from.menu());
    }
    if (from.has_desc()) {
      mutable_desc()->::rec::command::Description::MergeFrom(from.desc());
    }
    if (from.has_setter()) {
      mutable_setter()->::rec::command::Setter::MergeFrom(from.setter());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(start_index_, other->start_index_);
    std::swap(menu_, other->menu_);
    std::swap(desc_, other->desc_);
    keypress_.Swap(&other->keypress_);
    std::swap(setter_, other->setter_);
    std::swap(flags_, other->flags_);
    disable_on_feature_.Swap(&other->disable_on_feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Commands::kCommandFieldNumber;
#endif  // !_MSC_VER

Commands::Commands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands::InitAsDefaultInstance() {
}

Commands::Commands(const Commands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands::~Commands() {
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_descriptor_;
}

const Commands& Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  return *default_instance_;
}

Commands* Commands::default_instance_ = NULL;

Commands* Commands::New() const {
  return new Commands;
}

void Commands::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.command.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.command.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.command.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands::ByteSize() const {
  int total_size = 0;

  // repeated .rec.command.Command command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {

  return true;
}

void Commands::Swap(Commands* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_descriptor_;
  metadata.reflection = Commands_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace rec

// @@protoc_insertion_point(global_scope)
