// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/command/Command.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace command {

namespace {

const ::google::protobuf::Descriptor* Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mapping_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto() {
  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/command/Command.proto");
  GOOGLE_CHECK(file != NULL);
  Description_descriptor_ = file->message_type(0);
  static const int Description_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, full_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, help_),
  };
  Description_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Description_descriptor_,
      Description::default_instance_,
      Description_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Description));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, keypress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, is_setter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, is_global_setter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, setter_type_name_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Type_descriptor_ = Command_descriptor_->enum_type(0);
  Commands_descriptor_ = file->message_type(2);
  static const int Commands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, command_),
  };
  Commands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Commands_descriptor_,
      Commands::default_instance_,
      Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Commands));
  KeyValue_descriptor_ = file->message_type(3);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  Mapping_descriptor_ = file->message_type(4);
  static const int Mapping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, key_value_),
  };
  Mapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mapping_descriptor_,
      Mapping::default_instance_,
      Mapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mapping));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Description_descriptor_, &Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Commands_descriptor_, &Commands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mapping_descriptor_, &Mapping::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto() {
  delete Description::default_instance_;
  delete Description_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Commands::default_instance_;
  delete Commands_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Mapping::default_instance_;
  delete Mapping_reflection_;
}

void protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::data::protobuf_AddDesc_rec_2fdata_2fproto_2fAddress_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/command/Command.proto\022\013rec.command"
    "\032\034rec/data/proto/Address.proto\"7\n\013Descri"
    "ption\022\014\n\004menu\030\001 \003(\t\022\014\n\004full\030\002 \001(\t\022\014\n\004hel"
    "p\030\003 \001(\t\"\267\017\n\007Command\022\'\n\004type\030\001 \001(\0162\031.rec."
    "command.Command.Type\022\r\n\005index\030\002 \001(\021\022\023\n\013s"
    "tart_index\030\n \001(\021\022\020\n\010category\030\003 \001(\t\022&\n\004de"
    "sc\030\004 \001(\0132\030.rec.command.Description\022\020\n\010ke"
    "ypress\030\005 \003(\t\022\021\n\tis_setter\030\006 \001(\010\022\030\n\020is_gl"
    "obal_setter\030\007 \001(\010\022\'\n\007address\030\010 \001(\0132\026.rec"
    ".data.AddressProto\022\030\n\020setter_type_name\030\t"
    " \001(\t\"\242\r\n\004Type\022\010\n\004NONE\020\000\022\026\n\022ABOUT_THIS_PR"
    "OGRAM\020:\022\022\n\016ADD_LOOP_POINT\020\001\022\025\n\021AUDIO_PRE"
    "FERENCES\020\002\022\025\n\021CHECK_FOR_UPDATES\020D\022\023\n\017CLE"
    "AR_NAVIGATOR\020\003\022\017\n\013CLEAR_LOOPS\020\004\022\031\n\025CLEAR"
    "_SAVED_FILE_DATA\020\005\022\016\n\nCLOSE_FILE\020\006\022\025\n\021DI"
    "M_VOLUME_TOGGLE\020\007\022\r\n\tEJECT_CDS\020\010\022\031\n\025INVE"
    "RT_LOOP_SELECTION\020\t\022\010\n\004JUMP\020\n\022\021\n\rJUMP_SE"
    "LECTED\020\013\022\025\n\021KEYBOARD_MAPPINGS\020\014\022\021\n\rMIDI_"
    "MAPPINGS\020\r\022\027\n\023MODE_ADD_LOOP_POINT\020?\022\r\n\tM"
    "ODE_DRAG\020<\022\021\n\rMODE_SET_TIME\020=\022\020\n\014MODE_ZO"
    "OM_IN\020>\022\026\n\022MUTE_VOLUME_TOGGLE\020\016\022\024\n\020NUDGE"
    "_BEGIN_LEFT\020\017\022\025\n\021NUDGE_BEGIN_RIGHT\020\020\022\022\n\016"
    "NUDGE_END_LEFT\020\021\022\023\n\017NUDGE_END_RIGHT\020\022\022\025\n"
    "\021NUDGE_VOLUME_DOWN\020\023\022\023\n\017NUDGE_VOLUME_UP\020"
    "\024\022\010\n\004OPEN\020\025\022\017\n\013OPEN_MANUAL\020A\022\020\n\014RECENT_F"
    "ILES\020\026\022\010\n\004REDO\020\027\022\023\n\017REQUEST_SUPPORT\020B\022\027\n"
    "\023RESET_GAIN_TO_UNITY\020\030\022\r\n\tSAVE_FILE\020E\022\027\n"
    "\023SAVE_FILE_SELECTION\020F\022\n\n\006SELECT\020\031\022\017\n\013SE"
    "LECT_ONLY\020\032\022\023\n\017SET_SAVE_FORMAT\020G\022\031\n\025TOGG"
    "LE_ADVANCED_MENUS\020;\022\034\n\030TOGGLE_AUTOMATIC_"
    "UPDATES\020C\022\030\n\024TOGGLE_FOLLOW_CURSOR\020+\022\027\n\023T"
    "OGGLE_GRID_DISPLAY\020\033\022\036\n\032TOGGLE_COMMAND_B"
    "AR_AT_LEFT\0206\022\035\n\031TOGGLE_COMMAND_BAR_AT_TO"
    "P\0207\022!\n\035TOGGLE_FILE_OPEN_TREE_DISPLAY\020H\022\030"
    "\n\024TOGGLE_MODES_AT_LEFT\0208\022\027\n\023TOGGLE_MODES"
    "_AT_TOP\0209\022\035\n\031TOGGLE_PARALLEL_WAVEFORMS\020*"
    "\022\032\n\026TOGGLE_PREFADER_LEVELS\020.\022\024\n\020TOGGLE_S"
    "ELECTION\020)\022\035\n\031TOGGLE_SHOW_CURSOR_LABELS\020"
    "3\022\031\n\025TOGGLE_SHOW_HELP_PANE\0201\022\035\n\031TOGGLE_S"
    "HOW_LABELS_AT_TOP\0204\022!\n\035TOGGLE_SHOW_SELEC"
    "TION_BUTTONS\0202\022\034\n\030TOGGLE_SHOW_TIMES_AT_T"
    "OP\0205\022\030\n\024TOGGLE_SHOW_TOOLTIPS\0200\022\025\n\021TOGGLE"
    "_START_STOP\020\034\022\031\n\025TOGGLE_STRETCH_ENABLE\020\035"
    "\022\032\n\026TOGGLE_WHOLE_SONG_LOOP\020\036\022\016\n\nTREE_CLO"
    "SE\020\037\022\r\n\tTREE_DOWN\020 \022\r\n\tTREE_LEFT\020!\022\r\n\tTR"
    "EE_OPEN\020\"\022\016\n\nTREE_RIGHT\020#\022\013\n\007TREE_UP\020$\022\010"
    "\n\004UNDO\020%\022\014\n\010UNSELECT\020&\022\022\n\016WHATS_NEW_PAGE"
    "\020I\022\013\n\007ZOOM_IN\020\'\022\014\n\010ZOOM_OUT\020(\022\021\n\rZOOM_OU"
    "T_FULL\020@\022\025\n\021ZOOM_TO_SELECTION\020-\022\r\n\tLAST_"
    "TYPE\020I\022\t\n\004QUIT\020\201 \022\010\n\003DEL\020\202 \022\010\n\003CUT\020\203 \022\t\n"
    "\004COPY\020\204 \022\n\n\005PASTE\020\205 \022\017\n\nSELECT_ALL\020\206 \022\021\n"
    "\014DESELECT_ALL\020\207 \022\017\n\nJUCE_START\020\201 \022\r\n\010JUC"
    "E_END\020\207 \022\017\n\tBANK_SIZE\020\240\215\006\"1\n\010Commands\022%\n"
    "\007command\030\001 \003(\0132\024.rec.command.Command\"&\n\010"
    "KeyValue\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"3\n\007"
    "Mapping\022(\n\tkey_value\030\001 \003(\0132\025.rec.command"
    ".KeyValue", 2249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/command/Command.proto", &protobuf_RegisterTypes);
  Description::default_instance_ = new Description();
  Command::default_instance_ = new Command();
  Commands::default_instance_ = new Commands();
  KeyValue::default_instance_ = new KeyValue();
  Mapping::default_instance_ = new Mapping();
  Description::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Commands::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  Mapping::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fcommand_2fCommand_2eproto {
  StaticDescriptorInitializer_rec_2fcommand_2fCommand_2eproto() {
    protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  }
} static_descriptor_initializer_rec_2fcommand_2fCommand_2eproto_;


// ===================================================================

const ::std::string Description::_default_full_;
const ::std::string Description::_default_help_;
#ifndef _MSC_VER
const int Description::kMenuFieldNumber;
const int Description::kFullFieldNumber;
const int Description::kHelpFieldNumber;
#endif  // !_MSC_VER

Description::Description()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Description::InitAsDefaultInstance() {
}

Description::Description(const Description& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Description::SharedCtor() {
  _cached_size_ = 0;
  full_ = const_cast< ::std::string*>(&_default_full_);
  help_ = const_cast< ::std::string*>(&_default_help_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Description::~Description() {
  SharedDtor();
}

void Description::SharedDtor() {
  if (full_ != &_default_full_) {
    delete full_;
  }
  if (help_ != &_default_help_) {
    delete help_;
  }
  if (this != default_instance_) {
  }
}

void Description::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Description_descriptor_;
}

const Description& Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();  return *default_instance_;
}

Description* Description::default_instance_ = NULL;

Description* Description::New() const {
  return new Description;
}

void Description::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (full_ != &_default_full_) {
        full_->clear();
      }
    }
    if (_has_bit(2)) {
      if (help_ != &_default_help_) {
        help_->clear();
      }
    }
  }
  menu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string menu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_menu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu(0).data(), this->menu(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_menu;
        if (input->ExpectTag(18)) goto parse_full;
        break;
      }
      
      // optional string full = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full().data(), this->full().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help;
        break;
      }
      
      // optional string help = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_help()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help().data(), this->help().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->menu(i).data(), this->menu(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->menu(i), output);
  }
  
  // optional string full = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full().data(), this->full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full(), output);
  }
  
  // optional string help = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->help(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu(i).data(), this->menu(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->menu(i), target);
  }
  
  // optional string full = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full().data(), this->full().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full(), target);
  }
  
  // optional string help = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help().data(), this->help().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->help(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Description::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string full = 2;
    if (has_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full());
    }
    
    // optional string help = 3;
    if (has_help()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->help());
    }
    
  }
  // repeated string menu = 1;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->menu(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Description::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Description* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Description*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Description::MergeFrom(const Description& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_full(from.full());
    }
    if (from._has_bit(2)) {
      set_help(from.help());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Description::CopyFrom(const Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {
  
  return true;
}

void Description::Swap(Description* other) {
  if (other != this) {
    menu_.Swap(&other->menu_);
    std::swap(full_, other->full_);
    std::swap(help_, other->help_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Description::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Description_descriptor_;
  metadata.reflection = Description_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Type_descriptor_;
}
bool Command_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 100000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Type Command::NONE;
const Command_Type Command::ABOUT_THIS_PROGRAM;
const Command_Type Command::ADD_LOOP_POINT;
const Command_Type Command::AUDIO_PREFERENCES;
const Command_Type Command::CHECK_FOR_UPDATES;
const Command_Type Command::CLEAR_NAVIGATOR;
const Command_Type Command::CLEAR_LOOPS;
const Command_Type Command::CLEAR_SAVED_FILE_DATA;
const Command_Type Command::CLOSE_FILE;
const Command_Type Command::DIM_VOLUME_TOGGLE;
const Command_Type Command::EJECT_CDS;
const Command_Type Command::INVERT_LOOP_SELECTION;
const Command_Type Command::JUMP;
const Command_Type Command::JUMP_SELECTED;
const Command_Type Command::KEYBOARD_MAPPINGS;
const Command_Type Command::MIDI_MAPPINGS;
const Command_Type Command::MODE_ADD_LOOP_POINT;
const Command_Type Command::MODE_DRAG;
const Command_Type Command::MODE_SET_TIME;
const Command_Type Command::MODE_ZOOM_IN;
const Command_Type Command::MUTE_VOLUME_TOGGLE;
const Command_Type Command::NUDGE_BEGIN_LEFT;
const Command_Type Command::NUDGE_BEGIN_RIGHT;
const Command_Type Command::NUDGE_END_LEFT;
const Command_Type Command::NUDGE_END_RIGHT;
const Command_Type Command::NUDGE_VOLUME_DOWN;
const Command_Type Command::NUDGE_VOLUME_UP;
const Command_Type Command::OPEN;
const Command_Type Command::OPEN_MANUAL;
const Command_Type Command::RECENT_FILES;
const Command_Type Command::REDO;
const Command_Type Command::REQUEST_SUPPORT;
const Command_Type Command::RESET_GAIN_TO_UNITY;
const Command_Type Command::SAVE_FILE;
const Command_Type Command::SAVE_FILE_SELECTION;
const Command_Type Command::SELECT;
const Command_Type Command::SELECT_ONLY;
const Command_Type Command::SET_SAVE_FORMAT;
const Command_Type Command::TOGGLE_ADVANCED_MENUS;
const Command_Type Command::TOGGLE_AUTOMATIC_UPDATES;
const Command_Type Command::TOGGLE_FOLLOW_CURSOR;
const Command_Type Command::TOGGLE_GRID_DISPLAY;
const Command_Type Command::TOGGLE_COMMAND_BAR_AT_LEFT;
const Command_Type Command::TOGGLE_COMMAND_BAR_AT_TOP;
const Command_Type Command::TOGGLE_FILE_OPEN_TREE_DISPLAY;
const Command_Type Command::TOGGLE_MODES_AT_LEFT;
const Command_Type Command::TOGGLE_MODES_AT_TOP;
const Command_Type Command::TOGGLE_PARALLEL_WAVEFORMS;
const Command_Type Command::TOGGLE_PREFADER_LEVELS;
const Command_Type Command::TOGGLE_SELECTION;
const Command_Type Command::TOGGLE_SHOW_CURSOR_LABELS;
const Command_Type Command::TOGGLE_SHOW_HELP_PANE;
const Command_Type Command::TOGGLE_SHOW_LABELS_AT_TOP;
const Command_Type Command::TOGGLE_SHOW_SELECTION_BUTTONS;
const Command_Type Command::TOGGLE_SHOW_TIMES_AT_TOP;
const Command_Type Command::TOGGLE_SHOW_TOOLTIPS;
const Command_Type Command::TOGGLE_START_STOP;
const Command_Type Command::TOGGLE_STRETCH_ENABLE;
const Command_Type Command::TOGGLE_WHOLE_SONG_LOOP;
const Command_Type Command::TREE_CLOSE;
const Command_Type Command::TREE_DOWN;
const Command_Type Command::TREE_LEFT;
const Command_Type Command::TREE_OPEN;
const Command_Type Command::TREE_RIGHT;
const Command_Type Command::TREE_UP;
const Command_Type Command::UNDO;
const Command_Type Command::UNSELECT;
const Command_Type Command::WHATS_NEW_PAGE;
const Command_Type Command::ZOOM_IN;
const Command_Type Command::ZOOM_OUT;
const Command_Type Command::ZOOM_OUT_FULL;
const Command_Type Command::ZOOM_TO_SELECTION;
const Command_Type Command::LAST_TYPE;
const Command_Type Command::QUIT;
const Command_Type Command::DEL;
const Command_Type Command::CUT;
const Command_Type Command::COPY;
const Command_Type Command::PASTE;
const Command_Type Command::SELECT_ALL;
const Command_Type Command::DESELECT_ALL;
const Command_Type Command::JUCE_START;
const Command_Type Command::JUCE_END;
const Command_Type Command::BANK_SIZE;
const Command_Type Command::Type_MIN;
const Command_Type Command::Type_MAX;
const int Command::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Command::_default_category_;
const ::std::string Command::_default_setter_type_name_;
#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kIndexFieldNumber;
const int Command::kStartIndexFieldNumber;
const int Command::kCategoryFieldNumber;
const int Command::kDescFieldNumber;
const int Command::kKeypressFieldNumber;
const int Command::kIsSetterFieldNumber;
const int Command::kIsGlobalSetterFieldNumber;
const int Command::kAddressFieldNumber;
const int Command::kSetterTypeNameFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
  desc_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
  address_ = const_cast< ::rec::data::AddressProto*>(&::rec::data::AddressProto::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  start_index_ = 0;
  category_ = const_cast< ::std::string*>(&_default_category_);
  desc_ = NULL;
  is_setter_ = false;
  is_global_setter_ = false;
  address_ = NULL;
  setter_type_name_ = const_cast< ::std::string*>(&_default_setter_type_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (category_ != &_default_category_) {
    delete category_;
  }
  if (setter_type_name_ != &_default_setter_type_name_) {
    delete setter_type_name_;
  }
  if (this != default_instance_) {
    delete desc_;
    delete address_;
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
    start_index_ = 0;
    if (_has_bit(3)) {
      if (category_ != &_default_category_) {
        category_->clear();
      }
    }
    if (_has_bit(4)) {
      if (desc_ != NULL) desc_->::rec::command::Description::Clear();
    }
    is_setter_ = false;
    is_global_setter_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (address_ != NULL) address_->::rec::data::AddressProto::Clear();
    }
    if (_has_bit(9)) {
      if (setter_type_name_ != &_default_setter_type_name_) {
        setter_type_name_->clear();
      }
    }
  }
  keypress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Command.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::command::Command_Type_IsValid(value)) {
            set_type(static_cast< ::rec::command::Command_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional sint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &index_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_category;
        break;
      }
      
      // optional string category = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }
      
      // optional .rec.command.Description desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_keypress;
        break;
      }
      
      // repeated string keypress = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keypress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keypress(0).data(), this->keypress(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_keypress;
        if (input->ExpectTag(48)) goto parse_is_setter;
        break;
      }
      
      // optional bool is_setter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_setter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_setter_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_global_setter;
        break;
      }
      
      // optional bool is_global_setter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_global_setter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_global_setter_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_address;
        break;
      }
      
      // optional .rec.data.AddressProto address = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_setter_type_name;
        break;
      }
      
      // optional string setter_type_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setter_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setter_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->setter_type_name().data(), this->setter_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_start_index;
        break;
      }
      
      // optional sint32 start_index = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &start_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Command.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional sint32 index = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->index(), output);
  }
  
  // optional string category = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->category(), output);
  }
  
  // optional .rec.command.Description desc = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->desc(), output);
  }
  
  // repeated string keypress = 5;
  for (int i = 0; i < this->keypress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keypress(i).data(), this->keypress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keypress(i), output);
  }
  
  // optional bool is_setter = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_setter(), output);
  }
  
  // optional bool is_global_setter = 7;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_global_setter(), output);
  }
  
  // optional .rec.data.AddressProto address = 8;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->address(), output);
  }
  
  // optional string setter_type_name = 9;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->setter_type_name().data(), this->setter_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->setter_type_name(), output);
  }
  
  // optional sint32 start_index = 10;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->start_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Command.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional sint32 index = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->index(), target);
  }
  
  // optional string category = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->category(), target);
  }
  
  // optional .rec.command.Description desc = 4;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->desc(), target);
  }
  
  // repeated string keypress = 5;
  for (int i = 0; i < this->keypress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keypress(i).data(), this->keypress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->keypress(i), target);
  }
  
  // optional bool is_setter = 6;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_setter(), target);
  }
  
  // optional bool is_global_setter = 7;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_global_setter(), target);
  }
  
  // optional .rec.data.AddressProto address = 8;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->address(), target);
  }
  
  // optional string setter_type_name = 9;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->setter_type_name().data(), this->setter_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->setter_type_name(), target);
  }
  
  // optional sint32 start_index = 10;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->start_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Command.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional sint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->index());
    }
    
    // optional sint32 start_index = 10;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->start_index());
    }
    
    // optional string category = 3;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
    // optional .rec.command.Description desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc());
    }
    
    // optional bool is_setter = 6;
    if (has_is_setter()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_global_setter = 7;
    if (has_is_global_setter()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rec.data.AddressProto address = 8;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }
    
    // optional string setter_type_name = 9;
    if (has_setter_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->setter_type_name());
    }
    
  }
  // repeated string keypress = 5;
  total_size += 1 * this->keypress_size();
  for (int i = 0; i < this->keypress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keypress(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypress_.MergeFrom(from.keypress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_index(from.index());
    }
    if (from._has_bit(2)) {
      set_start_index(from.start_index());
    }
    if (from._has_bit(3)) {
      set_category(from.category());
    }
    if (from._has_bit(4)) {
      mutable_desc()->::rec::command::Description::MergeFrom(from.desc());
    }
    if (from._has_bit(6)) {
      set_is_setter(from.is_setter());
    }
    if (from._has_bit(7)) {
      set_is_global_setter(from.is_global_setter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_address()->::rec::data::AddressProto::MergeFrom(from.address());
    }
    if (from._has_bit(9)) {
      set_setter_type_name(from.setter_type_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(start_index_, other->start_index_);
    std::swap(category_, other->category_);
    std::swap(desc_, other->desc_);
    keypress_.Swap(&other->keypress_);
    std::swap(is_setter_, other->is_setter_);
    std::swap(is_global_setter_, other->is_global_setter_);
    std::swap(address_, other->address_);
    std::swap(setter_type_name_, other->setter_type_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Commands::kCommandFieldNumber;
#endif  // !_MSC_VER

Commands::Commands()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Commands::InitAsDefaultInstance() {
}

Commands::Commands(const Commands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Commands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Commands::~Commands() {
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_descriptor_;
}

const Commands& Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();  return *default_instance_;
}

Commands* Commands::default_instance_ = NULL;

Commands* Commands::New() const {
  return new Commands;
}

void Commands::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.command.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.command.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Commands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.command.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Commands::ByteSize() const {
  int total_size = 0;
  
  // repeated .rec.command.Command command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Commands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Commands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Commands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {
  
  return true;
}

void Commands::Swap(Commands* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_descriptor_;
  metadata.reflection = Commands_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string KeyValue::_default_key_;
const ::std::string KeyValue::_default_value_;
#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mapping::kKeyValueFieldNumber;
#endif  // !_MSC_VER

Mapping::Mapping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mapping::InitAsDefaultInstance() {
}

Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mapping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mapping::~Mapping() {
  SharedDtor();
}

void Mapping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mapping_descriptor_;
}

const Mapping& Mapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();  return *default_instance_;
}

Mapping* Mapping::default_instance_ = NULL;

Mapping* Mapping::New() const {
  return new Mapping;
}

void Mapping::Clear() {
  key_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.command.KeyValue key_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_key_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.command.KeyValue key_value = 1;
  for (int i = 0; i < this->key_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.command.KeyValue key_value = 1;
  for (int i = 0; i < this->key_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mapping::ByteSize() const {
  int total_size = 0;
  
  // repeated .rec.command.KeyValue key_value = 1;
  total_size += 1 * this->key_value_size();
  for (int i = 0; i < this->key_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_value_.MergeFrom(from.key_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  
  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other != this) {
    key_value_.Swap(&other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mapping_descriptor_;
  metadata.reflection = Mapping_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace rec

// @@protoc_insertion_point(global_scope)
