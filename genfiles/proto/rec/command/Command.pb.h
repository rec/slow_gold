// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/command/Command.proto

#ifndef PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED
#define PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

class KeyMeta;
class KeyPress;
class Description;
class Command;
class Commands;
class KeyValue;
class Mapping;

enum Command_Type {
  Command_Type_NONE = 0,
  Command_Type_ADD_LOOP_POINT = 1,
  Command_Type_AUDIO_PREFERENCES = 2,
  Command_Type_CLEAR_NAVIGATOR = 3,
  Command_Type_CLEAR_LOOPS = 4,
  Command_Type_CLEAR_SAVED_FILE_DATA = 5,
  Command_Type_CLOSE_FILE = 6,
  Command_Type_DIM_VOLUME_TOGGLE = 7,
  Command_Type_EJECT_CDS = 8,
  Command_Type_INVERT_LOOP_SELECTION = 9,
  Command_Type_KEYBOARD_MAPPINGS = 10,
  Command_Type_MIDI_MAPPINGS = 11,
  Command_Type_MUTE_VOLUME_TOGGLE = 12,
  Command_Type_NUDGE_BEGIN_LEFT = 13,
  Command_Type_NUDGE_BEGIN_RIGHT = 14,
  Command_Type_NUDGE_END_LEFT = 15,
  Command_Type_NUDGE_END_RIGHT = 16,
  Command_Type_NUDGE_VOLUME_DOWN = 17,
  Command_Type_NUDGE_VOLUME_UP = 18,
  Command_Type_OPEN = 19,
  Command_Type_RECENT_FILES = 20,
  Command_Type_REDO = 21,
  Command_Type_RESET_GAIN_TO_UNITY = 22,
  Command_Type_TOGGLE_WHOLE_SONG_LOOP = 23,
  Command_Type_TOGGLE_START_STOP = 24,
  Command_Type_TOGGLE_STRETCH_ENABLE = 25,
  Command_Type_TREE_CLOSE = 26,
  Command_Type_TREE_DOWN = 27,
  Command_Type_TREE_LEFT = 28,
  Command_Type_TREE_OPEN = 29,
  Command_Type_TREE_RIGHT = 30,
  Command_Type_TREE_UP = 31,
  Command_Type_UNDO = 32,
  Command_Type_ZOOM_IN = 33,
  Command_Type_ZOOM_OUT = 34,
  Command_Type_QUIT = 4097,
  Command_Type_DEL = 4098,
  Command_Type_CUT = 4099,
  Command_Type_COPY = 4100,
  Command_Type_PASTE = 4101,
  Command_Type_SELECT_ALL = 4102,
  Command_Type_DESELECT_ALL = 4103,
  Command_Type_SELECT = 1000000,
  Command_Type_SELECT_ONLY = 1100000,
  Command_Type_TOGGLE = 1200000,
  Command_Type_UNSELECT = 1300000,
  Command_Type_JUMP = 1400000,
  Command_Type_JUMP_SELECTED = 1500000,
  Command_Type_BANK_START = 1000000,
  Command_Type_BANK_END = 1600000,
  Command_Type_BANK_SIZE = 100000,
  Command_Type_LAST_COMMAND = 34
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_NONE;
const Command_Type Command_Type_Type_MAX = Command_Type_BANK_END;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
// ===================================================================

class KeyMeta : public ::google::protobuf::Message {
 public:
  KeyMeta();
  virtual ~KeyMeta();
  
  KeyMeta(const KeyMeta& from);
  
  inline KeyMeta& operator=(const KeyMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyMeta& default_instance();
  
  void Swap(KeyMeta* other);
  
  // implements Message ----------------------------------------------
  
  KeyMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyMeta& from);
  void MergeFrom(const KeyMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool shift = 1;
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 1;
  inline bool shift() const;
  inline void set_shift(bool value);
  
  // optional bool command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline bool command() const;
  inline void set_command(bool value);
  
  // optional bool alt = 3;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 3;
  inline bool alt() const;
  inline void set_alt(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.command.KeyMeta)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool shift_;
  bool command_;
  bool alt_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyMeta* default_instance_;
};
// -------------------------------------------------------------------

class KeyPress : public ::google::protobuf::Message {
 public:
  KeyPress();
  virtual ~KeyPress();
  
  KeyPress(const KeyPress& from);
  
  inline KeyPress& operator=(const KeyPress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyPress& default_instance();
  
  void Swap(KeyPress* other);
  
  // implements Message ----------------------------------------------
  
  KeyPress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyPress& from);
  void MergeFrom(const KeyPress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.command.KeyMeta meta = 1;
  inline bool has_meta() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 1;
  inline const ::rec::command::KeyMeta& meta() const;
  inline ::rec::command::KeyMeta* mutable_meta();
  
  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // @@protoc_insertion_point(class_scope:rec.command.KeyPress)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::command::KeyMeta* meta_;
  ::std::string* key_;
  static const ::std::string _default_key_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyPress* default_instance_;
};
// -------------------------------------------------------------------

class Description : public ::google::protobuf::Message {
 public:
  Description();
  virtual ~Description();
  
  Description(const Description& from);
  
  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Description& default_instance();
  
  void Swap(Description* other);
  
  // implements Message ----------------------------------------------
  
  Description* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string menu = 1;
  inline bool has_menu() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 1;
  inline const ::std::string& menu() const;
  inline void set_menu(const ::std::string& value);
  inline void set_menu(const char* value);
  inline void set_menu(const char* value, size_t size);
  inline ::std::string* mutable_menu();
  
  // optional string full = 2;
  inline bool has_full() const;
  inline void clear_full();
  static const int kFullFieldNumber = 2;
  inline const ::std::string& full() const;
  inline void set_full(const ::std::string& value);
  inline void set_full(const char* value);
  inline void set_full(const char* value, size_t size);
  inline ::std::string* mutable_full();
  
  // optional string help = 3;
  inline bool has_help() const;
  inline void clear_help();
  static const int kHelpFieldNumber = 3;
  inline const ::std::string& help() const;
  inline void set_help(const ::std::string& value);
  inline void set_help(const char* value);
  inline void set_help(const char* value, size_t size);
  inline ::std::string* mutable_help();
  
  // @@protoc_insertion_point(class_scope:rec.command.Description)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* menu_;
  static const ::std::string _default_menu_;
  ::std::string* full_;
  static const ::std::string _default_full_;
  ::std::string* help_;
  static const ::std::string _default_help_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Description* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Command_Type Type;
  static const Type NONE = Command_Type_NONE;
  static const Type ADD_LOOP_POINT = Command_Type_ADD_LOOP_POINT;
  static const Type AUDIO_PREFERENCES = Command_Type_AUDIO_PREFERENCES;
  static const Type CLEAR_NAVIGATOR = Command_Type_CLEAR_NAVIGATOR;
  static const Type CLEAR_LOOPS = Command_Type_CLEAR_LOOPS;
  static const Type CLEAR_SAVED_FILE_DATA = Command_Type_CLEAR_SAVED_FILE_DATA;
  static const Type CLOSE_FILE = Command_Type_CLOSE_FILE;
  static const Type DIM_VOLUME_TOGGLE = Command_Type_DIM_VOLUME_TOGGLE;
  static const Type EJECT_CDS = Command_Type_EJECT_CDS;
  static const Type INVERT_LOOP_SELECTION = Command_Type_INVERT_LOOP_SELECTION;
  static const Type KEYBOARD_MAPPINGS = Command_Type_KEYBOARD_MAPPINGS;
  static const Type MIDI_MAPPINGS = Command_Type_MIDI_MAPPINGS;
  static const Type MUTE_VOLUME_TOGGLE = Command_Type_MUTE_VOLUME_TOGGLE;
  static const Type NUDGE_BEGIN_LEFT = Command_Type_NUDGE_BEGIN_LEFT;
  static const Type NUDGE_BEGIN_RIGHT = Command_Type_NUDGE_BEGIN_RIGHT;
  static const Type NUDGE_END_LEFT = Command_Type_NUDGE_END_LEFT;
  static const Type NUDGE_END_RIGHT = Command_Type_NUDGE_END_RIGHT;
  static const Type NUDGE_VOLUME_DOWN = Command_Type_NUDGE_VOLUME_DOWN;
  static const Type NUDGE_VOLUME_UP = Command_Type_NUDGE_VOLUME_UP;
  static const Type OPEN = Command_Type_OPEN;
  static const Type RECENT_FILES = Command_Type_RECENT_FILES;
  static const Type REDO = Command_Type_REDO;
  static const Type RESET_GAIN_TO_UNITY = Command_Type_RESET_GAIN_TO_UNITY;
  static const Type TOGGLE_WHOLE_SONG_LOOP = Command_Type_TOGGLE_WHOLE_SONG_LOOP;
  static const Type TOGGLE_START_STOP = Command_Type_TOGGLE_START_STOP;
  static const Type TOGGLE_STRETCH_ENABLE = Command_Type_TOGGLE_STRETCH_ENABLE;
  static const Type TREE_CLOSE = Command_Type_TREE_CLOSE;
  static const Type TREE_DOWN = Command_Type_TREE_DOWN;
  static const Type TREE_LEFT = Command_Type_TREE_LEFT;
  static const Type TREE_OPEN = Command_Type_TREE_OPEN;
  static const Type TREE_RIGHT = Command_Type_TREE_RIGHT;
  static const Type TREE_UP = Command_Type_TREE_UP;
  static const Type UNDO = Command_Type_UNDO;
  static const Type ZOOM_IN = Command_Type_ZOOM_IN;
  static const Type ZOOM_OUT = Command_Type_ZOOM_OUT;
  static const Type QUIT = Command_Type_QUIT;
  static const Type DEL = Command_Type_DEL;
  static const Type CUT = Command_Type_CUT;
  static const Type COPY = Command_Type_COPY;
  static const Type PASTE = Command_Type_PASTE;
  static const Type SELECT_ALL = Command_Type_SELECT_ALL;
  static const Type DESELECT_ALL = Command_Type_DESELECT_ALL;
  static const Type SELECT = Command_Type_SELECT;
  static const Type SELECT_ONLY = Command_Type_SELECT_ONLY;
  static const Type TOGGLE = Command_Type_TOGGLE;
  static const Type UNSELECT = Command_Type_UNSELECT;
  static const Type JUMP = Command_Type_JUMP;
  static const Type JUMP_SELECTED = Command_Type_JUMP_SELECTED;
  static const Type BANK_START = Command_Type_BANK_START;
  static const Type BANK_END = Command_Type_BANK_END;
  static const Type BANK_SIZE = Command_Type_BANK_SIZE;
  static const Type LAST_COMMAND = Command_Type_LAST_COMMAND;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.command.Command.Type command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::rec::command::Command_Type command() const;
  inline void set_command(::rec::command::Command_Type value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string category = 3;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 3;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  
  // optional .rec.command.Description description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::rec::command::Description& description() const;
  inline ::rec::command::Description* mutable_description();
  
  // optional .rec.command.KeyPress key_press = 5;
  inline bool has_key_press() const;
  inline void clear_key_press();
  static const int kKeyPressFieldNumber = 5;
  inline const ::rec::command::KeyPress& key_press() const;
  inline ::rec::command::KeyPress* mutable_key_press();
  
  // @@protoc_insertion_point(class_scope:rec.command.Command)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int command_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* category_;
  static const ::std::string _default_category_;
  ::rec::command::Description* description_;
  ::rec::command::KeyPress* key_press_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class Commands : public ::google::protobuf::Message {
 public:
  Commands();
  virtual ~Commands();
  
  Commands(const Commands& from);
  
  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands& default_instance();
  
  void Swap(Commands* other);
  
  // implements Message ----------------------------------------------
  
  Commands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.command.Command command = 1;
  inline int command_size() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::rec::command::Command& command(int index) const;
  inline ::rec::command::Command* mutable_command(int index);
  inline ::rec::command::Command* add_command();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::command::Command >&
      command() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::command::Command >*
      mutable_command();
  
  // @@protoc_insertion_point(class_scope:rec.command.Commands)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::command::Command > command_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Commands* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();
  
  KeyValue(const KeyValue& from);
  
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();
  
  void Swap(KeyValue* other);
  
  // implements Message ----------------------------------------------
  
  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:rec.command.KeyValue)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Mapping : public ::google::protobuf::Message {
 public:
  Mapping();
  virtual ~Mapping();
  
  Mapping(const Mapping& from);
  
  inline Mapping& operator=(const Mapping& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mapping& default_instance();
  
  void Swap(Mapping* other);
  
  // implements Message ----------------------------------------------
  
  Mapping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mapping& from);
  void MergeFrom(const Mapping& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.command.KeyValue key_value = 1;
  inline int key_value_size() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 1;
  inline const ::rec::command::KeyValue& key_value(int index) const;
  inline ::rec::command::KeyValue* mutable_key_value(int index);
  inline ::rec::command::KeyValue* add_key_value();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::command::KeyValue >&
      key_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::command::KeyValue >*
      mutable_key_value();
  
  // @@protoc_insertion_point(class_scope:rec.command.Mapping)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::command::KeyValue > key_value_;
  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Mapping* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyMeta

// optional bool shift = 1;
inline bool KeyMeta::has_shift() const {
  return _has_bit(0);
}
inline void KeyMeta::clear_shift() {
  shift_ = false;
  _clear_bit(0);
}
inline bool KeyMeta::shift() const {
  return shift_;
}
inline void KeyMeta::set_shift(bool value) {
  _set_bit(0);
  shift_ = value;
}

// optional bool command = 2;
inline bool KeyMeta::has_command() const {
  return _has_bit(1);
}
inline void KeyMeta::clear_command() {
  command_ = false;
  _clear_bit(1);
}
inline bool KeyMeta::command() const {
  return command_;
}
inline void KeyMeta::set_command(bool value) {
  _set_bit(1);
  command_ = value;
}

// optional bool alt = 3;
inline bool KeyMeta::has_alt() const {
  return _has_bit(2);
}
inline void KeyMeta::clear_alt() {
  alt_ = false;
  _clear_bit(2);
}
inline bool KeyMeta::alt() const {
  return alt_;
}
inline void KeyMeta::set_alt(bool value) {
  _set_bit(2);
  alt_ = value;
}

// -------------------------------------------------------------------

// KeyPress

// optional .rec.command.KeyMeta meta = 1;
inline bool KeyPress::has_meta() const {
  return _has_bit(0);
}
inline void KeyPress::clear_meta() {
  if (meta_ != NULL) meta_->::rec::command::KeyMeta::Clear();
  _clear_bit(0);
}
inline const ::rec::command::KeyMeta& KeyPress::meta() const {
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::rec::command::KeyMeta* KeyPress::mutable_meta() {
  _set_bit(0);
  if (meta_ == NULL) meta_ = new ::rec::command::KeyMeta;
  return meta_;
}

// optional string key = 2;
inline bool KeyPress::has_key() const {
  return _has_bit(1);
}
inline void KeyPress::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& KeyPress::key() const {
  return *key_;
}
inline void KeyPress::set_key(const ::std::string& value) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyPress::set_key(const char* value) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyPress::set_key(const char* value, size_t size) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyPress::mutable_key() {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// -------------------------------------------------------------------

// Description

// optional string menu = 1;
inline bool Description::has_menu() const {
  return _has_bit(0);
}
inline void Description::clear_menu() {
  if (menu_ != &_default_menu_) {
    menu_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Description::menu() const {
  return *menu_;
}
inline void Description::set_menu(const ::std::string& value) {
  _set_bit(0);
  if (menu_ == &_default_menu_) {
    menu_ = new ::std::string;
  }
  menu_->assign(value);
}
inline void Description::set_menu(const char* value) {
  _set_bit(0);
  if (menu_ == &_default_menu_) {
    menu_ = new ::std::string;
  }
  menu_->assign(value);
}
inline void Description::set_menu(const char* value, size_t size) {
  _set_bit(0);
  if (menu_ == &_default_menu_) {
    menu_ = new ::std::string;
  }
  menu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::mutable_menu() {
  _set_bit(0);
  if (menu_ == &_default_menu_) {
    menu_ = new ::std::string;
  }
  return menu_;
}

// optional string full = 2;
inline bool Description::has_full() const {
  return _has_bit(1);
}
inline void Description::clear_full() {
  if (full_ != &_default_full_) {
    full_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Description::full() const {
  return *full_;
}
inline void Description::set_full(const ::std::string& value) {
  _set_bit(1);
  if (full_ == &_default_full_) {
    full_ = new ::std::string;
  }
  full_->assign(value);
}
inline void Description::set_full(const char* value) {
  _set_bit(1);
  if (full_ == &_default_full_) {
    full_ = new ::std::string;
  }
  full_->assign(value);
}
inline void Description::set_full(const char* value, size_t size) {
  _set_bit(1);
  if (full_ == &_default_full_) {
    full_ = new ::std::string;
  }
  full_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::mutable_full() {
  _set_bit(1);
  if (full_ == &_default_full_) {
    full_ = new ::std::string;
  }
  return full_;
}

// optional string help = 3;
inline bool Description::has_help() const {
  return _has_bit(2);
}
inline void Description::clear_help() {
  if (help_ != &_default_help_) {
    help_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Description::help() const {
  return *help_;
}
inline void Description::set_help(const ::std::string& value) {
  _set_bit(2);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Description::set_help(const char* value) {
  _set_bit(2);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Description::set_help(const char* value, size_t size) {
  _set_bit(2);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  help_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::mutable_help() {
  _set_bit(2);
  if (help_ == &_default_help_) {
    help_ = new ::std::string;
  }
  return help_;
}

// -------------------------------------------------------------------

// Command

// optional .rec.command.Command.Type command = 1;
inline bool Command::has_command() const {
  return _has_bit(0);
}
inline void Command::clear_command() {
  command_ = 0;
  _clear_bit(0);
}
inline ::rec::command::Command_Type Command::command() const {
  return static_cast< ::rec::command::Command_Type >(command_);
}
inline void Command::set_command(::rec::command::Command_Type value) {
  GOOGLE_DCHECK(::rec::command::Command_Type_IsValid(value));
  _set_bit(0);
  command_ = value;
}

// optional string name = 2;
inline bool Command::has_name() const {
  return _has_bit(1);
}
inline void Command::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Command::name() const {
  return *name_;
}
inline void Command::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string category = 3;
inline bool Command::has_category() const {
  return _has_bit(2);
}
inline void Command::clear_category() {
  if (category_ != &_default_category_) {
    category_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Command::category() const {
  return *category_;
}
inline void Command::set_category(const ::std::string& value) {
  _set_bit(2);
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void Command::set_category(const char* value) {
  _set_bit(2);
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void Command::set_category(const char* value, size_t size) {
  _set_bit(2);
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_category() {
  _set_bit(2);
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  return category_;
}

// optional .rec.command.Description description = 4;
inline bool Command::has_description() const {
  return _has_bit(3);
}
inline void Command::clear_description() {
  if (description_ != NULL) description_->::rec::command::Description::Clear();
  _clear_bit(3);
}
inline const ::rec::command::Description& Command::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::rec::command::Description* Command::mutable_description() {
  _set_bit(3);
  if (description_ == NULL) description_ = new ::rec::command::Description;
  return description_;
}

// optional .rec.command.KeyPress key_press = 5;
inline bool Command::has_key_press() const {
  return _has_bit(4);
}
inline void Command::clear_key_press() {
  if (key_press_ != NULL) key_press_->::rec::command::KeyPress::Clear();
  _clear_bit(4);
}
inline const ::rec::command::KeyPress& Command::key_press() const {
  return key_press_ != NULL ? *key_press_ : *default_instance_->key_press_;
}
inline ::rec::command::KeyPress* Command::mutable_key_press() {
  _set_bit(4);
  if (key_press_ == NULL) key_press_ = new ::rec::command::KeyPress;
  return key_press_;
}

// -------------------------------------------------------------------

// Commands

// repeated .rec.command.Command command = 1;
inline int Commands::command_size() const {
  return command_.size();
}
inline void Commands::clear_command() {
  command_.Clear();
}
inline const ::rec::command::Command& Commands::command(int index) const {
  return command_.Get(index);
}
inline ::rec::command::Command* Commands::mutable_command(int index) {
  return command_.Mutable(index);
}
inline ::rec::command::Command* Commands::add_command() {
  return command_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::command::Command >&
Commands::command() const {
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::command::Command >*
Commands::mutable_command() {
  return &command_;
}

// -------------------------------------------------------------------

// KeyValue

// optional string key = 1;
inline bool KeyValue::has_key() const {
  return _has_bit(0);
}
inline void KeyValue::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& KeyValue::key() const {
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional string value = 2;
inline bool KeyValue::has_value() const {
  return _has_bit(1);
}
inline void KeyValue::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& KeyValue::value() const {
  return *value_;
}
inline void KeyValue::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// Mapping

// repeated .rec.command.KeyValue key_value = 1;
inline int Mapping::key_value_size() const {
  return key_value_.size();
}
inline void Mapping::clear_key_value() {
  key_value_.Clear();
}
inline const ::rec::command::KeyValue& Mapping::key_value(int index) const {
  return key_value_.Get(index);
}
inline ::rec::command::KeyValue* Mapping::mutable_key_value(int index) {
  return key_value_.Mutable(index);
}
inline ::rec::command::KeyValue* Mapping::add_key_value() {
  return key_value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::command::KeyValue >&
Mapping::key_value() const {
  return key_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::command::KeyValue >*
Mapping::mutable_key_value() {
  return &key_value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::command::Command_Type>() {
  return ::rec::command::Command_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED
