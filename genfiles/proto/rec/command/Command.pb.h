// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/command/Command.proto

#ifndef PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED
#define PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/data/proto/Address.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace command {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

class Description;
class Setter;
class Command;
class Commands;

enum Command_Type {
  Command_Type_NONE = 0,
  Command_Type_QUIT = 4097,
  Command_Type_DEL = 4098,
  Command_Type_CUT = 4099,
  Command_Type_COPY = 4100,
  Command_Type_PASTE = 4101,
  Command_Type_SELECT_ALL = 4102,
  Command_Type_DESELECT_ALL = 4103,
  Command_Type_JUCE_START = 4096,
  Command_Type_JUCE_END = 4104,
  Command_Type_BANK_SIZE = 100000
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_NONE;
const Command_Type Command_Type_Type_MAX = Command_Type_BANK_SIZE;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
// ===================================================================

class Description : public ::google::protobuf::Message {
 public:
  Description();
  virtual ~Description();

  Description(const Description& from);

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Description& default_instance();

  void Swap(Description* other);

  // implements Message ----------------------------------------------

  Description* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string menu = 1;
  inline int menu_size() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 1;
  inline const ::std::string& menu(int index) const;
  inline ::std::string* mutable_menu(int index);
  inline void set_menu(int index, const ::std::string& value);
  inline void set_menu(int index, const char* value);
  inline void set_menu(int index, const char* value, size_t size);
  inline ::std::string* add_menu();
  inline void add_menu(const ::std::string& value);
  inline void add_menu(const char* value);
  inline void add_menu(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& menu() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_menu();

  // repeated string full = 2;
  inline int full_size() const;
  inline void clear_full();
  static const int kFullFieldNumber = 2;
  inline const ::std::string& full(int index) const;
  inline ::std::string* mutable_full(int index);
  inline void set_full(int index, const ::std::string& value);
  inline void set_full(int index, const char* value);
  inline void set_full(int index, const char* value, size_t size);
  inline ::std::string* add_full();
  inline void add_full(const ::std::string& value);
  inline void add_full(const char* value);
  inline void add_full(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& full() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_full();

  // optional string help = 3;
  inline bool has_help() const;
  inline void clear_help();
  static const int kHelpFieldNumber = 3;
  inline const ::std::string& help() const;
  inline void set_help(const ::std::string& value);
  inline void set_help(const char* value);
  inline void set_help(const char* value, size_t size);
  inline ::std::string* mutable_help();
  inline ::std::string* release_help();
  inline void set_allocated_help(::std::string* help);

  // @@protoc_insertion_point(class_scope:rec.command.Description)
 private:
  inline void set_has_help();
  inline void clear_has_help();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> menu_;
  ::google::protobuf::RepeatedPtrField< ::std::string> full_;
  ::std::string* help_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

  void InitAsDefaultInstance();
  static Description* default_instance_;
};
// -------------------------------------------------------------------

class Setter : public ::google::protobuf::Message {
 public:
  Setter();
  virtual ~Setter();

  Setter(const Setter& from);

  inline Setter& operator=(const Setter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Setter& default_instance();

  void Swap(Setter* other);

  // implements Message ----------------------------------------------

  Setter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Setter& from);
  void MergeFrom(const Setter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_global = 1 [default = true];
  inline bool has_is_global() const;
  inline void clear_is_global();
  static const int kIsGlobalFieldNumber = 1;
  inline bool is_global() const;
  inline void set_is_global(bool value);

  // optional .rec.data.AddressProto address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::rec::data::AddressProto& address() const;
  inline ::rec::data::AddressProto* mutable_address();
  inline ::rec::data::AddressProto* release_address();
  inline void set_allocated_address(::rec::data::AddressProto* address);

  // optional string type_name = 3;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 3;
  inline const ::std::string& type_name() const;
  inline void set_type_name(const ::std::string& value);
  inline void set_type_name(const char* value);
  inline void set_type_name(const char* value, size_t size);
  inline ::std::string* mutable_type_name();
  inline ::std::string* release_type_name();
  inline void set_allocated_type_name(::std::string* type_name);

  // @@protoc_insertion_point(class_scope:rec.command.Setter)
 private:
  inline void set_has_is_global();
  inline void clear_has_is_global();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_type_name();
  inline void clear_has_type_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::data::AddressProto* address_;
  ::std::string* type_name_;
  bool is_global_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

  void InitAsDefaultInstance();
  static Setter* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Command_Type Type;
  static const Type NONE = Command_Type_NONE;
  static const Type QUIT = Command_Type_QUIT;
  static const Type DEL = Command_Type_DEL;
  static const Type CUT = Command_Type_CUT;
  static const Type COPY = Command_Type_COPY;
  static const Type PASTE = Command_Type_PASTE;
  static const Type SELECT_ALL = Command_Type_SELECT_ALL;
  static const Type DESELECT_ALL = Command_Type_DESELECT_ALL;
  static const Type JUCE_START = Command_Type_JUCE_START;
  static const Type JUCE_END = Command_Type_JUCE_END;
  static const Type BANK_SIZE = Command_Type_BANK_SIZE;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::google::protobuf::uint32 command() const;
  inline void set_command(::google::protobuf::uint32 value);

  // optional sint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional sint32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional string menu = 4;
  inline bool has_menu() const;
  inline void clear_menu();
  static const int kMenuFieldNumber = 4;
  inline const ::std::string& menu() const;
  inline void set_menu(const ::std::string& value);
  inline void set_menu(const char* value);
  inline void set_menu(const char* value, size_t size);
  inline ::std::string* mutable_menu();
  inline ::std::string* release_menu();
  inline void set_allocated_menu(::std::string* menu);

  // optional .rec.command.Description desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::rec::command::Description& desc() const;
  inline ::rec::command::Description* mutable_desc();
  inline ::rec::command::Description* release_desc();
  inline void set_allocated_desc(::rec::command::Description* desc);

  // repeated string keypress = 6;
  inline int keypress_size() const;
  inline void clear_keypress();
  static const int kKeypressFieldNumber = 6;
  inline const ::std::string& keypress(int index) const;
  inline ::std::string* mutable_keypress(int index);
  inline void set_keypress(int index, const ::std::string& value);
  inline void set_keypress(int index, const char* value);
  inline void set_keypress(int index, const char* value, size_t size);
  inline ::std::string* add_keypress();
  inline void add_keypress(const ::std::string& value);
  inline void add_keypress(const char* value);
  inline void add_keypress(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keypress() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keypress();

  // optional .rec.command.Setter setter = 7;
  inline bool has_setter() const;
  inline void clear_setter();
  static const int kSetterFieldNumber = 7;
  inline const ::rec::command::Setter& setter() const;
  inline ::rec::command::Setter* mutable_setter();
  inline ::rec::command::Setter* release_setter();
  inline void set_allocated_setter(::rec::command::Setter* setter);

  // @@protoc_insertion_point(class_scope:rec.command.Command)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_menu();
  inline void clear_has_menu();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_setter();
  inline void clear_has_setter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 command_;
  ::google::protobuf::int32 index_;
  ::std::string* menu_;
  ::rec::command::Description* desc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keypress_;
  ::rec::command::Setter* setter_;
  ::google::protobuf::int32 start_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class Commands : public ::google::protobuf::Message {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Commands& default_instance();

  void Swap(Commands* other);

  // implements Message ----------------------------------------------

  Commands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.command.Command command = 1;
  inline int command_size() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::rec::command::Command& command(int index) const;
  inline ::rec::command::Command* mutable_command(int index);
  inline ::rec::command::Command* add_command();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::command::Command >&
      command() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::command::Command >*
      mutable_command();

  // @@protoc_insertion_point(class_scope:rec.command.Commands)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::command::Command > command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_AssignDesc_rec_2fcommand_2fCommand_2eproto();
  friend void protobuf_ShutdownFile_rec_2fcommand_2fCommand_2eproto();

  void InitAsDefaultInstance();
  static Commands* default_instance_;
};
// ===================================================================


// ===================================================================

// Description

// repeated string menu = 1;
inline int Description::menu_size() const {
  return menu_.size();
}
inline void Description::clear_menu() {
  menu_.Clear();
}
inline const ::std::string& Description::menu(int index) const {
  return menu_.Get(index);
}
inline ::std::string* Description::mutable_menu(int index) {
  return menu_.Mutable(index);
}
inline void Description::set_menu(int index, const ::std::string& value) {
  menu_.Mutable(index)->assign(value);
}
inline void Description::set_menu(int index, const char* value) {
  menu_.Mutable(index)->assign(value);
}
inline void Description::set_menu(int index, const char* value, size_t size) {
  menu_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::add_menu() {
  return menu_.Add();
}
inline void Description::add_menu(const ::std::string& value) {
  menu_.Add()->assign(value);
}
inline void Description::add_menu(const char* value) {
  menu_.Add()->assign(value);
}
inline void Description::add_menu(const char* value, size_t size) {
  menu_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Description::menu() const {
  return menu_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Description::mutable_menu() {
  return &menu_;
}

// repeated string full = 2;
inline int Description::full_size() const {
  return full_.size();
}
inline void Description::clear_full() {
  full_.Clear();
}
inline const ::std::string& Description::full(int index) const {
  return full_.Get(index);
}
inline ::std::string* Description::mutable_full(int index) {
  return full_.Mutable(index);
}
inline void Description::set_full(int index, const ::std::string& value) {
  full_.Mutable(index)->assign(value);
}
inline void Description::set_full(int index, const char* value) {
  full_.Mutable(index)->assign(value);
}
inline void Description::set_full(int index, const char* value, size_t size) {
  full_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::add_full() {
  return full_.Add();
}
inline void Description::add_full(const ::std::string& value) {
  full_.Add()->assign(value);
}
inline void Description::add_full(const char* value) {
  full_.Add()->assign(value);
}
inline void Description::add_full(const char* value, size_t size) {
  full_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Description::full() const {
  return full_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Description::mutable_full() {
  return &full_;
}

// optional string help = 3;
inline bool Description::has_help() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Description::set_has_help() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Description::clear_has_help() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Description::clear_help() {
  if (help_ != &::google::protobuf::internal::kEmptyString) {
    help_->clear();
  }
  clear_has_help();
}
inline const ::std::string& Description::help() const {
  return *help_;
}
inline void Description::set_help(const ::std::string& value) {
  set_has_help();
  if (help_ == &::google::protobuf::internal::kEmptyString) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Description::set_help(const char* value) {
  set_has_help();
  if (help_ == &::google::protobuf::internal::kEmptyString) {
    help_ = new ::std::string;
  }
  help_->assign(value);
}
inline void Description::set_help(const char* value, size_t size) {
  set_has_help();
  if (help_ == &::google::protobuf::internal::kEmptyString) {
    help_ = new ::std::string;
  }
  help_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Description::mutable_help() {
  set_has_help();
  if (help_ == &::google::protobuf::internal::kEmptyString) {
    help_ = new ::std::string;
  }
  return help_;
}
inline ::std::string* Description::release_help() {
  clear_has_help();
  if (help_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = help_;
    help_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Description::set_allocated_help(::std::string* help) {
  if (help_ != &::google::protobuf::internal::kEmptyString) {
    delete help_;
  }
  if (help) {
    set_has_help();
    help_ = help;
  } else {
    clear_has_help();
    help_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Setter

// optional bool is_global = 1 [default = true];
inline bool Setter::has_is_global() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Setter::set_has_is_global() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Setter::clear_has_is_global() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Setter::clear_is_global() {
  is_global_ = true;
  clear_has_is_global();
}
inline bool Setter::is_global() const {
  return is_global_;
}
inline void Setter::set_is_global(bool value) {
  set_has_is_global();
  is_global_ = value;
}

// optional .rec.data.AddressProto address = 2;
inline bool Setter::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Setter::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Setter::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Setter::clear_address() {
  if (address_ != NULL) address_->::rec::data::AddressProto::Clear();
  clear_has_address();
}
inline const ::rec::data::AddressProto& Setter::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::rec::data::AddressProto* Setter::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::rec::data::AddressProto;
  return address_;
}
inline ::rec::data::AddressProto* Setter::release_address() {
  clear_has_address();
  ::rec::data::AddressProto* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Setter::set_allocated_address(::rec::data::AddressProto* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
}

// optional string type_name = 3;
inline bool Setter::has_type_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Setter::set_has_type_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Setter::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Setter::clear_type_name() {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    type_name_->clear();
  }
  clear_has_type_name();
}
inline const ::std::string& Setter::type_name() const {
  return *type_name_;
}
inline void Setter::set_type_name(const ::std::string& value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void Setter::set_type_name(const char* value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void Setter::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Setter::mutable_type_name() {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  return type_name_;
}
inline ::std::string* Setter::release_type_name() {
  clear_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_name_;
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Setter::set_allocated_type_name(::std::string* type_name) {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (type_name) {
    set_has_type_name();
    type_name_ = type_name;
  } else {
    clear_has_type_name();
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Command

// optional uint32 command = 1;
inline bool Command::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_command() {
  command_ = 0u;
  clear_has_command();
}
inline ::google::protobuf::uint32 Command::command() const {
  return command_;
}
inline void Command::set_command(::google::protobuf::uint32 value) {
  set_has_command();
  command_ = value;
}

// optional sint32 index = 2;
inline bool Command::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Command::index() const {
  return index_;
}
inline void Command::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional sint32 start_index = 3;
inline bool Command::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 Command::start_index() const {
  return start_index_;
}
inline void Command::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional string menu = 4;
inline bool Command::has_menu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_menu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_menu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_menu() {
  if (menu_ != &::google::protobuf::internal::kEmptyString) {
    menu_->clear();
  }
  clear_has_menu();
}
inline const ::std::string& Command::menu() const {
  return *menu_;
}
inline void Command::set_menu(const ::std::string& value) {
  set_has_menu();
  if (menu_ == &::google::protobuf::internal::kEmptyString) {
    menu_ = new ::std::string;
  }
  menu_->assign(value);
}
inline void Command::set_menu(const char* value) {
  set_has_menu();
  if (menu_ == &::google::protobuf::internal::kEmptyString) {
    menu_ = new ::std::string;
  }
  menu_->assign(value);
}
inline void Command::set_menu(const char* value, size_t size) {
  set_has_menu();
  if (menu_ == &::google::protobuf::internal::kEmptyString) {
    menu_ = new ::std::string;
  }
  menu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_menu() {
  set_has_menu();
  if (menu_ == &::google::protobuf::internal::kEmptyString) {
    menu_ = new ::std::string;
  }
  return menu_;
}
inline ::std::string* Command::release_menu() {
  clear_has_menu();
  if (menu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = menu_;
    menu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_menu(::std::string* menu) {
  if (menu_ != &::google::protobuf::internal::kEmptyString) {
    delete menu_;
  }
  if (menu) {
    set_has_menu();
    menu_ = menu;
  } else {
    clear_has_menu();
    menu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rec.command.Description desc = 5;
inline bool Command::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_desc() {
  if (desc_ != NULL) desc_->::rec::command::Description::Clear();
  clear_has_desc();
}
inline const ::rec::command::Description& Command::desc() const {
  return desc_ != NULL ? *desc_ : *default_instance_->desc_;
}
inline ::rec::command::Description* Command::mutable_desc() {
  set_has_desc();
  if (desc_ == NULL) desc_ = new ::rec::command::Description;
  return desc_;
}
inline ::rec::command::Description* Command::release_desc() {
  clear_has_desc();
  ::rec::command::Description* temp = desc_;
  desc_ = NULL;
  return temp;
}
inline void Command::set_allocated_desc(::rec::command::Description* desc) {
  delete desc_;
  desc_ = desc;
  if (desc) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
}

// repeated string keypress = 6;
inline int Command::keypress_size() const {
  return keypress_.size();
}
inline void Command::clear_keypress() {
  keypress_.Clear();
}
inline const ::std::string& Command::keypress(int index) const {
  return keypress_.Get(index);
}
inline ::std::string* Command::mutable_keypress(int index) {
  return keypress_.Mutable(index);
}
inline void Command::set_keypress(int index, const ::std::string& value) {
  keypress_.Mutable(index)->assign(value);
}
inline void Command::set_keypress(int index, const char* value) {
  keypress_.Mutable(index)->assign(value);
}
inline void Command::set_keypress(int index, const char* value, size_t size) {
  keypress_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::add_keypress() {
  return keypress_.Add();
}
inline void Command::add_keypress(const ::std::string& value) {
  keypress_.Add()->assign(value);
}
inline void Command::add_keypress(const char* value) {
  keypress_.Add()->assign(value);
}
inline void Command::add_keypress(const char* value, size_t size) {
  keypress_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::keypress() const {
  return keypress_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_keypress() {
  return &keypress_;
}

// optional .rec.command.Setter setter = 7;
inline bool Command::has_setter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Command::set_has_setter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Command::clear_has_setter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Command::clear_setter() {
  if (setter_ != NULL) setter_->::rec::command::Setter::Clear();
  clear_has_setter();
}
inline const ::rec::command::Setter& Command::setter() const {
  return setter_ != NULL ? *setter_ : *default_instance_->setter_;
}
inline ::rec::command::Setter* Command::mutable_setter() {
  set_has_setter();
  if (setter_ == NULL) setter_ = new ::rec::command::Setter;
  return setter_;
}
inline ::rec::command::Setter* Command::release_setter() {
  clear_has_setter();
  ::rec::command::Setter* temp = setter_;
  setter_ = NULL;
  return temp;
}
inline void Command::set_allocated_setter(::rec::command::Setter* setter) {
  delete setter_;
  setter_ = setter;
  if (setter) {
    set_has_setter();
  } else {
    clear_has_setter();
  }
}

// -------------------------------------------------------------------

// Commands

// repeated .rec.command.Command command = 1;
inline int Commands::command_size() const {
  return command_.size();
}
inline void Commands::clear_command() {
  command_.Clear();
}
inline const ::rec::command::Command& Commands::command(int index) const {
  return command_.Get(index);
}
inline ::rec::command::Command* Commands::mutable_command(int index) {
  return command_.Mutable(index);
}
inline ::rec::command::Command* Commands::add_command() {
  return command_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::command::Command >&
Commands::command() const {
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::command::Command >*
Commands::mutable_command() {
  return &command_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace command
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::command::Command_Type>() {
  return ::rec::command::Command_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fcommand_2fCommand_2eproto__INCLUDED
