// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/access/Access.proto

#ifndef PROTOBUF_rec_2faccess_2fAccess_2eproto__INCLUDED
#define PROTOBUF_rec_2faccess_2fAccess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace access {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto();
void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto();

class International;
class Input;
class Output;
class Access;

// ===================================================================

class International : public ::google::protobuf::Message {
 public:
  International();
  virtual ~International();
  
  International(const International& from);
  
  inline International& operator=(const International& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const International& default_instance();
  
  void Swap(International* other);
  
  // implements Message ----------------------------------------------
  
  International* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const International& from);
  void MergeFrom(const International& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string language = 1 [default = "en"];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  
  // optional string locale = 2;
  inline bool has_locale() const;
  inline void clear_locale();
  static const int kLocaleFieldNumber = 2;
  inline const ::std::string& locale() const;
  inline void set_locale(const ::std::string& value);
  inline void set_locale(const char* value);
  inline void set_locale(const char* value, size_t size);
  inline ::std::string* mutable_locale();
  
  // @@protoc_insertion_point(class_scope:rec.access.International)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* language_;
  static const ::std::string _default_language_;
  ::std::string* locale_;
  static const ::std::string _default_locale_;
  friend void  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static International* default_instance_;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message {
 public:
  Input();
  virtual ~Input();
  
  Input(const Input& from);
  
  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();
  
  void Swap(Input* other);
  
  // implements Message ----------------------------------------------
  
  Input* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // @@protoc_insertion_point(class_scope:rec.access.Input)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Input* default_instance_;
};
// -------------------------------------------------------------------

class Output : public ::google::protobuf::Message {
 public:
  Output();
  virtual ~Output();
  
  Output(const Output& from);
  
  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Output& default_instance();
  
  void Swap(Output* other);
  
  // implements Message ----------------------------------------------
  
  Output* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Output& from);
  void MergeFrom(const Output& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // @@protoc_insertion_point(class_scope:rec.access.Output)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Output* default_instance_;
};
// -------------------------------------------------------------------

class Access : public ::google::protobuf::Message {
 public:
  Access();
  virtual ~Access();
  
  Access(const Access& from);
  
  inline Access& operator=(const Access& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Access& default_instance();
  
  void Swap(Access* other);
  
  // implements Message ----------------------------------------------
  
  Access* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Access& from);
  void MergeFrom(const Access& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.access.International international = 1;
  inline bool has_international() const;
  inline void clear_international();
  static const int kInternationalFieldNumber = 1;
  inline const ::rec::access::International& international() const;
  inline ::rec::access::International* mutable_international();
  
  // repeated .rec.access.Input input = 2;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 2;
  inline const ::rec::access::Input& input(int index) const;
  inline ::rec::access::Input* mutable_input(int index);
  inline ::rec::access::Input* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::access::Input >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::access::Input >*
      mutable_input();
  
  // repeated .rec.access.Output output = 3;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 3;
  inline const ::rec::access::Output& output(int index) const;
  inline ::rec::access::Output* mutable_output(int index);
  inline ::rec::access::Output* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::access::Output >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::access::Output >*
      mutable_output();
  
  // @@protoc_insertion_point(class_scope:rec.access.Access)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::access::International* international_;
  ::google::protobuf::RepeatedPtrField< ::rec::access::Input > input_;
  ::google::protobuf::RepeatedPtrField< ::rec::access::Output > output_;
  friend void  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto();
  friend void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Access* default_instance_;
};
// ===================================================================


// ===================================================================

// International

// optional string language = 1 [default = "en"];
inline bool International::has_language() const {
  return _has_bit(0);
}
inline void International::clear_language() {
  if (language_ != &_default_language_) {
    language_->assign(_default_language_);
  }
  _clear_bit(0);
}
inline const ::std::string& International::language() const {
  return *language_;
}
inline void International::set_language(const ::std::string& value) {
  _set_bit(0);
  if (language_ == &_default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void International::set_language(const char* value) {
  _set_bit(0);
  if (language_ == &_default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void International::set_language(const char* value, size_t size) {
  _set_bit(0);
  if (language_ == &_default_language_) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* International::mutable_language() {
  _set_bit(0);
  if (language_ == &_default_language_) {
    language_ = new ::std::string(_default_language_);
  }
  return language_;
}

// optional string locale = 2;
inline bool International::has_locale() const {
  return _has_bit(1);
}
inline void International::clear_locale() {
  if (locale_ != &_default_locale_) {
    locale_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& International::locale() const {
  return *locale_;
}
inline void International::set_locale(const ::std::string& value) {
  _set_bit(1);
  if (locale_ == &_default_locale_) {
    locale_ = new ::std::string;
  }
  locale_->assign(value);
}
inline void International::set_locale(const char* value) {
  _set_bit(1);
  if (locale_ == &_default_locale_) {
    locale_ = new ::std::string;
  }
  locale_->assign(value);
}
inline void International::set_locale(const char* value, size_t size) {
  _set_bit(1);
  if (locale_ == &_default_locale_) {
    locale_ = new ::std::string;
  }
  locale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* International::mutable_locale() {
  _set_bit(1);
  if (locale_ == &_default_locale_) {
    locale_ = new ::std::string;
  }
  return locale_;
}

// -------------------------------------------------------------------

// Input

// optional string name = 1;
inline bool Input::has_name() const {
  return _has_bit(0);
}
inline void Input::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Input::name() const {
  return *name_;
}
inline void Input::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Input::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Input::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Input::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// Output

// optional string name = 1;
inline bool Output::has_name() const {
  return _has_bit(0);
}
inline void Output::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Output::name() const {
  return *name_;
}
inline void Output::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Output::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Output::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Output::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// Access

// optional .rec.access.International international = 1;
inline bool Access::has_international() const {
  return _has_bit(0);
}
inline void Access::clear_international() {
  if (international_ != NULL) international_->::rec::access::International::Clear();
  _clear_bit(0);
}
inline const ::rec::access::International& Access::international() const {
  return international_ != NULL ? *international_ : *default_instance_->international_;
}
inline ::rec::access::International* Access::mutable_international() {
  _set_bit(0);
  if (international_ == NULL) international_ = new ::rec::access::International;
  return international_;
}

// repeated .rec.access.Input input = 2;
inline int Access::input_size() const {
  return input_.size();
}
inline void Access::clear_input() {
  input_.Clear();
}
inline const ::rec::access::Input& Access::input(int index) const {
  return input_.Get(index);
}
inline ::rec::access::Input* Access::mutable_input(int index) {
  return input_.Mutable(index);
}
inline ::rec::access::Input* Access::add_input() {
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::access::Input >&
Access::input() const {
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::access::Input >*
Access::mutable_input() {
  return &input_;
}

// repeated .rec.access.Output output = 3;
inline int Access::output_size() const {
  return output_.size();
}
inline void Access::clear_output() {
  output_.Clear();
}
inline const ::rec::access::Output& Access::output(int index) const {
  return output_.Get(index);
}
inline ::rec::access::Output* Access::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::rec::access::Output* Access::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::access::Output >&
Access::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::access::Output >*
Access::mutable_output() {
  return &output_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace access
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2faccess_2fAccess_2eproto__INCLUDED
