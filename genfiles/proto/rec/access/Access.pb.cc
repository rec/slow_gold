// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/access/Access.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace access {

namespace {

const ::google::protobuf::Descriptor* International_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  International_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_reflection_ = NULL;
const ::google::protobuf::Descriptor* Output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Output_reflection_ = NULL;
const ::google::protobuf::Descriptor* Access_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Access_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto() {
  protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/access/Access.proto");
  GOOGLE_CHECK(file != NULL);
  International_descriptor_ = file->message_type(0);
  static const int International_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(International, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(International, locale_),
  };
  International_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      International_descriptor_,
      International::default_instance_,
      International_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(International, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(International, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(International));
  Input_descriptor_ = file->message_type(1);
  static const int Input_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, name_),
  };
  Input_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Input_descriptor_,
      Input::default_instance_,
      Input_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Input));
  Output_descriptor_ = file->message_type(2);
  static const int Output_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, name_),
  };
  Output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Output_descriptor_,
      Output::default_instance_,
      Output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Output));
  Access_descriptor_ = file->message_type(3);
  static const int Access_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Access, international_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Access, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Access, output_),
  };
  Access_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Access_descriptor_,
      Access::default_instance_,
      Access_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Access, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Access, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Access));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2faccess_2fAccess_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    International_descriptor_, &International::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Input_descriptor_, &Input::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Output_descriptor_, &Output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Access_descriptor_, &Access::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto() {
  delete International::default_instance_;
  delete International_reflection_;
  delete Input::default_instance_;
  delete Input_reflection_;
  delete Output::default_instance_;
  delete Output_reflection_;
  delete Access::default_instance_;
  delete Access_reflection_;
}

void protobuf_AddDesc_rec_2faccess_2fAccess_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rec/access/Access.proto\022\nrec.access\"5\n"
    "\rInternational\022\024\n\010language\030\001 \001(\t:\002en\022\016\n\006"
    "locale\030\002 \001(\t\"\025\n\005Input\022\014\n\004name\030\001 \001(\t\"\026\n\006O"
    "utput\022\014\n\004name\030\001 \001(\t\"\200\001\n\006Access\0220\n\rintern"
    "ational\030\001 \001(\0132\031.rec.access.International"
    "\022 \n\005input\030\002 \003(\0132\021.rec.access.Input\022\"\n\006ou"
    "tput\030\003 \003(\0132\022.rec.access.Output", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/access/Access.proto", &protobuf_RegisterTypes);
  International::default_instance_ = new International();
  Input::default_instance_ = new Input();
  Output::default_instance_ = new Output();
  Access::default_instance_ = new Access();
  International::default_instance_->InitAsDefaultInstance();
  Input::default_instance_->InitAsDefaultInstance();
  Output::default_instance_->InitAsDefaultInstance();
  Access::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2faccess_2fAccess_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2faccess_2fAccess_2eproto {
  StaticDescriptorInitializer_rec_2faccess_2fAccess_2eproto() {
    protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();
  }
} static_descriptor_initializer_rec_2faccess_2fAccess_2eproto_;


// ===================================================================

const ::std::string International::_default_language_("en");
const ::std::string International::_default_locale_;
#ifndef _MSC_VER
const int International::kLanguageFieldNumber;
const int International::kLocaleFieldNumber;
#endif  // !_MSC_VER

International::International()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void International::InitAsDefaultInstance() {
}

International::International(const International& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void International::SharedCtor() {
  _cached_size_ = 0;
  language_ = const_cast< ::std::string*>(&_default_language_);
  locale_ = const_cast< ::std::string*>(&_default_locale_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

International::~International() {
  SharedDtor();
}

void International::SharedDtor() {
  if (language_ != &_default_language_) {
    delete language_;
  }
  if (locale_ != &_default_locale_) {
    delete locale_;
  }
  if (this != default_instance_) {
  }
}

void International::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* International::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return International_descriptor_;
}

const International& International::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();  return *default_instance_;
}

International* International::default_instance_ = NULL;

International* International::New() const {
  return new International;
}

void International::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (language_ != &_default_language_) {
        language_->assign(_default_language_);
      }
    }
    if (_has_bit(1)) {
      if (locale_ != &_default_locale_) {
        locale_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool International::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language = 1 [default = "en"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_locale;
        break;
      }
      
      // optional string locale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locale().data(), this->locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void International::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string language = 1 [default = "en"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->language(), output);
  }
  
  // optional string locale = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale().data(), this->locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->locale(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* International::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string language = 1 [default = "en"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }
  
  // optional string locale = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale().data(), this->locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->locale(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int International::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string language = 1 [default = "en"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
    // optional string locale = 2;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void International::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const International* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const International*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void International::MergeFrom(const International& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_language(from.language());
    }
    if (from._has_bit(1)) {
      set_locale(from.locale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void International::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void International::CopyFrom(const International& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool International::IsInitialized() const {
  
  return true;
}

void International::Swap(International* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(locale_, other->locale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata International::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = International_descriptor_;
  metadata.reflection = International_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Input::_default_name_;
#ifndef _MSC_VER
const int Input::kNameFieldNumber;
#endif  // !_MSC_VER

Input::Input()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Input::InitAsDefaultInstance() {
}

Input::Input(const Input& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Input::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input::~Input() {
  SharedDtor();
}

void Input::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_descriptor_;
}

const Input& Input::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();  return *default_instance_;
}

Input* Input::default_instance_ = NULL;

Input* Input::New() const {
  return new Input;
}

void Input::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Input::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Input::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Input* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Input*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  
  return true;
}

void Input::Swap(Input* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_descriptor_;
  metadata.reflection = Input_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Output::_default_name_;
#ifndef _MSC_VER
const int Output::kNameFieldNumber;
#endif  // !_MSC_VER

Output::Output()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Output::InitAsDefaultInstance() {
}

Output::Output(const Output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Output::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Output::~Output() {
  SharedDtor();
}

void Output::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Output_descriptor_;
}

const Output& Output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();  return *default_instance_;
}

Output* Output::default_instance_ = NULL;

Output* Output::New() const {
  return new Output;
}

void Output::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Output::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  
  return true;
}

void Output::Swap(Output* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Output_descriptor_;
  metadata.reflection = Output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Access::kInternationalFieldNumber;
const int Access::kInputFieldNumber;
const int Access::kOutputFieldNumber;
#endif  // !_MSC_VER

Access::Access()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Access::InitAsDefaultInstance() {
  international_ = const_cast< ::rec::access::International*>(&::rec::access::International::default_instance());
}

Access::Access(const Access& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Access::SharedCtor() {
  _cached_size_ = 0;
  international_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Access::~Access() {
  SharedDtor();
}

void Access::SharedDtor() {
  if (this != default_instance_) {
    delete international_;
  }
}

void Access::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Access::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Access_descriptor_;
}

const Access& Access::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2faccess_2fAccess_2eproto();  return *default_instance_;
}

Access* Access::default_instance_ = NULL;

Access* Access::New() const {
  return new Access;
}

void Access::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (international_ != NULL) international_->::rec::access::International::Clear();
    }
  }
  input_.Clear();
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Access::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.access.International international = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_international()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }
      
      // repeated .rec.access.Input input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }
      
      // repeated .rec.access.Output output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Access::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.access.International international = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->international(), output);
  }
  
  // repeated .rec.access.Input input = 2;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->input(i), output);
  }
  
  // repeated .rec.access.Output output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Access::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.access.International international = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->international(), target);
  }
  
  // repeated .rec.access.Input input = 2;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->input(i), target);
  }
  
  // repeated .rec.access.Output output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Access::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.access.International international = 1;
    if (has_international()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->international());
    }
    
  }
  // repeated .rec.access.Input input = 2;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }
  
  // repeated .rec.access.Output output = 3;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Access::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Access* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Access*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Access::MergeFrom(const Access& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_international()->::rec::access::International::MergeFrom(from.international());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Access::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Access::CopyFrom(const Access& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Access::IsInitialized() const {
  
  return true;
}

void Access::Swap(Access* other) {
  if (other != this) {
    std::swap(international_, other->international_);
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Access::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Access_descriptor_;
  metadata.reflection = Access_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace access
}  // namespace rec

// @@protoc_insertion_point(global_scope)
