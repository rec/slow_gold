// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/data/proto/Value.proto

#ifndef PROTOBUF_rec_2fdata_2fproto_2fValue_2eproto__INCLUDED
#define PROTOBUF_rec_2fdata_2fproto_2fValue_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fdata_2fproto_2fValue_2eproto();
void protobuf_AssignDesc_rec_2fdata_2fproto_2fValue_2eproto();
void protobuf_ShutdownFile_rec_2fdata_2fproto_2fValue_2eproto();

class ValueProto;

// ===================================================================

class ValueProto : public ::google::protobuf::Message {
 public:
  ValueProto();
  virtual ~ValueProto();

  ValueProto(const ValueProto& from);

  inline ValueProto& operator=(const ValueProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueProto& default_instance();

  void Swap(ValueProto* other);

  // implements Message ----------------------------------------------

  ValueProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValueProto& from);
  void MergeFrom(const ValueProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double double_f = 1;
  inline bool has_double_f() const;
  inline void clear_double_f();
  static const int kDoubleFFieldNumber = 1;
  inline double double_f() const;
  inline void set_double_f(double value);

  // optional float float_f = 2;
  inline bool has_float_f() const;
  inline void clear_float_f();
  static const int kFloatFFieldNumber = 2;
  inline float float_f() const;
  inline void set_float_f(float value);

  // optional int64 int64_f = 3;
  inline bool has_int64_f() const;
  inline void clear_int64_f();
  static const int kInt64FFieldNumber = 3;
  inline ::google::protobuf::int64 int64_f() const;
  inline void set_int64_f(::google::protobuf::int64 value);

  // optional uint64 uint64_f = 4;
  inline bool has_uint64_f() const;
  inline void clear_uint64_f();
  static const int kUint64FFieldNumber = 4;
  inline ::google::protobuf::uint64 uint64_f() const;
  inline void set_uint64_f(::google::protobuf::uint64 value);

  // optional int32 int32_f = 5;
  inline bool has_int32_f() const;
  inline void clear_int32_f();
  static const int kInt32FFieldNumber = 5;
  inline ::google::protobuf::int32 int32_f() const;
  inline void set_int32_f(::google::protobuf::int32 value);

  // optional fixed64 fixed64_f = 6;
  inline bool has_fixed64_f() const;
  inline void clear_fixed64_f();
  static const int kFixed64FFieldNumber = 6;
  inline ::google::protobuf::uint64 fixed64_f() const;
  inline void set_fixed64_f(::google::protobuf::uint64 value);

  // optional fixed32 fixed32_f = 7;
  inline bool has_fixed32_f() const;
  inline void clear_fixed32_f();
  static const int kFixed32FFieldNumber = 7;
  inline ::google::protobuf::uint32 fixed32_f() const;
  inline void set_fixed32_f(::google::protobuf::uint32 value);

  // optional bool bool_f = 8;
  inline bool has_bool_f() const;
  inline void clear_bool_f();
  static const int kBoolFFieldNumber = 8;
  inline bool bool_f() const;
  inline void set_bool_f(bool value);

  // optional string string_f = 9;
  inline bool has_string_f() const;
  inline void clear_string_f();
  static const int kStringFFieldNumber = 9;
  inline const ::std::string& string_f() const;
  inline void set_string_f(const ::std::string& value);
  inline void set_string_f(const char* value);
  inline void set_string_f(const char* value, size_t size);
  inline ::std::string* mutable_string_f();
  inline ::std::string* release_string_f();
  inline void set_allocated_string_f(::std::string* string_f);

  // optional bytes group_f = 10;
  inline bool has_group_f() const;
  inline void clear_group_f();
  static const int kGroupFFieldNumber = 10;
  inline const ::std::string& group_f() const;
  inline void set_group_f(const ::std::string& value);
  inline void set_group_f(const char* value);
  inline void set_group_f(const void* value, size_t size);
  inline ::std::string* mutable_group_f();
  inline ::std::string* release_group_f();
  inline void set_allocated_group_f(::std::string* group_f);

  // optional bytes message_f = 11;
  inline bool has_message_f() const;
  inline void clear_message_f();
  static const int kMessageFFieldNumber = 11;
  inline const ::std::string& message_f() const;
  inline void set_message_f(const ::std::string& value);
  inline void set_message_f(const char* value);
  inline void set_message_f(const void* value, size_t size);
  inline ::std::string* mutable_message_f();
  inline ::std::string* release_message_f();
  inline void set_allocated_message_f(::std::string* message_f);

  // optional bytes bytes_f = 12;
  inline bool has_bytes_f() const;
  inline void clear_bytes_f();
  static const int kBytesFFieldNumber = 12;
  inline const ::std::string& bytes_f() const;
  inline void set_bytes_f(const ::std::string& value);
  inline void set_bytes_f(const char* value);
  inline void set_bytes_f(const void* value, size_t size);
  inline ::std::string* mutable_bytes_f();
  inline ::std::string* release_bytes_f();
  inline void set_allocated_bytes_f(::std::string* bytes_f);

  // optional uint32 uint32_f = 13;
  inline bool has_uint32_f() const;
  inline void clear_uint32_f();
  static const int kUint32FFieldNumber = 13;
  inline ::google::protobuf::uint32 uint32_f() const;
  inline void set_uint32_f(::google::protobuf::uint32 value);

  // optional int32 enum_f = 14;
  inline bool has_enum_f() const;
  inline void clear_enum_f();
  static const int kEnumFFieldNumber = 14;
  inline ::google::protobuf::int32 enum_f() const;
  inline void set_enum_f(::google::protobuf::int32 value);

  // optional sfixed32 sfixed32_f = 15;
  inline bool has_sfixed32_f() const;
  inline void clear_sfixed32_f();
  static const int kSfixed32FFieldNumber = 15;
  inline ::google::protobuf::int32 sfixed32_f() const;
  inline void set_sfixed32_f(::google::protobuf::int32 value);

  // optional sfixed64 sfixed64_f = 16;
  inline bool has_sfixed64_f() const;
  inline void clear_sfixed64_f();
  static const int kSfixed64FFieldNumber = 16;
  inline ::google::protobuf::int64 sfixed64_f() const;
  inline void set_sfixed64_f(::google::protobuf::int64 value);

  // optional sint32 sint32_f = 17;
  inline bool has_sint32_f() const;
  inline void clear_sint32_f();
  static const int kSint32FFieldNumber = 17;
  inline ::google::protobuf::int32 sint32_f() const;
  inline void set_sint32_f(::google::protobuf::int32 value);

  // optional sint64 sint64_f = 18;
  inline bool has_sint64_f() const;
  inline void clear_sint64_f();
  static const int kSint64FFieldNumber = 18;
  inline ::google::protobuf::int64 sint64_f() const;
  inline void set_sint64_f(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rec.data.ValueProto)
 private:
  inline void set_has_double_f();
  inline void clear_has_double_f();
  inline void set_has_float_f();
  inline void clear_has_float_f();
  inline void set_has_int64_f();
  inline void clear_has_int64_f();
  inline void set_has_uint64_f();
  inline void clear_has_uint64_f();
  inline void set_has_int32_f();
  inline void clear_has_int32_f();
  inline void set_has_fixed64_f();
  inline void clear_has_fixed64_f();
  inline void set_has_fixed32_f();
  inline void clear_has_fixed32_f();
  inline void set_has_bool_f();
  inline void clear_has_bool_f();
  inline void set_has_string_f();
  inline void clear_has_string_f();
  inline void set_has_group_f();
  inline void clear_has_group_f();
  inline void set_has_message_f();
  inline void clear_has_message_f();
  inline void set_has_bytes_f();
  inline void clear_has_bytes_f();
  inline void set_has_uint32_f();
  inline void clear_has_uint32_f();
  inline void set_has_enum_f();
  inline void clear_has_enum_f();
  inline void set_has_sfixed32_f();
  inline void clear_has_sfixed32_f();
  inline void set_has_sfixed64_f();
  inline void clear_has_sfixed64_f();
  inline void set_has_sint32_f();
  inline void clear_has_sint32_f();
  inline void set_has_sint64_f();
  inline void clear_has_sint64_f();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double double_f_;
  ::google::protobuf::int64 int64_f_;
  float float_f_;
  ::google::protobuf::int32 int32_f_;
  ::google::protobuf::uint64 uint64_f_;
  ::google::protobuf::uint64 fixed64_f_;
  ::google::protobuf::uint32 fixed32_f_;
  bool bool_f_;
  ::std::string* string_f_;
  ::std::string* group_f_;
  ::std::string* message_f_;
  ::std::string* bytes_f_;
  ::google::protobuf::uint32 uint32_f_;
  ::google::protobuf::int32 enum_f_;
  ::google::protobuf::int64 sfixed64_f_;
  ::google::protobuf::int32 sfixed32_f_;
  ::google::protobuf::int32 sint32_f_;
  ::google::protobuf::int64 sint64_f_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fdata_2fproto_2fValue_2eproto();
  friend void protobuf_AssignDesc_rec_2fdata_2fproto_2fValue_2eproto();
  friend void protobuf_ShutdownFile_rec_2fdata_2fproto_2fValue_2eproto();

  void InitAsDefaultInstance();
  static ValueProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ValueProto

// optional double double_f = 1;
inline bool ValueProto::has_double_f() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueProto::set_has_double_f() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueProto::clear_has_double_f() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueProto::clear_double_f() {
  double_f_ = 0;
  clear_has_double_f();
}
inline double ValueProto::double_f() const {
  return double_f_;
}
inline void ValueProto::set_double_f(double value) {
  set_has_double_f();
  double_f_ = value;
}

// optional float float_f = 2;
inline bool ValueProto::has_float_f() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueProto::set_has_float_f() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueProto::clear_has_float_f() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueProto::clear_float_f() {
  float_f_ = 0;
  clear_has_float_f();
}
inline float ValueProto::float_f() const {
  return float_f_;
}
inline void ValueProto::set_float_f(float value) {
  set_has_float_f();
  float_f_ = value;
}

// optional int64 int64_f = 3;
inline bool ValueProto::has_int64_f() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValueProto::set_has_int64_f() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ValueProto::clear_has_int64_f() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ValueProto::clear_int64_f() {
  int64_f_ = GOOGLE_LONGLONG(0);
  clear_has_int64_f();
}
inline ::google::protobuf::int64 ValueProto::int64_f() const {
  return int64_f_;
}
inline void ValueProto::set_int64_f(::google::protobuf::int64 value) {
  set_has_int64_f();
  int64_f_ = value;
}

// optional uint64 uint64_f = 4;
inline bool ValueProto::has_uint64_f() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ValueProto::set_has_uint64_f() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ValueProto::clear_has_uint64_f() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ValueProto::clear_uint64_f() {
  uint64_f_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_f();
}
inline ::google::protobuf::uint64 ValueProto::uint64_f() const {
  return uint64_f_;
}
inline void ValueProto::set_uint64_f(::google::protobuf::uint64 value) {
  set_has_uint64_f();
  uint64_f_ = value;
}

// optional int32 int32_f = 5;
inline bool ValueProto::has_int32_f() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ValueProto::set_has_int32_f() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ValueProto::clear_has_int32_f() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ValueProto::clear_int32_f() {
  int32_f_ = 0;
  clear_has_int32_f();
}
inline ::google::protobuf::int32 ValueProto::int32_f() const {
  return int32_f_;
}
inline void ValueProto::set_int32_f(::google::protobuf::int32 value) {
  set_has_int32_f();
  int32_f_ = value;
}

// optional fixed64 fixed64_f = 6;
inline bool ValueProto::has_fixed64_f() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ValueProto::set_has_fixed64_f() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ValueProto::clear_has_fixed64_f() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ValueProto::clear_fixed64_f() {
  fixed64_f_ = GOOGLE_ULONGLONG(0);
  clear_has_fixed64_f();
}
inline ::google::protobuf::uint64 ValueProto::fixed64_f() const {
  return fixed64_f_;
}
inline void ValueProto::set_fixed64_f(::google::protobuf::uint64 value) {
  set_has_fixed64_f();
  fixed64_f_ = value;
}

// optional fixed32 fixed32_f = 7;
inline bool ValueProto::has_fixed32_f() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ValueProto::set_has_fixed32_f() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ValueProto::clear_has_fixed32_f() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ValueProto::clear_fixed32_f() {
  fixed32_f_ = 0u;
  clear_has_fixed32_f();
}
inline ::google::protobuf::uint32 ValueProto::fixed32_f() const {
  return fixed32_f_;
}
inline void ValueProto::set_fixed32_f(::google::protobuf::uint32 value) {
  set_has_fixed32_f();
  fixed32_f_ = value;
}

// optional bool bool_f = 8;
inline bool ValueProto::has_bool_f() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ValueProto::set_has_bool_f() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ValueProto::clear_has_bool_f() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ValueProto::clear_bool_f() {
  bool_f_ = false;
  clear_has_bool_f();
}
inline bool ValueProto::bool_f() const {
  return bool_f_;
}
inline void ValueProto::set_bool_f(bool value) {
  set_has_bool_f();
  bool_f_ = value;
}

// optional string string_f = 9;
inline bool ValueProto::has_string_f() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ValueProto::set_has_string_f() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ValueProto::clear_has_string_f() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ValueProto::clear_string_f() {
  if (string_f_ != &::google::protobuf::internal::kEmptyString) {
    string_f_->clear();
  }
  clear_has_string_f();
}
inline const ::std::string& ValueProto::string_f() const {
  return *string_f_;
}
inline void ValueProto::set_string_f(const ::std::string& value) {
  set_has_string_f();
  if (string_f_ == &::google::protobuf::internal::kEmptyString) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(value);
}
inline void ValueProto::set_string_f(const char* value) {
  set_has_string_f();
  if (string_f_ == &::google::protobuf::internal::kEmptyString) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(value);
}
inline void ValueProto::set_string_f(const char* value, size_t size) {
  set_has_string_f();
  if (string_f_ == &::google::protobuf::internal::kEmptyString) {
    string_f_ = new ::std::string;
  }
  string_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValueProto::mutable_string_f() {
  set_has_string_f();
  if (string_f_ == &::google::protobuf::internal::kEmptyString) {
    string_f_ = new ::std::string;
  }
  return string_f_;
}
inline ::std::string* ValueProto::release_string_f() {
  clear_has_string_f();
  if (string_f_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_f_;
    string_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ValueProto::set_allocated_string_f(::std::string* string_f) {
  if (string_f_ != &::google::protobuf::internal::kEmptyString) {
    delete string_f_;
  }
  if (string_f) {
    set_has_string_f();
    string_f_ = string_f;
  } else {
    clear_has_string_f();
    string_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes group_f = 10;
inline bool ValueProto::has_group_f() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ValueProto::set_has_group_f() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ValueProto::clear_has_group_f() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ValueProto::clear_group_f() {
  if (group_f_ != &::google::protobuf::internal::kEmptyString) {
    group_f_->clear();
  }
  clear_has_group_f();
}
inline const ::std::string& ValueProto::group_f() const {
  return *group_f_;
}
inline void ValueProto::set_group_f(const ::std::string& value) {
  set_has_group_f();
  if (group_f_ == &::google::protobuf::internal::kEmptyString) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(value);
}
inline void ValueProto::set_group_f(const char* value) {
  set_has_group_f();
  if (group_f_ == &::google::protobuf::internal::kEmptyString) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(value);
}
inline void ValueProto::set_group_f(const void* value, size_t size) {
  set_has_group_f();
  if (group_f_ == &::google::protobuf::internal::kEmptyString) {
    group_f_ = new ::std::string;
  }
  group_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValueProto::mutable_group_f() {
  set_has_group_f();
  if (group_f_ == &::google::protobuf::internal::kEmptyString) {
    group_f_ = new ::std::string;
  }
  return group_f_;
}
inline ::std::string* ValueProto::release_group_f() {
  clear_has_group_f();
  if (group_f_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_f_;
    group_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ValueProto::set_allocated_group_f(::std::string* group_f) {
  if (group_f_ != &::google::protobuf::internal::kEmptyString) {
    delete group_f_;
  }
  if (group_f) {
    set_has_group_f();
    group_f_ = group_f;
  } else {
    clear_has_group_f();
    group_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes message_f = 11;
inline bool ValueProto::has_message_f() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ValueProto::set_has_message_f() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ValueProto::clear_has_message_f() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ValueProto::clear_message_f() {
  if (message_f_ != &::google::protobuf::internal::kEmptyString) {
    message_f_->clear();
  }
  clear_has_message_f();
}
inline const ::std::string& ValueProto::message_f() const {
  return *message_f_;
}
inline void ValueProto::set_message_f(const ::std::string& value) {
  set_has_message_f();
  if (message_f_ == &::google::protobuf::internal::kEmptyString) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(value);
}
inline void ValueProto::set_message_f(const char* value) {
  set_has_message_f();
  if (message_f_ == &::google::protobuf::internal::kEmptyString) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(value);
}
inline void ValueProto::set_message_f(const void* value, size_t size) {
  set_has_message_f();
  if (message_f_ == &::google::protobuf::internal::kEmptyString) {
    message_f_ = new ::std::string;
  }
  message_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValueProto::mutable_message_f() {
  set_has_message_f();
  if (message_f_ == &::google::protobuf::internal::kEmptyString) {
    message_f_ = new ::std::string;
  }
  return message_f_;
}
inline ::std::string* ValueProto::release_message_f() {
  clear_has_message_f();
  if (message_f_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_f_;
    message_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ValueProto::set_allocated_message_f(::std::string* message_f) {
  if (message_f_ != &::google::protobuf::internal::kEmptyString) {
    delete message_f_;
  }
  if (message_f) {
    set_has_message_f();
    message_f_ = message_f;
  } else {
    clear_has_message_f();
    message_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes bytes_f = 12;
inline bool ValueProto::has_bytes_f() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ValueProto::set_has_bytes_f() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ValueProto::clear_has_bytes_f() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ValueProto::clear_bytes_f() {
  if (bytes_f_ != &::google::protobuf::internal::kEmptyString) {
    bytes_f_->clear();
  }
  clear_has_bytes_f();
}
inline const ::std::string& ValueProto::bytes_f() const {
  return *bytes_f_;
}
inline void ValueProto::set_bytes_f(const ::std::string& value) {
  set_has_bytes_f();
  if (bytes_f_ == &::google::protobuf::internal::kEmptyString) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(value);
}
inline void ValueProto::set_bytes_f(const char* value) {
  set_has_bytes_f();
  if (bytes_f_ == &::google::protobuf::internal::kEmptyString) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(value);
}
inline void ValueProto::set_bytes_f(const void* value, size_t size) {
  set_has_bytes_f();
  if (bytes_f_ == &::google::protobuf::internal::kEmptyString) {
    bytes_f_ = new ::std::string;
  }
  bytes_f_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ValueProto::mutable_bytes_f() {
  set_has_bytes_f();
  if (bytes_f_ == &::google::protobuf::internal::kEmptyString) {
    bytes_f_ = new ::std::string;
  }
  return bytes_f_;
}
inline ::std::string* ValueProto::release_bytes_f() {
  clear_has_bytes_f();
  if (bytes_f_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_f_;
    bytes_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ValueProto::set_allocated_bytes_f(::std::string* bytes_f) {
  if (bytes_f_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_f_;
  }
  if (bytes_f) {
    set_has_bytes_f();
    bytes_f_ = bytes_f;
  } else {
    clear_has_bytes_f();
    bytes_f_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 uint32_f = 13;
inline bool ValueProto::has_uint32_f() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ValueProto::set_has_uint32_f() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ValueProto::clear_has_uint32_f() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ValueProto::clear_uint32_f() {
  uint32_f_ = 0u;
  clear_has_uint32_f();
}
inline ::google::protobuf::uint32 ValueProto::uint32_f() const {
  return uint32_f_;
}
inline void ValueProto::set_uint32_f(::google::protobuf::uint32 value) {
  set_has_uint32_f();
  uint32_f_ = value;
}

// optional int32 enum_f = 14;
inline bool ValueProto::has_enum_f() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ValueProto::set_has_enum_f() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ValueProto::clear_has_enum_f() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ValueProto::clear_enum_f() {
  enum_f_ = 0;
  clear_has_enum_f();
}
inline ::google::protobuf::int32 ValueProto::enum_f() const {
  return enum_f_;
}
inline void ValueProto::set_enum_f(::google::protobuf::int32 value) {
  set_has_enum_f();
  enum_f_ = value;
}

// optional sfixed32 sfixed32_f = 15;
inline bool ValueProto::has_sfixed32_f() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ValueProto::set_has_sfixed32_f() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ValueProto::clear_has_sfixed32_f() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ValueProto::clear_sfixed32_f() {
  sfixed32_f_ = 0;
  clear_has_sfixed32_f();
}
inline ::google::protobuf::int32 ValueProto::sfixed32_f() const {
  return sfixed32_f_;
}
inline void ValueProto::set_sfixed32_f(::google::protobuf::int32 value) {
  set_has_sfixed32_f();
  sfixed32_f_ = value;
}

// optional sfixed64 sfixed64_f = 16;
inline bool ValueProto::has_sfixed64_f() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ValueProto::set_has_sfixed64_f() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ValueProto::clear_has_sfixed64_f() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ValueProto::clear_sfixed64_f() {
  sfixed64_f_ = GOOGLE_LONGLONG(0);
  clear_has_sfixed64_f();
}
inline ::google::protobuf::int64 ValueProto::sfixed64_f() const {
  return sfixed64_f_;
}
inline void ValueProto::set_sfixed64_f(::google::protobuf::int64 value) {
  set_has_sfixed64_f();
  sfixed64_f_ = value;
}

// optional sint32 sint32_f = 17;
inline bool ValueProto::has_sint32_f() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ValueProto::set_has_sint32_f() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ValueProto::clear_has_sint32_f() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ValueProto::clear_sint32_f() {
  sint32_f_ = 0;
  clear_has_sint32_f();
}
inline ::google::protobuf::int32 ValueProto::sint32_f() const {
  return sint32_f_;
}
inline void ValueProto::set_sint32_f(::google::protobuf::int32 value) {
  set_has_sint32_f();
  sint32_f_ = value;
}

// optional sint64 sint64_f = 18;
inline bool ValueProto::has_sint64_f() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ValueProto::set_has_sint64_f() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ValueProto::clear_has_sint64_f() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ValueProto::clear_sint64_f() {
  sint64_f_ = GOOGLE_LONGLONG(0);
  clear_has_sint64_f();
}
inline ::google::protobuf::int64 ValueProto::sint64_f() const {
  return sint64_f_;
}
inline void ValueProto::set_sint64_f(::google::protobuf::int64 value) {
  set_has_sint64_f();
  sint64_f_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fdata_2fproto_2fValue_2eproto__INCLUDED
