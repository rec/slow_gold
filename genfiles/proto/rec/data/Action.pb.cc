// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/data/Action.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace data {

namespace {

const ::google::protobuf::Descriptor* Source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Source_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Source_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UndoRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fdata_2fAction_2eproto() {
  protobuf_AddDesc_rec_2fdata_2fAction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/data/Action.proto");
  GOOGLE_CHECK(file != NULL);
  Source_descriptor_ = file->message_type(0);
  static const int Source_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, modifier_keys_),
  };
  Source_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Source_descriptor_,
      Source::default_instance_,
      Source_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Source));
  Source_Type_descriptor_ = Source_descriptor_->enum_type(0);
  Action_descriptor_ = file->message_type(1);
  static const int Action_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, operations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, undo_index_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  Action_Type_descriptor_ = Action_descriptor_->enum_type(0);
  UndoRecord_descriptor_ = file->message_type(2);
  static const int UndoRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, timestamp_),
  };
  UndoRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoRecord_descriptor_,
      UndoRecord::default_instance_,
      UndoRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fdata_2fAction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Source_descriptor_, &Source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoRecord_descriptor_, &UndoRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fdata_2fAction_2eproto() {
  delete Source::default_instance_;
  delete Source_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete UndoRecord::default_instance_;
  delete UndoRecord_reflection_;
}

void protobuf_AddDesc_rec_2fdata_2fAction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::data::protobuf_AddDesc_rec_2fdata_2fOperation_2eproto();
  ::rec::util::file::protobuf_AddDesc_rec_2futil_2ffile_2fVirtualFile_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rec/data/Action.proto\022\010rec.data\032\030rec/d"
    "ata/Operation.proto\032\037rec/util/file/Virtu"
    "alFile.proto\"\217\001\n\006Source\022#\n\004type\030\001 \001(\0162\025."
    "rec.data.Source.Type\022\r\n\005index\030\002 \003(\r\022\025\n\rm"
    "odifier_keys\030\003 \001(\r\":\n\004Type\022\010\n\004MENU\020\000\022\014\n\010"
    "KEYBOARD\020\001\022\013\n\007CONTROL\020\002\022\r\n\tAUTOMATIC\020\003\"\345"
    "\002\n\006Action\022#\n\004type\030\001 \001(\0162\025.rec.data.Actio"
    "n.Type\022\021\n\ttimestamp\030\002 \001(\004\022\r\n\005index\030\003 \001(\004"
    "\022 \n\006source\030\004 \003(\0132\020.rec.data.Source\022(\n\004fi"
    "le\030\005 \001(\0132\032.rec.util.file.VirtualFile\022\021\n\t"
    "type_name\030\006 \001(\t\022(\n\noperations\030\007 \001(\0132\024.re"
    "c.data.Operations\022\"\n\004undo\030\010 \001(\0132\024.rec.da"
    "ta.Operations\022\022\n\nundo_index\030\t \001(\r\"S\n\004Typ"
    "e\022\r\n\tOPERATION\020\000\022\010\n\004UNDO\020\001\022\010\n\004REDO\020\002\022\024\n\020"
    "START_OF_SESSION\020\003\022\022\n\016END_OF_SESSION\020\004\"{"
    "\n\nUndoRecord\022\021\n\ttype_name\030\001 \001(\t\022(\n\004file\030"
    "\002 \001(\0132\032.rec.util.file.VirtualFile\022\016\n\006bef"
    "ore\030\003 \001(\t\022\r\n\005after\030\004 \001(\t\022\021\n\ttimestamp\030\005 "
    "\001(\004", 723);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/data/Action.proto", &protobuf_RegisterTypes);
  Source::default_instance_ = new Source();
  Action::default_instance_ = new Action();
  UndoRecord::default_instance_ = new UndoRecord();
  Source::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  UndoRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fdata_2fAction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fdata_2fAction_2eproto {
  StaticDescriptorInitializer_rec_2fdata_2fAction_2eproto() {
    protobuf_AddDesc_rec_2fdata_2fAction_2eproto();
  }
} static_descriptor_initializer_rec_2fdata_2fAction_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Source_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Source_Type_descriptor_;
}
bool Source_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Source_Type Source::MENU;
const Source_Type Source::KEYBOARD;
const Source_Type Source::CONTROL;
const Source_Type Source::AUTOMATIC;
const Source_Type Source::Type_MIN;
const Source_Type Source::Type_MAX;
const int Source::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Source::kTypeFieldNumber;
const int Source::kIndexFieldNumber;
const int Source::kModifierKeysFieldNumber;
#endif  // !_MSC_VER

Source::Source()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Source::InitAsDefaultInstance() {
}

Source::Source(const Source& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Source::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  modifier_keys_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Source::~Source() {
  SharedDtor();
}

void Source::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Source_descriptor_;
}

const Source& Source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fdata_2fAction_2eproto();  return *default_instance_;
}

Source* Source::default_instance_ = NULL;

Source* Source::New() const {
  return new Source;
}

void Source::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    modifier_keys_ = 0u;
  }
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.data.Source.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::data::Source_Type_IsValid(value)) {
            set_type(static_cast< ::rec::data::Source_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // repeated uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        if (input->ExpectTag(24)) goto parse_modifier_keys;
        break;
      }
      
      // optional uint32 modifier_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifier_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_keys_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.data.Source.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->index(i), output);
  }
  
  // optional uint32 modifier_keys = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modifier_keys(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.data.Source.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->index(i), target);
  }
  
  // optional uint32 modifier_keys = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modifier_keys(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Source::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.data.Source.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 modifier_keys = 3;
    if (has_modifier_keys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_keys());
    }
    
  }
  // repeated uint32 index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Source* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Source*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_modifier_keys(from.modifier_keys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  
  return true;
}

void Source::Swap(Source* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    index_.Swap(&other->index_);
    std::swap(modifier_keys_, other->modifier_keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Source_descriptor_;
  metadata.reflection = Source_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Type_descriptor_;
}
bool Action_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Action_Type Action::OPERATION;
const Action_Type Action::UNDO;
const Action_Type Action::REDO;
const Action_Type Action::START_OF_SESSION;
const Action_Type Action::END_OF_SESSION;
const Action_Type Action::Type_MIN;
const Action_Type Action::Type_MAX;
const int Action::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Action::_default_type_name_;
#ifndef _MSC_VER
const int Action::kTypeFieldNumber;
const int Action::kTimestampFieldNumber;
const int Action::kIndexFieldNumber;
const int Action::kSourceFieldNumber;
const int Action::kFileFieldNumber;
const int Action::kTypeNameFieldNumber;
const int Action::kOperationsFieldNumber;
const int Action::kUndoFieldNumber;
const int Action::kUndoIndexFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action::InitAsDefaultInstance() {
  file_ = const_cast< ::rec::util::file::VirtualFile*>(&::rec::util::file::VirtualFile::default_instance());
  operations_ = const_cast< ::rec::data::Operations*>(&::rec::data::Operations::default_instance());
  undo_ = const_cast< ::rec::data::Operations*>(&::rec::data::Operations::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  file_ = NULL;
  type_name_ = const_cast< ::std::string*>(&_default_type_name_);
  operations_ = NULL;
  undo_ = NULL;
  undo_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  SharedDtor();
}

void Action::SharedDtor() {
  if (type_name_ != &_default_type_name_) {
    delete type_name_;
  }
  if (this != default_instance_) {
    delete file_;
    delete operations_;
    delete undo_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fdata_2fAction_2eproto();  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    index_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(4)) {
      if (file_ != NULL) file_->::rec::util::file::VirtualFile::Clear();
    }
    if (_has_bit(5)) {
      if (type_name_ != &_default_type_name_) {
        type_name_->clear();
      }
    }
    if (_has_bit(6)) {
      if (operations_ != NULL) operations_->::rec::data::Operations::Clear();
    }
    if (_has_bit(7)) {
      if (undo_ != NULL) undo_->::rec::data::Operations::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    undo_index_ = 0u;
  }
  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.data.Action.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::data::Action_Type_IsValid(value)) {
            set_type(static_cast< ::rec::data::Action_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional uint64 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }
      
      // repeated .rec.data.Source source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source;
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }
      
      // optional .rec.util.file.VirtualFile file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_type_name;
        break;
      }
      
      // optional string type_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_operations;
        break;
      }
      
      // optional .rec.data.Operations operations = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_undo;
        break;
      }
      
      // optional .rec.data.Operations undo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_undo_index;
        break;
      }
      
      // optional uint32 undo_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undo_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undo_index_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.data.Action.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint64 timestamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }
  
  // optional uint64 index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }
  
  // repeated .rec.data.Source source = 4;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source(i), output);
  }
  
  // optional .rec.util.file.VirtualFile file = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file(), output);
  }
  
  // optional string type_name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->type_name(), output);
  }
  
  // optional .rec.data.Operations operations = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->operations(), output);
  }
  
  // optional .rec.data.Operations undo = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->undo(), output);
  }
  
  // optional uint32 undo_index = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->undo_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.data.Action.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint64 timestamp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }
  
  // optional uint64 index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }
  
  // repeated .rec.data.Source source = 4;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source(i), target);
  }
  
  // optional .rec.util.file.VirtualFile file = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file(), target);
  }
  
  // optional string type_name = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type_name(), target);
  }
  
  // optional .rec.data.Operations operations = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->operations(), target);
  }
  
  // optional .rec.data.Operations undo = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->undo(), target);
  }
  
  // optional uint32 undo_index = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->undo_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.data.Action.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional uint64 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }
    
    // optional .rec.util.file.VirtualFile file = 5;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // optional string type_name = 6;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }
    
    // optional .rec.data.Operations operations = 7;
    if (has_operations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations());
    }
    
    // optional .rec.data.Operations undo = 8;
    if (has_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 undo_index = 9;
    if (has_undo_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undo_index());
    }
    
  }
  // repeated .rec.data.Source source = 4;
  total_size += 1 * this->source_size();
  for (int i = 0; i < this->source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(4)) {
      mutable_file()->::rec::util::file::VirtualFile::MergeFrom(from.file());
    }
    if (from._has_bit(5)) {
      set_type_name(from.type_name());
    }
    if (from._has_bit(6)) {
      mutable_operations()->::rec::data::Operations::MergeFrom(from.operations());
    }
    if (from._has_bit(7)) {
      mutable_undo()->::rec::data::Operations::MergeFrom(from.undo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_undo_index(from.undo_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(index_, other->index_);
    source_.Swap(&other->source_);
    std::swap(file_, other->file_);
    std::swap(type_name_, other->type_name_);
    std::swap(operations_, other->operations_);
    std::swap(undo_, other->undo_);
    std::swap(undo_index_, other->undo_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UndoRecord::_default_type_name_;
const ::std::string UndoRecord::_default_before_;
const ::std::string UndoRecord::_default_after_;
#ifndef _MSC_VER
const int UndoRecord::kTypeNameFieldNumber;
const int UndoRecord::kFileFieldNumber;
const int UndoRecord::kBeforeFieldNumber;
const int UndoRecord::kAfterFieldNumber;
const int UndoRecord::kTimestampFieldNumber;
#endif  // !_MSC_VER

UndoRecord::UndoRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoRecord::InitAsDefaultInstance() {
  file_ = const_cast< ::rec::util::file::VirtualFile*>(&::rec::util::file::VirtualFile::default_instance());
}

UndoRecord::UndoRecord(const UndoRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoRecord::SharedCtor() {
  _cached_size_ = 0;
  type_name_ = const_cast< ::std::string*>(&_default_type_name_);
  file_ = NULL;
  before_ = const_cast< ::std::string*>(&_default_before_);
  after_ = const_cast< ::std::string*>(&_default_after_);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoRecord::~UndoRecord() {
  SharedDtor();
}

void UndoRecord::SharedDtor() {
  if (type_name_ != &_default_type_name_) {
    delete type_name_;
  }
  if (before_ != &_default_before_) {
    delete before_;
  }
  if (after_ != &_default_after_) {
    delete after_;
  }
  if (this != default_instance_) {
    delete file_;
  }
}

void UndoRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoRecord_descriptor_;
}

const UndoRecord& UndoRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fdata_2fAction_2eproto();  return *default_instance_;
}

UndoRecord* UndoRecord::default_instance_ = NULL;

UndoRecord* UndoRecord::New() const {
  return new UndoRecord;
}

void UndoRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_name_ != &_default_type_name_) {
        type_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (file_ != NULL) file_->::rec::util::file::VirtualFile::Clear();
    }
    if (_has_bit(2)) {
      if (before_ != &_default_before_) {
        before_->clear();
      }
    }
    if (_has_bit(3)) {
      if (after_ != &_default_after_) {
        after_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }
      
      // optional .rec.util.file.VirtualFile file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_before;
        break;
      }
      
      // optional string before = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_before()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->before().data(), this->before().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_after;
        break;
      }
      
      // optional string after = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_after:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_after()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->after().data(), this->after().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type_name(), output);
  }
  
  // optional .rec.util.file.VirtualFile file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->file(), output);
  }
  
  // optional string before = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->before().data(), this->before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->before(), output);
  }
  
  // optional string after = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->after().data(), this->after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->after(), output);
  }
  
  // optional uint64 timestamp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type_name(), target);
  }
  
  // optional .rec.util.file.VirtualFile file = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->file(), target);
  }
  
  // optional string before = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->before().data(), this->before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->before(), target);
  }
  
  // optional string after = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->after().data(), this->after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->after(), target);
  }
  
  // optional uint64 timestamp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type_name = 1;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }
    
    // optional .rec.util.file.VirtualFile file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }
    
    // optional string before = 3;
    if (has_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->before());
    }
    
    // optional string after = 4;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->after());
    }
    
    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoRecord::MergeFrom(const UndoRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_name(from.type_name());
    }
    if (from._has_bit(1)) {
      mutable_file()->::rec::util::file::VirtualFile::MergeFrom(from.file());
    }
    if (from._has_bit(2)) {
      set_before(from.before());
    }
    if (from._has_bit(3)) {
      set_after(from.after());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoRecord::CopyFrom(const UndoRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRecord::IsInitialized() const {
  
  return true;
}

void UndoRecord::Swap(UndoRecord* other) {
  if (other != this) {
    std::swap(type_name_, other->type_name_);
    std::swap(file_, other->file_);
    std::swap(before_, other->before_);
    std::swap(after_, other->after_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoRecord_descriptor_;
  metadata.reflection = UndoRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace rec

// @@protoc_insertion_point(global_scope)
