// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/RecentFiles.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* RecentFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentFiles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fRecentFiles_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/RecentFiles.proto");
  GOOGLE_CHECK(file != NULL);
  RecentFile_descriptor_ = file->message_type(0);
  static const int RecentFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFile, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFile, name_),
  };
  RecentFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentFile_descriptor_,
      RecentFile::default_instance_,
      RecentFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentFile));
  RecentFiles_descriptor_ = file->message_type(1);
  static const int RecentFiles_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFiles, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFiles, max_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFiles, reload_most_recent_),
  };
  RecentFiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentFiles_descriptor_,
      RecentFiles::default_instance_,
      RecentFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentFiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentFiles));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fRecentFiles_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentFile_descriptor_, &RecentFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentFiles_descriptor_, &RecentFiles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fRecentFiles_2eproto() {
  delete RecentFile::default_instance_;
  delete RecentFile_reflection_;
  delete RecentFiles::default_instance_;
  delete RecentFiles_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/gui/RecentFiles.proto\022\007rec.gui\"-\n\n"
    "RecentFile\022\021\n\ttimestamp\030\001 \001(\003\022\014\n\004name\030\002 "
    "\001(\t\"i\n\013RecentFiles\022!\n\004file\030\003 \003(\0132\023.rec.g"
    "ui.RecentFile\022\025\n\tmax_files\030\004 \001(\r:\00216\022 \n\022"
    "reload_most_recent\030\005 \001(\010:\004true", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/RecentFiles.proto", &protobuf_RegisterTypes);
  RecentFile::default_instance_ = new RecentFile();
  RecentFiles::default_instance_ = new RecentFiles();
  RecentFile::default_instance_->InitAsDefaultInstance();
  RecentFiles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fRecentFiles_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fRecentFiles_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fRecentFiles_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fRecentFiles_2eproto_;


// ===================================================================

const ::std::string RecentFile::_default_name_;
#ifndef _MSC_VER
const int RecentFile::kTimestampFieldNumber;
const int RecentFile::kNameFieldNumber;
#endif  // !_MSC_VER

RecentFile::RecentFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecentFile::InitAsDefaultInstance() {
}

RecentFile::RecentFile(const RecentFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecentFile::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentFile::~RecentFile() {
  SharedDtor();
}

void RecentFile::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RecentFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentFile_descriptor_;
}

const RecentFile& RecentFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();  return *default_instance_;
}

RecentFile* RecentFile::default_instance_ = NULL;

RecentFile* RecentFile::New() const {
  return new RecentFile;
}

void RecentFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecentFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecentFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecentFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentFile::MergeFrom(const RecentFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentFile::CopyFrom(const RecentFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentFile::IsInitialized() const {
  
  return true;
}

void RecentFile::Swap(RecentFile* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentFile_descriptor_;
  metadata.reflection = RecentFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentFiles::kFileFieldNumber;
const int RecentFiles::kMaxFilesFieldNumber;
const int RecentFiles::kReloadMostRecentFieldNumber;
#endif  // !_MSC_VER

RecentFiles::RecentFiles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecentFiles::InitAsDefaultInstance() {
}

RecentFiles::RecentFiles(const RecentFiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecentFiles::SharedCtor() {
  _cached_size_ = 0;
  max_files_ = 16u;
  reload_most_recent_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentFiles::~RecentFiles() {
  SharedDtor();
}

void RecentFiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecentFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentFiles_descriptor_;
}

const RecentFiles& RecentFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();  return *default_instance_;
}

RecentFiles* RecentFiles::default_instance_ = NULL;

RecentFiles* RecentFiles::New() const {
  return new RecentFiles;
}

void RecentFiles::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    max_files_ = 16u;
    reload_most_recent_ = true;
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.gui.RecentFile file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file;
        if (input->ExpectTag(32)) goto parse_max_files;
        break;
      }
      
      // optional uint32 max_files = 4 [default = 16];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_files_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reload_most_recent;
        break;
      }
      
      // optional bool reload_most_recent = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reload_most_recent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reload_most_recent_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecentFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.gui.RecentFile file = 3;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->file(i), output);
  }
  
  // optional uint32 max_files = 4 [default = 16];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_files(), output);
  }
  
  // optional bool reload_most_recent = 5 [default = true];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reload_most_recent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecentFiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.gui.RecentFile file = 3;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->file(i), target);
  }
  
  // optional uint32 max_files = 4 [default = 16];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_files(), target);
  }
  
  // optional bool reload_most_recent = 5 [default = true];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reload_most_recent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecentFiles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 max_files = 4 [default = 16];
    if (has_max_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_files());
    }
    
    // optional bool reload_most_recent = 5 [default = true];
    if (has_reload_most_recent()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .rec.gui.RecentFile file = 3;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentFiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentFiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentFiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentFiles::MergeFrom(const RecentFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_max_files(from.max_files());
    }
    if (from._has_bit(2)) {
      set_reload_most_recent(from.reload_most_recent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentFiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentFiles::CopyFrom(const RecentFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentFiles::IsInitialized() const {
  
  return true;
}

void RecentFiles::Swap(RecentFiles* other) {
  if (other != this) {
    file_.Swap(&other->file_);
    std::swap(max_files_, other->max_files_);
    std::swap(reload_most_recent_, other->reload_most_recent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentFiles_descriptor_;
  metadata.reflection = RecentFiles_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
