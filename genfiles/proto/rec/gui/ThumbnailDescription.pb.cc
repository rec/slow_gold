// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/ThumbnailDescription.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* ThreadDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThumbnailDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThumbnailDescription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fThumbnailDescription_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/ThumbnailDescription.proto");
  GOOGLE_CHECK(file != NULL);
  ThreadDescription_descriptor_ = file->message_type(0);
  static const int ThreadDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, period_),
  };
  ThreadDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadDescription_descriptor_,
      ThreadDescription::default_instance_,
      ThreadDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadDescription));
  ThumbnailDescription_descriptor_ = file->message_type(1);
  static const int ThumbnailDescription_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, cursor_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, source_samples_per_thumbnail_sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, thumbnail_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, cursor_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, tic_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, subtic_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, use_captions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, tics_at_bottom_),
  };
  ThumbnailDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThumbnailDescription_descriptor_,
      ThumbnailDescription::default_instance_,
      ThumbnailDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThumbnailDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThumbnailDescription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fThumbnailDescription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadDescription_descriptor_, &ThreadDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThumbnailDescription_descriptor_, &ThumbnailDescription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fThumbnailDescription_2eproto() {
  delete ThreadDescription::default_instance_;
  delete ThreadDescription_reflection_;
  delete ThumbnailDescription::default_instance_;
  delete ThumbnailDescription_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::color::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"rec/gui/ThumbnailDescription.proto\022\007re"
    "c.gui\032\023rec/gui/Color.proto\032\022rec/gui/Font"
    ".proto\"<\n\021ThreadDescription\022\023\n\010priority\030"
    "\001 \001(\r:\0014\022\022\n\006period\030\002 \001(\r:\00240\"\372\002\n\024Thumbna"
    "ilDescription\022%\n\006colors\030\001 \001(\0132\025.rec.gui."
    "color.Colors\022\033\n\020cursor_thickness\030\002 \001(\r:\001"
    "1\022\021\n\006margin\030\003 \001(\r:\0012\0220\n#source_samples_p"
    "er_thumbnail_sample\030\004 \001(\r:\003512\022\032\n\017thumbn"
    "ail_cache\030\005 \001(\r:\0015\0221\n\rcursor_thread\030\006 \001("
    "\0132\032.rec.gui.ThreadDescription\022\037\n\004font\030\007 "
    "\001(\0132\021.rec.gui.FontDesc\022\025\n\ntic_height\030\010 \001"
    "(\r:\0018\022\030\n\rsubtic_height\030\t \001(\r:\0013\022\032\n\014use_c"
    "aptions\030\n \001(\010:\004true\022\034\n\016tics_at_bottom\030\013 "
    "\001(\010:\004true", 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/ThumbnailDescription.proto", &protobuf_RegisterTypes);
  ThreadDescription::default_instance_ = new ThreadDescription();
  ThumbnailDescription::default_instance_ = new ThumbnailDescription();
  ThreadDescription::default_instance_->InitAsDefaultInstance();
  ThumbnailDescription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fThumbnailDescription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fThumbnailDescription_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fThumbnailDescription_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fThumbnailDescription_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ThreadDescription::kPriorityFieldNumber;
const int ThreadDescription::kPeriodFieldNumber;
#endif  // !_MSC_VER

ThreadDescription::ThreadDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadDescription::InitAsDefaultInstance() {
}

ThreadDescription::ThreadDescription(const ThreadDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadDescription::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 4u;
  period_ = 40u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadDescription::~ThreadDescription() {
  SharedDtor();
}

void ThreadDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreadDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadDescription_descriptor_;
}

const ThreadDescription& ThreadDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();  return *default_instance_;
}

ThreadDescription* ThreadDescription::default_instance_ = NULL;

ThreadDescription* ThreadDescription::New() const {
  return new ThreadDescription;
}

void ThreadDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    priority_ = 4u;
    period_ = 40u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 priority = 1 [default = 4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }
      
      // optional uint32 period = 2 [default = 40];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThreadDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 priority = 1 [default = 4];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->priority(), output);
  }
  
  // optional uint32 period = 2 [default = 40];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->period(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 priority = 1 [default = 4];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->priority(), target);
  }
  
  // optional uint32 period = 2 [default = 40];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->period(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 priority = 1 [default = 4];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }
    
    // optional uint32 period = 2 [default = 40];
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadDescription::MergeFrom(const ThreadDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_priority(from.priority());
    }
    if (from._has_bit(1)) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadDescription::CopyFrom(const ThreadDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDescription::IsInitialized() const {
  
  return true;
}

void ThreadDescription::Swap(ThreadDescription* other) {
  if (other != this) {
    std::swap(priority_, other->priority_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadDescription_descriptor_;
  metadata.reflection = ThreadDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThumbnailDescription::kColorsFieldNumber;
const int ThumbnailDescription::kCursorThicknessFieldNumber;
const int ThumbnailDescription::kMarginFieldNumber;
const int ThumbnailDescription::kSourceSamplesPerThumbnailSampleFieldNumber;
const int ThumbnailDescription::kThumbnailCacheFieldNumber;
const int ThumbnailDescription::kCursorThreadFieldNumber;
const int ThumbnailDescription::kFontFieldNumber;
const int ThumbnailDescription::kTicHeightFieldNumber;
const int ThumbnailDescription::kSubticHeightFieldNumber;
const int ThumbnailDescription::kUseCaptionsFieldNumber;
const int ThumbnailDescription::kTicsAtBottomFieldNumber;
#endif  // !_MSC_VER

ThumbnailDescription::ThumbnailDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThumbnailDescription::InitAsDefaultInstance() {
  colors_ = const_cast< ::rec::gui::color::Colors*>(&::rec::gui::color::Colors::default_instance());
  cursor_thread_ = const_cast< ::rec::gui::ThreadDescription*>(&::rec::gui::ThreadDescription::default_instance());
  font_ = const_cast< ::rec::gui::FontDesc*>(&::rec::gui::FontDesc::default_instance());
}

ThumbnailDescription::ThumbnailDescription(const ThumbnailDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThumbnailDescription::SharedCtor() {
  _cached_size_ = 0;
  colors_ = NULL;
  cursor_thickness_ = 1u;
  margin_ = 2u;
  source_samples_per_thumbnail_sample_ = 512u;
  thumbnail_cache_ = 5u;
  cursor_thread_ = NULL;
  font_ = NULL;
  tic_height_ = 8u;
  subtic_height_ = 3u;
  use_captions_ = true;
  tics_at_bottom_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThumbnailDescription::~ThumbnailDescription() {
  SharedDtor();
}

void ThumbnailDescription::SharedDtor() {
  if (this != default_instance_) {
    delete colors_;
    delete cursor_thread_;
    delete font_;
  }
}

void ThumbnailDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThumbnailDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThumbnailDescription_descriptor_;
}

const ThumbnailDescription& ThumbnailDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();  return *default_instance_;
}

ThumbnailDescription* ThumbnailDescription::default_instance_ = NULL;

ThumbnailDescription* ThumbnailDescription::New() const {
  return new ThumbnailDescription;
}

void ThumbnailDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (colors_ != NULL) colors_->::rec::gui::color::Colors::Clear();
    }
    cursor_thickness_ = 1u;
    margin_ = 2u;
    source_samples_per_thumbnail_sample_ = 512u;
    thumbnail_cache_ = 5u;
    if (_has_bit(5)) {
      if (cursor_thread_ != NULL) cursor_thread_->::rec::gui::ThreadDescription::Clear();
    }
    if (_has_bit(6)) {
      if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
    }
    tic_height_ = 8u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    subtic_height_ = 3u;
    use_captions_ = true;
    tics_at_bottom_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThumbnailDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.color.Colors colors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cursor_thickness;
        break;
      }
      
      // optional uint32 cursor_thickness = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_thickness_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_margin;
        break;
      }
      
      // optional uint32 margin = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_samples_per_thumbnail_sample;
        break;
      }
      
      // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_samples_per_thumbnail_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_samples_per_thumbnail_sample_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_thumbnail_cache;
        break;
      }
      
      // optional uint32 thumbnail_cache = 5 [default = 5];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumbnail_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_cache_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cursor_thread;
        break;
      }
      
      // optional .rec.gui.ThreadDescription cursor_thread = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cursor_thread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_thread()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_font;
        break;
      }
      
      // optional .rec.gui.FontDesc font = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tic_height;
        break;
      }
      
      // optional uint32 tic_height = 8 [default = 8];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tic_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tic_height_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_subtic_height;
        break;
      }
      
      // optional uint32 subtic_height = 9 [default = 3];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtic_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtic_height_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_use_captions;
        break;
      }
      
      // optional bool use_captions = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_captions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_captions_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tics_at_bottom;
        break;
      }
      
      // optional bool tics_at_bottom = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tics_at_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tics_at_bottom_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThumbnailDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.color.Colors colors = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colors(), output);
  }
  
  // optional uint32 cursor_thickness = 2 [default = 1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cursor_thickness(), output);
  }
  
  // optional uint32 margin = 3 [default = 2];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->margin(), output);
  }
  
  // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_samples_per_thumbnail_sample(), output);
  }
  
  // optional uint32 thumbnail_cache = 5 [default = 5];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thumbnail_cache(), output);
  }
  
  // optional .rec.gui.ThreadDescription cursor_thread = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cursor_thread(), output);
  }
  
  // optional .rec.gui.FontDesc font = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->font(), output);
  }
  
  // optional uint32 tic_height = 8 [default = 8];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tic_height(), output);
  }
  
  // optional uint32 subtic_height = 9 [default = 3];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->subtic_height(), output);
  }
  
  // optional bool use_captions = 10 [default = true];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_captions(), output);
  }
  
  // optional bool tics_at_bottom = 11 [default = true];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tics_at_bottom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThumbnailDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.color.Colors colors = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colors(), target);
  }
  
  // optional uint32 cursor_thickness = 2 [default = 1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cursor_thickness(), target);
  }
  
  // optional uint32 margin = 3 [default = 2];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->margin(), target);
  }
  
  // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_samples_per_thumbnail_sample(), target);
  }
  
  // optional uint32 thumbnail_cache = 5 [default = 5];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thumbnail_cache(), target);
  }
  
  // optional .rec.gui.ThreadDescription cursor_thread = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cursor_thread(), target);
  }
  
  // optional .rec.gui.FontDesc font = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->font(), target);
  }
  
  // optional uint32 tic_height = 8 [default = 8];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tic_height(), target);
  }
  
  // optional uint32 subtic_height = 9 [default = 3];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->subtic_height(), target);
  }
  
  // optional bool use_captions = 10 [default = true];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_captions(), target);
  }
  
  // optional bool tics_at_bottom = 11 [default = true];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tics_at_bottom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThumbnailDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.color.Colors colors = 1;
    if (has_colors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colors());
    }
    
    // optional uint32 cursor_thickness = 2 [default = 1];
    if (has_cursor_thickness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor_thickness());
    }
    
    // optional uint32 margin = 3 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }
    
    // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
    if (has_source_samples_per_thumbnail_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_samples_per_thumbnail_sample());
    }
    
    // optional uint32 thumbnail_cache = 5 [default = 5];
    if (has_thumbnail_cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnail_cache());
    }
    
    // optional .rec.gui.ThreadDescription cursor_thread = 6;
    if (has_cursor_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cursor_thread());
    }
    
    // optional .rec.gui.FontDesc font = 7;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }
    
    // optional uint32 tic_height = 8 [default = 8];
    if (has_tic_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tic_height());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 subtic_height = 9 [default = 3];
    if (has_subtic_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtic_height());
    }
    
    // optional bool use_captions = 10 [default = true];
    if (has_use_captions()) {
      total_size += 1 + 1;
    }
    
    // optional bool tics_at_bottom = 11 [default = true];
    if (has_tics_at_bottom()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThumbnailDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThumbnailDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThumbnailDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThumbnailDescription::MergeFrom(const ThumbnailDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_colors()->::rec::gui::color::Colors::MergeFrom(from.colors());
    }
    if (from._has_bit(1)) {
      set_cursor_thickness(from.cursor_thickness());
    }
    if (from._has_bit(2)) {
      set_margin(from.margin());
    }
    if (from._has_bit(3)) {
      set_source_samples_per_thumbnail_sample(from.source_samples_per_thumbnail_sample());
    }
    if (from._has_bit(4)) {
      set_thumbnail_cache(from.thumbnail_cache());
    }
    if (from._has_bit(5)) {
      mutable_cursor_thread()->::rec::gui::ThreadDescription::MergeFrom(from.cursor_thread());
    }
    if (from._has_bit(6)) {
      mutable_font()->::rec::gui::FontDesc::MergeFrom(from.font());
    }
    if (from._has_bit(7)) {
      set_tic_height(from.tic_height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_subtic_height(from.subtic_height());
    }
    if (from._has_bit(9)) {
      set_use_captions(from.use_captions());
    }
    if (from._has_bit(10)) {
      set_tics_at_bottom(from.tics_at_bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThumbnailDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbnailDescription::CopyFrom(const ThumbnailDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbnailDescription::IsInitialized() const {
  
  return true;
}

void ThumbnailDescription::Swap(ThumbnailDescription* other) {
  if (other != this) {
    std::swap(colors_, other->colors_);
    std::swap(cursor_thickness_, other->cursor_thickness_);
    std::swap(margin_, other->margin_);
    std::swap(source_samples_per_thumbnail_sample_, other->source_samples_per_thumbnail_sample_);
    std::swap(thumbnail_cache_, other->thumbnail_cache_);
    std::swap(cursor_thread_, other->cursor_thread_);
    std::swap(font_, other->font_);
    std::swap(tic_height_, other->tic_height_);
    std::swap(subtic_height_, other->subtic_height_);
    std::swap(use_captions_, other->use_captions_);
    std::swap(tics_at_bottom_, other->tics_at_bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThumbnailDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThumbnailDescription_descriptor_;
  metadata.reflection = ThumbnailDescription_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
