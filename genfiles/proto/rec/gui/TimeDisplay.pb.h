// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/TimeDisplay.proto

#ifndef PROTOBUF_rec_2fgui_2fTimeDisplay_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fTimeDisplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/gui/Font.pb.h"
#include "rec/gui/Color.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {
namespace time {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto();

class Text;
class Text_Separator;
class Text_Display;
class Dial;

enum Dial_Style {
  Dial_Style_DIAL = 1,
  Dial_Style_BAR = 2
};
bool Dial_Style_IsValid(int value);
const Dial_Style Dial_Style_Style_MIN = Dial_Style_DIAL;
const Dial_Style Dial_Style_Style_MAX = Dial_Style_BAR;
const int Dial_Style_Style_ARRAYSIZE = Dial_Style_Style_MAX + 1;

const ::google::protobuf::EnumDescriptor* Dial_Style_descriptor();
inline const ::std::string& Dial_Style_Name(Dial_Style value) {
  return ::google::protobuf::internal::NameOfEnum(
    Dial_Style_descriptor(), value);
}
inline bool Dial_Style_Parse(
    const ::std::string& name, Dial_Style* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Dial_Style>(
    Dial_Style_descriptor(), name, value);
}
// ===================================================================

class Text_Separator : public ::google::protobuf::Message {
 public:
  Text_Separator();
  virtual ~Text_Separator();
  
  Text_Separator(const Text_Separator& from);
  
  inline Text_Separator& operator=(const Text_Separator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text_Separator& default_instance();
  
  void Swap(Text_Separator* other);
  
  // implements Message ----------------------------------------------
  
  Text_Separator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text_Separator& from);
  void MergeFrom(const Text_Separator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string separator = 1;
  inline bool has_separator() const;
  inline void clear_separator();
  static const int kSeparatorFieldNumber = 1;
  inline const ::std::string& separator() const;
  inline void set_separator(const ::std::string& value);
  inline void set_separator(const char* value);
  inline void set_separator(const char* value, size_t size);
  inline ::std::string* mutable_separator();
  
  // optional uint32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);
  
  // optional bool flash = 3 [default = true];
  inline bool has_flash() const;
  inline void clear_flash();
  static const int kFlashFieldNumber = 3;
  inline bool flash() const;
  inline void set_flash(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.time.Text.Separator)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* separator_;
  static const ::std::string _default_separator_;
  ::google::protobuf::uint32 width_;
  bool flash_;
  friend void  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Text_Separator* default_instance_;
};
// -------------------------------------------------------------------

class Text_Display : public ::google::protobuf::Message {
 public:
  Text_Display();
  virtual ~Text_Display();
  
  Text_Display(const Text_Display& from);
  
  inline Text_Display& operator=(const Text_Display& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text_Display& default_instance();
  
  void Swap(Text_Display* other);
  
  // implements Message ----------------------------------------------
  
  Text_Display* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text_Display& from);
  void MergeFrom(const Text_Display& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool hours = 1 [default = false];
  inline bool has_hours() const;
  inline void clear_hours();
  static const int kHoursFieldNumber = 1;
  inline bool hours() const;
  inline void set_hours(bool value);
  
  // optional bool minutes = 2 [default = true];
  inline bool has_minutes() const;
  inline void clear_minutes();
  static const int kMinutesFieldNumber = 2;
  inline bool minutes() const;
  inline void set_minutes(bool value);
  
  // optional bool seconds = 3 [default = true];
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 3;
  inline bool seconds() const;
  inline void set_seconds(bool value);
  
  // optional bool milliseconds = 4 [default = true];
  inline bool has_milliseconds() const;
  inline void clear_milliseconds();
  static const int kMillisecondsFieldNumber = 4;
  inline bool milliseconds() const;
  inline void set_milliseconds(bool value);
  
  // optional bool frames = 5 [default = false];
  inline bool has_frames() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 5;
  inline bool frames() const;
  inline void set_frames(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.time.Text.Display)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool hours_;
  bool minutes_;
  bool seconds_;
  bool milliseconds_;
  bool frames_;
  friend void  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Text_Display* default_instance_;
};
// -------------------------------------------------------------------

class Text : public ::google::protobuf::Message {
 public:
  Text();
  virtual ~Text();
  
  Text(const Text& from);
  
  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();
  
  void Swap(Text* other);
  
  // implements Message ----------------------------------------------
  
  Text* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Text_Separator Separator;
  typedef Text_Display Display;
  
  // accessors -------------------------------------------------------
  
  // optional .rec.gui.FontDesc font = 1;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 1;
  inline const ::rec::gui::FontDesc& font() const;
  inline ::rec::gui::FontDesc* mutable_font();
  
  // optional .rec.gui.time.Text.Separator separator = 2;
  inline bool has_separator() const;
  inline void clear_separator();
  static const int kSeparatorFieldNumber = 2;
  inline const ::rec::gui::time::Text_Separator& separator() const;
  inline ::rec::gui::time::Text_Separator* mutable_separator();
  
  // optional .rec.gui.time.Text.Display display = 3;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 3;
  inline const ::rec::gui::time::Text_Display& display() const;
  inline ::rec::gui::time::Text_Display* mutable_display();
  
  // optional uint32 margin = 4 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 4;
  inline ::google::protobuf::uint32 margin() const;
  inline void set_margin(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.time.Text)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::gui::FontDesc* font_;
  ::rec::gui::time::Text_Separator* separator_;
  ::rec::gui::time::Text_Display* display_;
  ::google::protobuf::uint32 margin_;
  friend void  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Text* default_instance_;
};
// -------------------------------------------------------------------

class Dial : public ::google::protobuf::Message {
 public:
  Dial();
  virtual ~Dial();
  
  Dial(const Dial& from);
  
  inline Dial& operator=(const Dial& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dial& default_instance();
  
  void Swap(Dial* other);
  
  // implements Message ----------------------------------------------
  
  Dial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dial& from);
  void MergeFrom(const Dial& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Dial_Style Style;
  static const Style DIAL = Dial_Style_DIAL;
  static const Style BAR = Dial_Style_BAR;
  static inline bool Style_IsValid(int value) {
    return Dial_Style_IsValid(value);
  }
  static const Style Style_MIN =
    Dial_Style_Style_MIN;
  static const Style Style_MAX =
    Dial_Style_Style_MAX;
  static const int Style_ARRAYSIZE =
    Dial_Style_Style_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Style_descriptor() {
    return Dial_Style_descriptor();
  }
  static inline const ::std::string& Style_Name(Style value) {
    return Dial_Style_Name(value);
  }
  static inline bool Style_Parse(const ::std::string& name,
      Style* value) {
    return Dial_Style_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rec.gui.time.Dial.Style style = 1;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 1;
  inline ::rec::gui::time::Dial_Style style() const;
  inline void set_style(::rec::gui::time::Dial_Style value);
  
  // optional uint32 outline = 2;
  inline bool has_outline() const;
  inline void clear_outline();
  static const int kOutlineFieldNumber = 2;
  inline ::google::protobuf::uint32 outline() const;
  inline void set_outline(::google::protobuf::uint32 value);
  
  // optional bool display_lap_count = 4;
  inline bool has_display_lap_count() const;
  inline void clear_display_lap_count();
  static const int kDisplayLapCountFieldNumber = 4;
  inline bool display_lap_count() const;
  inline void set_display_lap_count(bool value);
  
  // optional .rec.gui.FontDesc font = 5;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 5;
  inline const ::rec::gui::FontDesc& font() const;
  inline ::rec::gui::FontDesc* mutable_font();
  
  // optional uint32 margin = 6 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 6;
  inline ::google::protobuf::uint32 margin() const;
  inline void set_margin(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.time.Dial)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int style_;
  ::google::protobuf::uint32 outline_;
  bool display_lap_count_;
  ::rec::gui::FontDesc* font_;
  ::google::protobuf::uint32 margin_;
  friend void  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Dial* default_instance_;
};
// ===================================================================


// ===================================================================

// Text_Separator

// optional string separator = 1;
inline bool Text_Separator::has_separator() const {
  return _has_bit(0);
}
inline void Text_Separator::clear_separator() {
  if (separator_ != &_default_separator_) {
    separator_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Text_Separator::separator() const {
  return *separator_;
}
inline void Text_Separator::set_separator(const ::std::string& value) {
  _set_bit(0);
  if (separator_ == &_default_separator_) {
    separator_ = new ::std::string;
  }
  separator_->assign(value);
}
inline void Text_Separator::set_separator(const char* value) {
  _set_bit(0);
  if (separator_ == &_default_separator_) {
    separator_ = new ::std::string;
  }
  separator_->assign(value);
}
inline void Text_Separator::set_separator(const char* value, size_t size) {
  _set_bit(0);
  if (separator_ == &_default_separator_) {
    separator_ = new ::std::string;
  }
  separator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Text_Separator::mutable_separator() {
  _set_bit(0);
  if (separator_ == &_default_separator_) {
    separator_ = new ::std::string;
  }
  return separator_;
}

// optional uint32 width = 2;
inline bool Text_Separator::has_width() const {
  return _has_bit(1);
}
inline void Text_Separator::clear_width() {
  width_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Text_Separator::width() const {
  return width_;
}
inline void Text_Separator::set_width(::google::protobuf::uint32 value) {
  _set_bit(1);
  width_ = value;
}

// optional bool flash = 3 [default = true];
inline bool Text_Separator::has_flash() const {
  return _has_bit(2);
}
inline void Text_Separator::clear_flash() {
  flash_ = true;
  _clear_bit(2);
}
inline bool Text_Separator::flash() const {
  return flash_;
}
inline void Text_Separator::set_flash(bool value) {
  _set_bit(2);
  flash_ = value;
}

// -------------------------------------------------------------------

// Text_Display

// optional bool hours = 1 [default = false];
inline bool Text_Display::has_hours() const {
  return _has_bit(0);
}
inline void Text_Display::clear_hours() {
  hours_ = false;
  _clear_bit(0);
}
inline bool Text_Display::hours() const {
  return hours_;
}
inline void Text_Display::set_hours(bool value) {
  _set_bit(0);
  hours_ = value;
}

// optional bool minutes = 2 [default = true];
inline bool Text_Display::has_minutes() const {
  return _has_bit(1);
}
inline void Text_Display::clear_minutes() {
  minutes_ = true;
  _clear_bit(1);
}
inline bool Text_Display::minutes() const {
  return minutes_;
}
inline void Text_Display::set_minutes(bool value) {
  _set_bit(1);
  minutes_ = value;
}

// optional bool seconds = 3 [default = true];
inline bool Text_Display::has_seconds() const {
  return _has_bit(2);
}
inline void Text_Display::clear_seconds() {
  seconds_ = true;
  _clear_bit(2);
}
inline bool Text_Display::seconds() const {
  return seconds_;
}
inline void Text_Display::set_seconds(bool value) {
  _set_bit(2);
  seconds_ = value;
}

// optional bool milliseconds = 4 [default = true];
inline bool Text_Display::has_milliseconds() const {
  return _has_bit(3);
}
inline void Text_Display::clear_milliseconds() {
  milliseconds_ = true;
  _clear_bit(3);
}
inline bool Text_Display::milliseconds() const {
  return milliseconds_;
}
inline void Text_Display::set_milliseconds(bool value) {
  _set_bit(3);
  milliseconds_ = value;
}

// optional bool frames = 5 [default = false];
inline bool Text_Display::has_frames() const {
  return _has_bit(4);
}
inline void Text_Display::clear_frames() {
  frames_ = false;
  _clear_bit(4);
}
inline bool Text_Display::frames() const {
  return frames_;
}
inline void Text_Display::set_frames(bool value) {
  _set_bit(4);
  frames_ = value;
}

// -------------------------------------------------------------------

// Text

// optional .rec.gui.FontDesc font = 1;
inline bool Text::has_font() const {
  return _has_bit(0);
}
inline void Text::clear_font() {
  if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
  _clear_bit(0);
}
inline const ::rec::gui::FontDesc& Text::font() const {
  return font_ != NULL ? *font_ : *default_instance_->font_;
}
inline ::rec::gui::FontDesc* Text::mutable_font() {
  _set_bit(0);
  if (font_ == NULL) font_ = new ::rec::gui::FontDesc;
  return font_;
}

// optional .rec.gui.time.Text.Separator separator = 2;
inline bool Text::has_separator() const {
  return _has_bit(1);
}
inline void Text::clear_separator() {
  if (separator_ != NULL) separator_->::rec::gui::time::Text_Separator::Clear();
  _clear_bit(1);
}
inline const ::rec::gui::time::Text_Separator& Text::separator() const {
  return separator_ != NULL ? *separator_ : *default_instance_->separator_;
}
inline ::rec::gui::time::Text_Separator* Text::mutable_separator() {
  _set_bit(1);
  if (separator_ == NULL) separator_ = new ::rec::gui::time::Text_Separator;
  return separator_;
}

// optional .rec.gui.time.Text.Display display = 3;
inline bool Text::has_display() const {
  return _has_bit(2);
}
inline void Text::clear_display() {
  if (display_ != NULL) display_->::rec::gui::time::Text_Display::Clear();
  _clear_bit(2);
}
inline const ::rec::gui::time::Text_Display& Text::display() const {
  return display_ != NULL ? *display_ : *default_instance_->display_;
}
inline ::rec::gui::time::Text_Display* Text::mutable_display() {
  _set_bit(2);
  if (display_ == NULL) display_ = new ::rec::gui::time::Text_Display;
  return display_;
}

// optional uint32 margin = 4 [default = 2];
inline bool Text::has_margin() const {
  return _has_bit(3);
}
inline void Text::clear_margin() {
  margin_ = 2u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Text::margin() const {
  return margin_;
}
inline void Text::set_margin(::google::protobuf::uint32 value) {
  _set_bit(3);
  margin_ = value;
}

// -------------------------------------------------------------------

// Dial

// optional .rec.gui.time.Dial.Style style = 1;
inline bool Dial::has_style() const {
  return _has_bit(0);
}
inline void Dial::clear_style() {
  style_ = 1;
  _clear_bit(0);
}
inline ::rec::gui::time::Dial_Style Dial::style() const {
  return static_cast< ::rec::gui::time::Dial_Style >(style_);
}
inline void Dial::set_style(::rec::gui::time::Dial_Style value) {
  GOOGLE_DCHECK(::rec::gui::time::Dial_Style_IsValid(value));
  _set_bit(0);
  style_ = value;
}

// optional uint32 outline = 2;
inline bool Dial::has_outline() const {
  return _has_bit(1);
}
inline void Dial::clear_outline() {
  outline_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Dial::outline() const {
  return outline_;
}
inline void Dial::set_outline(::google::protobuf::uint32 value) {
  _set_bit(1);
  outline_ = value;
}

// optional bool display_lap_count = 4;
inline bool Dial::has_display_lap_count() const {
  return _has_bit(2);
}
inline void Dial::clear_display_lap_count() {
  display_lap_count_ = false;
  _clear_bit(2);
}
inline bool Dial::display_lap_count() const {
  return display_lap_count_;
}
inline void Dial::set_display_lap_count(bool value) {
  _set_bit(2);
  display_lap_count_ = value;
}

// optional .rec.gui.FontDesc font = 5;
inline bool Dial::has_font() const {
  return _has_bit(3);
}
inline void Dial::clear_font() {
  if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
  _clear_bit(3);
}
inline const ::rec::gui::FontDesc& Dial::font() const {
  return font_ != NULL ? *font_ : *default_instance_->font_;
}
inline ::rec::gui::FontDesc* Dial::mutable_font() {
  _set_bit(3);
  if (font_ == NULL) font_ = new ::rec::gui::FontDesc;
  return font_;
}

// optional uint32 margin = 6 [default = 2];
inline bool Dial::has_margin() const {
  return _has_bit(4);
}
inline void Dial::clear_margin() {
  margin_ = 2u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Dial::margin() const {
  return margin_;
}
inline void Dial::set_margin(::google::protobuf::uint32 value) {
  _set_bit(4);
  margin_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace time
}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::time::Dial_Style>() {
  return ::rec::gui::time::Dial_Style_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fTimeDisplay_2eproto__INCLUDED
