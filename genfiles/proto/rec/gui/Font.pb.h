// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/Font.proto

#ifndef PROTOBUF_rec_2fgui_2fFont_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fFont_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fFont_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fFont_2eproto();

class FontDesc;
class FontDesc_Style;

enum FontDesc_Type {
  FontDesc_Type_SANS_SERIF = 1,
  FontDesc_Type_SERIF = 2,
  FontDesc_Type_MONOSPACE = 3
};
bool FontDesc_Type_IsValid(int value);
const FontDesc_Type FontDesc_Type_Type_MIN = FontDesc_Type_SANS_SERIF;
const FontDesc_Type FontDesc_Type_Type_MAX = FontDesc_Type_MONOSPACE;
const int FontDesc_Type_Type_ARRAYSIZE = FontDesc_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FontDesc_Type_descriptor();
inline const ::std::string& FontDesc_Type_Name(FontDesc_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FontDesc_Type_descriptor(), value);
}
inline bool FontDesc_Type_Parse(
    const ::std::string& name, FontDesc_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FontDesc_Type>(
    FontDesc_Type_descriptor(), name, value);
}
// ===================================================================

class FontDesc_Style : public ::google::protobuf::Message {
 public:
  FontDesc_Style();
  virtual ~FontDesc_Style();

  FontDesc_Style(const FontDesc_Style& from);

  inline FontDesc_Style& operator=(const FontDesc_Style& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FontDesc_Style& default_instance();

  void Swap(FontDesc_Style* other);

  // implements Message ----------------------------------------------

  FontDesc_Style* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FontDesc_Style& from);
  void MergeFrom(const FontDesc_Style& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bold = 1;
  inline bool has_bold() const;
  inline void clear_bold();
  static const int kBoldFieldNumber = 1;
  inline bool bold() const;
  inline void set_bold(bool value);

  // optional bool italic = 2;
  inline bool has_italic() const;
  inline void clear_italic();
  static const int kItalicFieldNumber = 2;
  inline bool italic() const;
  inline void set_italic(bool value);

  // optional bool underlined = 3;
  inline bool has_underlined() const;
  inline void clear_underlined();
  static const int kUnderlinedFieldNumber = 3;
  inline bool underlined() const;
  inline void set_underlined(bool value);

  // @@protoc_insertion_point(class_scope:rec.gui.FontDesc.Style)
 private:
  inline void set_has_bold();
  inline void clear_has_bold();
  inline void set_has_italic();
  inline void clear_has_italic();
  inline void set_has_underlined();
  inline void clear_has_underlined();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bold_;
  bool italic_;
  bool underlined_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fFont_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fFont_2eproto();

  void InitAsDefaultInstance();
  static FontDesc_Style* default_instance_;
};
// -------------------------------------------------------------------

class FontDesc : public ::google::protobuf::Message {
 public:
  FontDesc();
  virtual ~FontDesc();

  FontDesc(const FontDesc& from);

  inline FontDesc& operator=(const FontDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FontDesc& default_instance();

  void Swap(FontDesc* other);

  // implements Message ----------------------------------------------

  FontDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FontDesc& from);
  void MergeFrom(const FontDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FontDesc_Style Style;

  typedef FontDesc_Type Type;
  static const Type SANS_SERIF = FontDesc_Type_SANS_SERIF;
  static const Type SERIF = FontDesc_Type_SERIF;
  static const Type MONOSPACE = FontDesc_Type_MONOSPACE;
  static inline bool Type_IsValid(int value) {
    return FontDesc_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FontDesc_Type_Type_MIN;
  static const Type Type_MAX =
    FontDesc_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FontDesc_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FontDesc_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FontDesc_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FontDesc_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float font_height = 2 [default = 18];
  inline bool has_font_height() const;
  inline void clear_font_height();
  static const int kFontHeightFieldNumber = 2;
  inline float font_height() const;
  inline void set_font_height(float value);

  // optional .rec.gui.FontDesc.Style style = 3;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 3;
  inline const ::rec::gui::FontDesc_Style& style() const;
  inline ::rec::gui::FontDesc_Style* mutable_style();
  inline ::rec::gui::FontDesc_Style* release_style();
  inline void set_allocated_style(::rec::gui::FontDesc_Style* style);

  // optional .rec.gui.FontDesc.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::rec::gui::FontDesc_Type type() const;
  inline void set_type(::rec::gui::FontDesc_Type value);

  // @@protoc_insertion_point(class_scope:rec.gui.FontDesc)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_font_height();
  inline void clear_has_font_height();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::rec::gui::FontDesc_Style* style_;
  float font_height_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fFont_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fFont_2eproto();

  void InitAsDefaultInstance();
  static FontDesc* default_instance_;
};
// ===================================================================


// ===================================================================

// FontDesc_Style

// optional bool bold = 1;
inline bool FontDesc_Style::has_bold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FontDesc_Style::set_has_bold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FontDesc_Style::clear_has_bold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FontDesc_Style::clear_bold() {
  bold_ = false;
  clear_has_bold();
}
inline bool FontDesc_Style::bold() const {
  return bold_;
}
inline void FontDesc_Style::set_bold(bool value) {
  set_has_bold();
  bold_ = value;
}

// optional bool italic = 2;
inline bool FontDesc_Style::has_italic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FontDesc_Style::set_has_italic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FontDesc_Style::clear_has_italic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FontDesc_Style::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
inline bool FontDesc_Style::italic() const {
  return italic_;
}
inline void FontDesc_Style::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
}

// optional bool underlined = 3;
inline bool FontDesc_Style::has_underlined() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FontDesc_Style::set_has_underlined() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FontDesc_Style::clear_has_underlined() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FontDesc_Style::clear_underlined() {
  underlined_ = false;
  clear_has_underlined();
}
inline bool FontDesc_Style::underlined() const {
  return underlined_;
}
inline void FontDesc_Style::set_underlined(bool value) {
  set_has_underlined();
  underlined_ = value;
}

// -------------------------------------------------------------------

// FontDesc

// optional string name = 1;
inline bool FontDesc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FontDesc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FontDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FontDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FontDesc::name() const {
  return *name_;
}
inline void FontDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FontDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FontDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FontDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FontDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FontDesc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float font_height = 2 [default = 18];
inline bool FontDesc::has_font_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FontDesc::set_has_font_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FontDesc::clear_has_font_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FontDesc::clear_font_height() {
  font_height_ = 18;
  clear_has_font_height();
}
inline float FontDesc::font_height() const {
  return font_height_;
}
inline void FontDesc::set_font_height(float value) {
  set_has_font_height();
  font_height_ = value;
}

// optional .rec.gui.FontDesc.Style style = 3;
inline bool FontDesc::has_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FontDesc::set_has_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FontDesc::clear_has_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FontDesc::clear_style() {
  if (style_ != NULL) style_->::rec::gui::FontDesc_Style::Clear();
  clear_has_style();
}
inline const ::rec::gui::FontDesc_Style& FontDesc::style() const {
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
inline ::rec::gui::FontDesc_Style* FontDesc::mutable_style() {
  set_has_style();
  if (style_ == NULL) style_ = new ::rec::gui::FontDesc_Style;
  return style_;
}
inline ::rec::gui::FontDesc_Style* FontDesc::release_style() {
  clear_has_style();
  ::rec::gui::FontDesc_Style* temp = style_;
  style_ = NULL;
  return temp;
}
inline void FontDesc::set_allocated_style(::rec::gui::FontDesc_Style* style) {
  delete style_;
  style_ = style;
  if (style) {
    set_has_style();
  } else {
    clear_has_style();
  }
}

// optional .rec.gui.FontDesc.Type type = 4;
inline bool FontDesc::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FontDesc::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FontDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FontDesc::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::rec::gui::FontDesc_Type FontDesc::type() const {
  return static_cast< ::rec::gui::FontDesc_Type >(type_);
}
inline void FontDesc::set_type(::rec::gui::FontDesc_Type value) {
  assert(::rec::gui::FontDesc_Type_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::FontDesc_Type>() {
  return ::rec::gui::FontDesc_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fFont_2eproto__INCLUDED
