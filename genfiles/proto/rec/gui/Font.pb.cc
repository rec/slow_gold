// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/Font.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* FontDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* FontDesc_Style_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontDesc_Style_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fFont_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/Font.proto");
  GOOGLE_CHECK(file != NULL);
  FontDesc_descriptor_ = file->message_type(0);
  static const int FontDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc, font_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc, style_),
  };
  FontDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontDesc_descriptor_,
      FontDesc::default_instance_,
      FontDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontDesc));
  FontDesc_Style_descriptor_ = FontDesc_descriptor_->nested_type(0);
  static const int FontDesc_Style_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc_Style, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc_Style, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc_Style, underlined_),
  };
  FontDesc_Style_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontDesc_Style_descriptor_,
      FontDesc_Style::default_instance_,
      FontDesc_Style_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc_Style, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontDesc_Style, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontDesc_Style));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fFont_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontDesc_descriptor_, &FontDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontDesc_Style_descriptor_, &FontDesc_Style::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fFont_2eproto() {
  delete FontDesc::default_instance_;
  delete FontDesc_reflection_;
  delete FontDesc_Style::default_instance_;
  delete FontDesc_Style_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fFont_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rec/gui/Font.proto\022\007rec.gui\"\224\001\n\010FontDe"
    "sc\022\014\n\004name\030\001 \001(\t\022\027\n\013font_height\030\002 \001(\002:\0022"
    "4\022&\n\005style\030\003 \001(\0132\027.rec.gui.FontDesc.Styl"
    "e\0329\n\005Style\022\014\n\004bold\030\001 \001(\010\022\016\n\006italic\030\002 \001(\010"
    "\022\022\n\nunderlined\030\003 \001(\010", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/Font.proto", &protobuf_RegisterTypes);
  FontDesc::default_instance_ = new FontDesc();
  FontDesc_Style::default_instance_ = new FontDesc_Style();
  FontDesc::default_instance_->InitAsDefaultInstance();
  FontDesc_Style::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fFont_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fFont_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fFont_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fFont_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FontDesc_Style::kBoldFieldNumber;
const int FontDesc_Style::kItalicFieldNumber;
const int FontDesc_Style::kUnderlinedFieldNumber;
#endif  // !_MSC_VER

FontDesc_Style::FontDesc_Style()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontDesc_Style::InitAsDefaultInstance() {
}

FontDesc_Style::FontDesc_Style(const FontDesc_Style& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontDesc_Style::SharedCtor() {
  _cached_size_ = 0;
  bold_ = false;
  italic_ = false;
  underlined_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontDesc_Style::~FontDesc_Style() {
  SharedDtor();
}

void FontDesc_Style::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FontDesc_Style::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontDesc_Style::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontDesc_Style_descriptor_;
}

const FontDesc_Style& FontDesc_Style::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fFont_2eproto();  return *default_instance_;
}

FontDesc_Style* FontDesc_Style::default_instance_ = NULL;

FontDesc_Style* FontDesc_Style::New() const {
  return new FontDesc_Style;
}

void FontDesc_Style::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bold_ = false;
    italic_ = false;
    underlined_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontDesc_Style::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_italic;
        break;
      }
      
      // optional bool italic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_underlined;
        break;
      }
      
      // optional bool underlined = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underlined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underlined_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontDesc_Style::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bold = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bold(), output);
  }
  
  // optional bool italic = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->italic(), output);
  }
  
  // optional bool underlined = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->underlined(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontDesc_Style::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bold = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bold(), target);
  }
  
  // optional bool italic = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->italic(), target);
  }
  
  // optional bool underlined = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->underlined(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontDesc_Style::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bold = 1;
    if (has_bold()) {
      total_size += 1 + 1;
    }
    
    // optional bool italic = 2;
    if (has_italic()) {
      total_size += 1 + 1;
    }
    
    // optional bool underlined = 3;
    if (has_underlined()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontDesc_Style::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontDesc_Style* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontDesc_Style*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontDesc_Style::MergeFrom(const FontDesc_Style& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bold(from.bold());
    }
    if (from._has_bit(1)) {
      set_italic(from.italic());
    }
    if (from._has_bit(2)) {
      set_underlined(from.underlined());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontDesc_Style::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontDesc_Style::CopyFrom(const FontDesc_Style& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontDesc_Style::IsInitialized() const {
  
  return true;
}

void FontDesc_Style::Swap(FontDesc_Style* other) {
  if (other != this) {
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(underlined_, other->underlined_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontDesc_Style::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontDesc_Style_descriptor_;
  metadata.reflection = FontDesc_Style_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string FontDesc::_default_name_;
#ifndef _MSC_VER
const int FontDesc::kNameFieldNumber;
const int FontDesc::kFontHeightFieldNumber;
const int FontDesc::kStyleFieldNumber;
#endif  // !_MSC_VER

FontDesc::FontDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontDesc::InitAsDefaultInstance() {
  style_ = const_cast< ::rec::gui::FontDesc_Style*>(&::rec::gui::FontDesc_Style::default_instance());
}

FontDesc::FontDesc(const FontDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontDesc::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  font_height_ = 24;
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontDesc::~FontDesc() {
  SharedDtor();
}

void FontDesc::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete style_;
  }
}

void FontDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontDesc_descriptor_;
}

const FontDesc& FontDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fFont_2eproto();  return *default_instance_;
}

FontDesc* FontDesc::default_instance_ = NULL;

FontDesc* FontDesc::New() const {
  return new FontDesc;
}

void FontDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    font_height_ = 24;
    if (_has_bit(2)) {
      if (style_ != NULL) style_->::rec::gui::FontDesc_Style::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_font_height;
        break;
      }
      
      // optional float font_height = 2 [default = 24];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_font_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &font_height_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }
      
      // optional .rec.gui.FontDesc.Style style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional float font_height = 2 [default = 24];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->font_height(), output);
  }
  
  // optional .rec.gui.FontDesc.Style style = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional float font_height = 2 [default = 24];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->font_height(), target);
  }
  
  // optional .rec.gui.FontDesc.Style style = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional float font_height = 2 [default = 24];
    if (has_font_height()) {
      total_size += 1 + 4;
    }
    
    // optional .rec.gui.FontDesc.Style style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontDesc::MergeFrom(const FontDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_font_height(from.font_height());
    }
    if (from._has_bit(2)) {
      mutable_style()->::rec::gui::FontDesc_Style::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontDesc::CopyFrom(const FontDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontDesc::IsInitialized() const {
  
  return true;
}

void FontDesc::Swap(FontDesc* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(font_height_, other->font_height_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontDesc_descriptor_;
  metadata.reflection = FontDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
