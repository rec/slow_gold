// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/RecentFiles.proto

#ifndef PROTOBUF_rec_2fgui_2fRecentFiles_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fRecentFiles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/util/file/VirtualFile.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fRecentFiles_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fRecentFiles_2eproto();

class RecentFile;
class RecentFiles;

// ===================================================================

class RecentFile : public ::google::protobuf::Message {
 public:
  RecentFile();
  virtual ~RecentFile();
  
  RecentFile(const RecentFile& from);
  
  inline RecentFile& operator=(const RecentFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentFile& default_instance();
  
  void Swap(RecentFile* other);
  
  // implements Message ----------------------------------------------
  
  RecentFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentFile& from);
  void MergeFrom(const RecentFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional .rec.util.file.VirtualFile file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::rec::util::file::VirtualFile& file() const;
  inline ::rec::util::file::VirtualFile* mutable_file();
  
  // @@protoc_insertion_point(class_scope:rec.gui.RecentFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 timestamp_;
  ::rec::util::file::VirtualFile* file_;
  friend void  protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fRecentFiles_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fRecentFiles_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecentFile* default_instance_;
};
// -------------------------------------------------------------------

class RecentFiles : public ::google::protobuf::Message {
 public:
  RecentFiles();
  virtual ~RecentFiles();
  
  RecentFiles(const RecentFiles& from);
  
  inline RecentFiles& operator=(const RecentFiles& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentFiles& default_instance();
  
  void Swap(RecentFiles* other);
  
  // implements Message ----------------------------------------------
  
  RecentFiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentFiles& from);
  void MergeFrom(const RecentFiles& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.gui.RecentFile file = 3;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::rec::gui::RecentFile& file(int index) const;
  inline ::rec::gui::RecentFile* mutable_file(int index);
  inline ::rec::gui::RecentFile* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::RecentFile >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::RecentFile >*
      mutable_file();
  
  // optional int32 max_files = 4 [default = 16];
  inline bool has_max_files() const;
  inline void clear_max_files();
  static const int kMaxFilesFieldNumber = 4;
  inline ::google::protobuf::int32 max_files() const;
  inline void set_max_files(::google::protobuf::int32 value);
  
  // optional bool reload_most_recent = 5 [default = true];
  inline bool has_reload_most_recent() const;
  inline void clear_reload_most_recent();
  static const int kReloadMostRecentFieldNumber = 5;
  inline bool reload_most_recent() const;
  inline void set_reload_most_recent(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.RecentFiles)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::gui::RecentFile > file_;
  ::google::protobuf::int32 max_files_;
  bool reload_most_recent_;
  friend void  protobuf_AddDesc_rec_2fgui_2fRecentFiles_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fRecentFiles_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fRecentFiles_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecentFiles* default_instance_;
};
// ===================================================================


// ===================================================================

// RecentFile

// optional int64 timestamp = 1;
inline bool RecentFile::has_timestamp() const {
  return _has_bit(0);
}
inline void RecentFile::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 RecentFile::timestamp() const {
  return timestamp_;
}
inline void RecentFile::set_timestamp(::google::protobuf::int64 value) {
  _set_bit(0);
  timestamp_ = value;
}

// optional .rec.util.file.VirtualFile file = 2;
inline bool RecentFile::has_file() const {
  return _has_bit(1);
}
inline void RecentFile::clear_file() {
  if (file_ != NULL) file_->::rec::util::file::VirtualFile::Clear();
  _clear_bit(1);
}
inline const ::rec::util::file::VirtualFile& RecentFile::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::rec::util::file::VirtualFile* RecentFile::mutable_file() {
  _set_bit(1);
  if (file_ == NULL) file_ = new ::rec::util::file::VirtualFile;
  return file_;
}

// -------------------------------------------------------------------

// RecentFiles

// repeated .rec.gui.RecentFile file = 3;
inline int RecentFiles::file_size() const {
  return file_.size();
}
inline void RecentFiles::clear_file() {
  file_.Clear();
}
inline const ::rec::gui::RecentFile& RecentFiles::file(int index) const {
  return file_.Get(index);
}
inline ::rec::gui::RecentFile* RecentFiles::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::rec::gui::RecentFile* RecentFiles::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::RecentFile >&
RecentFiles::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::RecentFile >*
RecentFiles::mutable_file() {
  return &file_;
}

// optional int32 max_files = 4 [default = 16];
inline bool RecentFiles::has_max_files() const {
  return _has_bit(1);
}
inline void RecentFiles::clear_max_files() {
  max_files_ = 16;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RecentFiles::max_files() const {
  return max_files_;
}
inline void RecentFiles::set_max_files(::google::protobuf::int32 value) {
  _set_bit(1);
  max_files_ = value;
}

// optional bool reload_most_recent = 5 [default = true];
inline bool RecentFiles::has_reload_most_recent() const {
  return _has_bit(2);
}
inline void RecentFiles::clear_reload_most_recent() {
  reload_most_recent_ = true;
  _clear_bit(2);
}
inline bool RecentFiles::reload_most_recent() const {
  return reload_most_recent_;
}
inline void RecentFiles::set_reload_most_recent(bool value) {
  _set_bit(2);
  reload_most_recent_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fRecentFiles_2eproto__INCLUDED
