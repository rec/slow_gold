// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/Component.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* ComponentDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fComponent_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fComponent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/Component.proto");
  GOOGLE_CHECK(file != NULL);
  ComponentDesc_descriptor_ = file->message_type(0);
  static const int ComponentDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, transparent_),
  };
  ComponentDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentDesc_descriptor_,
      ComponentDesc::default_instance_,
      ComponentDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fComponent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentDesc_descriptor_, &ComponentDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fComponent_2eproto() {
  delete ComponentDesc::default_instance_;
  delete ComponentDesc_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fComponent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::color::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fGeometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rec/gui/Component.proto\022\007rec.gui\032\023rec/"
    "gui/Color.proto\032\022rec/gui/Font.proto\032\026rec"
    "/gui/Geometry.proto\"\177\n\rComponentDesc\022%\n\006"
    "colors\030\001 \001(\0132\025.rec.gui.color.Colors\022\037\n\004f"
    "ont\030\002 \001(\0132\021.rec.gui.FontDesc\022\021\n\006margin\030\003"
    " \001(\r:\0012\022\023\n\013transparent\030\004 \001(\010", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/Component.proto", &protobuf_RegisterTypes);
  ComponentDesc::default_instance_ = new ComponentDesc();
  ComponentDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fComponent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fComponent_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fComponent_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fComponent_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fComponent_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ComponentDesc::kColorsFieldNumber;
const int ComponentDesc::kFontFieldNumber;
const int ComponentDesc::kMarginFieldNumber;
const int ComponentDesc::kTransparentFieldNumber;
#endif  // !_MSC_VER

ComponentDesc::ComponentDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentDesc::InitAsDefaultInstance() {
  colors_ = const_cast< ::rec::gui::color::Colors*>(&::rec::gui::color::Colors::default_instance());
  font_ = const_cast< ::rec::gui::FontDesc*>(&::rec::gui::FontDesc::default_instance());
}

ComponentDesc::ComponentDesc(const ComponentDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentDesc::SharedCtor() {
  _cached_size_ = 0;
  colors_ = NULL;
  font_ = NULL;
  margin_ = 2u;
  transparent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentDesc::~ComponentDesc() {
  SharedDtor();
}

void ComponentDesc::SharedDtor() {
  if (this != default_instance_) {
    delete colors_;
    delete font_;
  }
}

void ComponentDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentDesc_descriptor_;
}

const ComponentDesc& ComponentDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fComponent_2eproto();  return *default_instance_;
}

ComponentDesc* ComponentDesc::default_instance_ = NULL;

ComponentDesc* ComponentDesc::New() const {
  return new ComponentDesc;
}

void ComponentDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (colors_ != NULL) colors_->::rec::gui::color::Colors::Clear();
    }
    if (_has_bit(1)) {
      if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
    }
    margin_ = 2u;
    transparent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.color.Colors colors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_font;
        break;
      }
      
      // optional .rec.gui.FontDesc font = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_margin;
        break;
      }
      
      // optional uint32 margin = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transparent;
        break;
      }
      
      // optional bool transparent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.color.Colors colors = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colors(), output);
  }
  
  // optional .rec.gui.FontDesc font = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->font(), output);
  }
  
  // optional uint32 margin = 3 [default = 2];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->margin(), output);
  }
  
  // optional bool transparent = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->transparent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.color.Colors colors = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colors(), target);
  }
  
  // optional .rec.gui.FontDesc font = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->font(), target);
  }
  
  // optional uint32 margin = 3 [default = 2];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->margin(), target);
  }
  
  // optional bool transparent = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->transparent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentDesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.color.Colors colors = 1;
    if (has_colors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colors());
    }
    
    // optional .rec.gui.FontDesc font = 2;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }
    
    // optional uint32 margin = 3 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }
    
    // optional bool transparent = 4;
    if (has_transparent()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentDesc::MergeFrom(const ComponentDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_colors()->::rec::gui::color::Colors::MergeFrom(from.colors());
    }
    if (from._has_bit(1)) {
      mutable_font()->::rec::gui::FontDesc::MergeFrom(from.font());
    }
    if (from._has_bit(2)) {
      set_margin(from.margin());
    }
    if (from._has_bit(3)) {
      set_transparent(from.transparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentDesc::CopyFrom(const ComponentDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDesc::IsInitialized() const {
  
  return true;
}

void ComponentDesc::Swap(ComponentDesc* other) {
  if (other != this) {
    std::swap(colors_, other->colors_);
    std::swap(font_, other->font_);
    std::swap(margin_, other->margin_);
    std::swap(transparent_, other->transparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentDesc_descriptor_;
  metadata.reflection = ComponentDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
