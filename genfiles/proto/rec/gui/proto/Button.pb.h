// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Button.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fButton_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fButton_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/data/proto/Address.pb.h"
#include "rec/gui/proto/Font.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fButton_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fButton_2eproto();

class ButtonProto;
class ButtonProto_HasState;

enum ButtonProto_Style {
  ButtonProto_Style_ImageFitted = 0,
  ButtonProto_Style_ImageRaw = 1,
  ButtonProto_Style_ImageAboveTextLabel = 2,
  ButtonProto_Style_ImageOnButtonBackground = 3,
  ButtonProto_Style_ImageStretched = 4
};
bool ButtonProto_Style_IsValid(int value);
const ButtonProto_Style ButtonProto_Style_Style_MIN = ButtonProto_Style_ImageFitted;
const ButtonProto_Style ButtonProto_Style_Style_MAX = ButtonProto_Style_ImageStretched;
const int ButtonProto_Style_Style_ARRAYSIZE = ButtonProto_Style_Style_MAX + 1;

const ::google::protobuf::EnumDescriptor* ButtonProto_Style_descriptor();
inline const ::std::string& ButtonProto_Style_Name(ButtonProto_Style value) {
  return ::google::protobuf::internal::NameOfEnum(
    ButtonProto_Style_descriptor(), value);
}
inline bool ButtonProto_Style_Parse(
    const ::std::string& name, ButtonProto_Style* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ButtonProto_Style>(
    ButtonProto_Style_descriptor(), name, value);
}
// ===================================================================

class ButtonProto_HasState : public ::google::protobuf::Message {
 public:
  ButtonProto_HasState();
  virtual ~ButtonProto_HasState();

  ButtonProto_HasState(const ButtonProto_HasState& from);

  inline ButtonProto_HasState& operator=(const ButtonProto_HasState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonProto_HasState& default_instance();

  void Swap(ButtonProto_HasState* other);

  // implements Message ----------------------------------------------

  ButtonProto_HasState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonProto_HasState& from);
  void MergeFrom(const ButtonProto_HasState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normal = 1 [default = true];
  inline bool has_normal() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 1;
  inline bool normal() const;
  inline void set_normal(bool value);

  // optional bool over = 2 [default = false];
  inline bool has_over() const;
  inline void clear_over();
  static const int kOverFieldNumber = 2;
  inline bool over() const;
  inline void set_over(bool value);

  // optional bool down = 3 [default = true];
  inline bool has_down() const;
  inline void clear_down();
  static const int kDownFieldNumber = 3;
  inline bool down() const;
  inline void set_down(bool value);

  // optional bool disabled = 4 [default = true];
  inline bool has_disabled() const;
  inline void clear_disabled();
  static const int kDisabledFieldNumber = 4;
  inline bool disabled() const;
  inline void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:rec.gui.ButtonProto.HasState)
 private:
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_over();
  inline void clear_has_over();
  inline void set_has_down();
  inline void clear_has_down();
  inline void set_has_disabled();
  inline void clear_has_disabled();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool normal_;
  bool over_;
  bool down_;
  bool disabled_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fButton_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fButton_2eproto();

  void InitAsDefaultInstance();
  static ButtonProto_HasState* default_instance_;
};
// -------------------------------------------------------------------

class ButtonProto : public ::google::protobuf::Message {
 public:
  ButtonProto();
  virtual ~ButtonProto();

  ButtonProto(const ButtonProto& from);

  inline ButtonProto& operator=(const ButtonProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonProto& default_instance();

  void Swap(ButtonProto* other);

  // implements Message ----------------------------------------------

  ButtonProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonProto& from);
  void MergeFrom(const ButtonProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ButtonProto_HasState HasState;

  typedef ButtonProto_Style Style;
  static const Style ImageFitted = ButtonProto_Style_ImageFitted;
  static const Style ImageRaw = ButtonProto_Style_ImageRaw;
  static const Style ImageAboveTextLabel = ButtonProto_Style_ImageAboveTextLabel;
  static const Style ImageOnButtonBackground = ButtonProto_Style_ImageOnButtonBackground;
  static const Style ImageStretched = ButtonProto_Style_ImageStretched;
  static inline bool Style_IsValid(int value) {
    return ButtonProto_Style_IsValid(value);
  }
  static const Style Style_MIN =
    ButtonProto_Style_Style_MIN;
  static const Style Style_MAX =
    ButtonProto_Style_Style_MAX;
  static const int Style_ARRAYSIZE =
    ButtonProto_Style_Style_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Style_descriptor() {
    return ButtonProto_Style_descriptor();
  }
  static inline const ::std::string& Style_Name(Style value) {
    return ButtonProto_Style_Name(value);
  }
  static inline bool Style_Parse(const ::std::string& name,
      Style* value) {
    return ButtonProto_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rec.gui.ButtonProto.Style style = 1;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 1;
  inline ::rec::gui::ButtonProto_Style style() const;
  inline void set_style(::rec::gui::ButtonProto_Style value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string tooltip = 3;
  inline bool has_tooltip() const;
  inline void clear_tooltip();
  static const int kTooltipFieldNumber = 3;
  inline const ::std::string& tooltip() const;
  inline void set_tooltip(const ::std::string& value);
  inline void set_tooltip(const char* value);
  inline void set_tooltip(const char* value, size_t size);
  inline ::std::string* mutable_tooltip();
  inline ::std::string* release_tooltip();
  inline void set_allocated_tooltip(::std::string* tooltip);

  // optional string image = 4;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 4;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional .rec.gui.ButtonProto.HasState state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline const ::rec::gui::ButtonProto_HasState& state() const;
  inline ::rec::gui::ButtonProto_HasState* mutable_state();
  inline ::rec::gui::ButtonProto_HasState* release_state();
  inline void set_allocated_state(::rec::gui::ButtonProto_HasState* state);

  // optional .rec.gui.ButtonProto.HasState state_on = 6;
  inline bool has_state_on() const;
  inline void clear_state_on();
  static const int kStateOnFieldNumber = 6;
  inline const ::rec::gui::ButtonProto_HasState& state_on() const;
  inline ::rec::gui::ButtonProto_HasState* mutable_state_on();
  inline ::rec::gui::ButtonProto_HasState* release_state_on();
  inline void set_allocated_state_on(::rec::gui::ButtonProto_HasState* state_on);

  // @@protoc_insertion_point(class_scope:rec.gui.ButtonProto)
 private:
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tooltip();
  inline void clear_has_tooltip();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_state_on();
  inline void clear_has_state_on();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* tooltip_;
  ::std::string* image_;
  ::rec::gui::ButtonProto_HasState* state_;
  ::rec::gui::ButtonProto_HasState* state_on_;
  int style_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fButton_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fButton_2eproto();

  void InitAsDefaultInstance();
  static ButtonProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ButtonProto_HasState

// optional bool normal = 1 [default = true];
inline bool ButtonProto_HasState::has_normal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonProto_HasState::set_has_normal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonProto_HasState::clear_has_normal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonProto_HasState::clear_normal() {
  normal_ = true;
  clear_has_normal();
}
inline bool ButtonProto_HasState::normal() const {
  return normal_;
}
inline void ButtonProto_HasState::set_normal(bool value) {
  set_has_normal();
  normal_ = value;
}

// optional bool over = 2 [default = false];
inline bool ButtonProto_HasState::has_over() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonProto_HasState::set_has_over() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonProto_HasState::clear_has_over() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonProto_HasState::clear_over() {
  over_ = false;
  clear_has_over();
}
inline bool ButtonProto_HasState::over() const {
  return over_;
}
inline void ButtonProto_HasState::set_over(bool value) {
  set_has_over();
  over_ = value;
}

// optional bool down = 3 [default = true];
inline bool ButtonProto_HasState::has_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ButtonProto_HasState::set_has_down() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ButtonProto_HasState::clear_has_down() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ButtonProto_HasState::clear_down() {
  down_ = true;
  clear_has_down();
}
inline bool ButtonProto_HasState::down() const {
  return down_;
}
inline void ButtonProto_HasState::set_down(bool value) {
  set_has_down();
  down_ = value;
}

// optional bool disabled = 4 [default = true];
inline bool ButtonProto_HasState::has_disabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ButtonProto_HasState::set_has_disabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ButtonProto_HasState::clear_has_disabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ButtonProto_HasState::clear_disabled() {
  disabled_ = true;
  clear_has_disabled();
}
inline bool ButtonProto_HasState::disabled() const {
  return disabled_;
}
inline void ButtonProto_HasState::set_disabled(bool value) {
  set_has_disabled();
  disabled_ = value;
}

// -------------------------------------------------------------------

// ButtonProto

// optional .rec.gui.ButtonProto.Style style = 1;
inline bool ButtonProto::has_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonProto::set_has_style() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonProto::clear_has_style() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonProto::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::rec::gui::ButtonProto_Style ButtonProto::style() const {
  return static_cast< ::rec::gui::ButtonProto_Style >(style_);
}
inline void ButtonProto::set_style(::rec::gui::ButtonProto_Style value) {
  assert(::rec::gui::ButtonProto_Style_IsValid(value));
  set_has_style();
  style_ = value;
}

// optional string name = 2;
inline bool ButtonProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ButtonProto::name() const {
  return *name_;
}
inline void ButtonProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ButtonProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ButtonProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ButtonProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ButtonProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ButtonProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tooltip = 3;
inline bool ButtonProto::has_tooltip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ButtonProto::set_has_tooltip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ButtonProto::clear_has_tooltip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ButtonProto::clear_tooltip() {
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    tooltip_->clear();
  }
  clear_has_tooltip();
}
inline const ::std::string& ButtonProto::tooltip() const {
  return *tooltip_;
}
inline void ButtonProto::set_tooltip(const ::std::string& value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
}
inline void ButtonProto::set_tooltip(const char* value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
}
inline void ButtonProto::set_tooltip(const char* value, size_t size) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ButtonProto::mutable_tooltip() {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  return tooltip_;
}
inline ::std::string* ButtonProto::release_tooltip() {
  clear_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tooltip_;
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ButtonProto::set_allocated_tooltip(::std::string* tooltip) {
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    delete tooltip_;
  }
  if (tooltip) {
    set_has_tooltip();
    tooltip_ = tooltip;
  } else {
    clear_has_tooltip();
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string image = 4;
inline bool ButtonProto::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ButtonProto::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ButtonProto::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ButtonProto::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& ButtonProto::image() const {
  return *image_;
}
inline void ButtonProto::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void ButtonProto::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void ButtonProto::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ButtonProto::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* ButtonProto::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ButtonProto::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rec.gui.ButtonProto.HasState state = 5;
inline bool ButtonProto::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ButtonProto::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ButtonProto::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ButtonProto::clear_state() {
  if (state_ != NULL) state_->::rec::gui::ButtonProto_HasState::Clear();
  clear_has_state();
}
inline const ::rec::gui::ButtonProto_HasState& ButtonProto::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::rec::gui::ButtonProto_HasState* ButtonProto::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::rec::gui::ButtonProto_HasState;
  return state_;
}
inline ::rec::gui::ButtonProto_HasState* ButtonProto::release_state() {
  clear_has_state();
  ::rec::gui::ButtonProto_HasState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void ButtonProto::set_allocated_state(::rec::gui::ButtonProto_HasState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
}

// optional .rec.gui.ButtonProto.HasState state_on = 6;
inline bool ButtonProto::has_state_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ButtonProto::set_has_state_on() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ButtonProto::clear_has_state_on() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ButtonProto::clear_state_on() {
  if (state_on_ != NULL) state_on_->::rec::gui::ButtonProto_HasState::Clear();
  clear_has_state_on();
}
inline const ::rec::gui::ButtonProto_HasState& ButtonProto::state_on() const {
  return state_on_ != NULL ? *state_on_ : *default_instance_->state_on_;
}
inline ::rec::gui::ButtonProto_HasState* ButtonProto::mutable_state_on() {
  set_has_state_on();
  if (state_on_ == NULL) state_on_ = new ::rec::gui::ButtonProto_HasState;
  return state_on_;
}
inline ::rec::gui::ButtonProto_HasState* ButtonProto::release_state_on() {
  clear_has_state_on();
  ::rec::gui::ButtonProto_HasState* temp = state_on_;
  state_on_ = NULL;
  return temp;
}
inline void ButtonProto::set_allocated_state_on(::rec::gui::ButtonProto_HasState* state_on) {
  delete state_on_;
  state_on_ = state_on;
  if (state_on) {
    set_has_state_on();
  } else {
    clear_has_state_on();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::ButtonProto_Style>() {
  return ::rec::gui::ButtonProto_Style_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fButton_2eproto__INCLUDED
