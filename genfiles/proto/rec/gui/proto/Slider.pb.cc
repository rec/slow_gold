// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Slider.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/proto/Slider.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* SliderProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SliderProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SliderProto_Style_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SliderProto_TextEntryBoxPosition_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fproto_2fSlider_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/proto/Slider.proto");
  GOOGLE_CHECK(file != NULL);
  SliderProto_descriptor_ = file->message_type(0);
  static const int SliderProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, caption_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, text_entry_box_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, text_entry_box_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, detent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, detent_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, text_suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, text_entry_box_position_),
  };
  SliderProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SliderProto_descriptor_,
      SliderProto::default_instance_,
      SliderProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliderProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SliderProto));
  SliderProto_Style_descriptor_ = SliderProto_descriptor_->enum_type(0);
  SliderProto_TextEntryBoxPosition_descriptor_ = SliderProto_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fproto_2fSlider_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SliderProto_descriptor_, &SliderProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fproto_2fSlider_2eproto() {
  delete SliderProto::default_instance_;
  delete SliderProto_reflection_;
  delete SliderProto::_default_caption_size_;
  delete SliderProto::_default_text_entry_box_width_;
  delete SliderProto::_default_text_entry_box_height_;
}

void protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rec/gui/proto/Slider.proto\022\007rec.gui\"\377\005"
    "\n\013SliderProto\022\017\n\007caption\030\001 \001(\t\022\030\n\014captio"
    "n_size\030\002 \001(\t:\00245\022 \n\024text_entry_box_width"
    "\030\004 \001(\t:\00280\022!\n\025text_entry_box_height\030\005 \001("
    "\t:\00216\022\016\n\006detent\030\006 \001(\t\022\025\n\rdetent_radius\030\007"
    " \001(\t\022\023\n\013text_suffix\030\010 \001(\t\022\017\n\007minimum\030\t \001"
    "(\t\022\017\n\007maximum\030\n \001(\t\022\020\n\010interval\030\013 \001(\t\022)\n"
    "\005style\030\025 \001(\0162\032.rec.gui.SliderProto.Style"
    "\022J\n\027text_entry_box_position\030\026 \001(\0162).rec."
    "gui.SliderProto.TextEntryBoxPosition\"\252\002\n"
    "\005Style\022\024\n\020LinearHorizontal\020\000\022\022\n\016LinearVe"
    "rtical\020\001\022\r\n\tLinearBar\020\002\022\025\n\021LinearBarVert"
    "ical\020\003\022\n\n\006Rotary\020\004\022\030\n\024RotaryHorizontalDr"
    "ag\020\005\022\026\n\022RotaryVerticalDrag\020\006\022 \n\034RotaryHo"
    "rizontalVerticalDrag\020\007\022\021\n\rIncDecButtons\020"
    "\010\022\026\n\022TwoValueHorizontal\020\t\022\024\n\020TwoValueVer"
    "tical\020\n\022\030\n\024ThreeValueHorizontal\020\013\022\026\n\022Thr"
    "eeValueVertical\020\014\"l\n\024TextEntryBoxPositio"
    "n\022\r\n\tNoTextBox\020\000\022\017\n\013TextBoxLeft\020\001\022\020\n\014Tex"
    "tBoxRight\020\002\022\020\n\014TextBoxAbove\020\003\022\020\n\014TextBox"
    "Below\020\004", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/proto/Slider.proto", &protobuf_RegisterTypes);
  SliderProto::_default_caption_size_ =
      new ::std::string("45", 2);
  SliderProto::_default_text_entry_box_width_ =
      new ::std::string("80", 2);
  SliderProto::_default_text_entry_box_height_ =
      new ::std::string("16", 2);
  SliderProto::default_instance_ = new SliderProto();
  SliderProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fproto_2fSlider_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fproto_2fSlider_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fproto_2fSlider_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fproto_2fSlider_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SliderProto_Style_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliderProto_Style_descriptor_;
}
bool SliderProto_Style_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SliderProto_Style SliderProto::LinearHorizontal;
const SliderProto_Style SliderProto::LinearVertical;
const SliderProto_Style SliderProto::LinearBar;
const SliderProto_Style SliderProto::LinearBarVertical;
const SliderProto_Style SliderProto::Rotary;
const SliderProto_Style SliderProto::RotaryHorizontalDrag;
const SliderProto_Style SliderProto::RotaryVerticalDrag;
const SliderProto_Style SliderProto::RotaryHorizontalVerticalDrag;
const SliderProto_Style SliderProto::IncDecButtons;
const SliderProto_Style SliderProto::TwoValueHorizontal;
const SliderProto_Style SliderProto::TwoValueVertical;
const SliderProto_Style SliderProto::ThreeValueHorizontal;
const SliderProto_Style SliderProto::ThreeValueVertical;
const SliderProto_Style SliderProto::Style_MIN;
const SliderProto_Style SliderProto::Style_MAX;
const int SliderProto::Style_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SliderProto_TextEntryBoxPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliderProto_TextEntryBoxPosition_descriptor_;
}
bool SliderProto_TextEntryBoxPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SliderProto_TextEntryBoxPosition SliderProto::NoTextBox;
const SliderProto_TextEntryBoxPosition SliderProto::TextBoxLeft;
const SliderProto_TextEntryBoxPosition SliderProto::TextBoxRight;
const SliderProto_TextEntryBoxPosition SliderProto::TextBoxAbove;
const SliderProto_TextEntryBoxPosition SliderProto::TextBoxBelow;
const SliderProto_TextEntryBoxPosition SliderProto::TextEntryBoxPosition_MIN;
const SliderProto_TextEntryBoxPosition SliderProto::TextEntryBoxPosition_MAX;
const int SliderProto::TextEntryBoxPosition_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SliderProto::_default_caption_size_ = NULL;
::std::string* SliderProto::_default_text_entry_box_width_ = NULL;
::std::string* SliderProto::_default_text_entry_box_height_ = NULL;
#ifndef _MSC_VER
const int SliderProto::kCaptionFieldNumber;
const int SliderProto::kCaptionSizeFieldNumber;
const int SliderProto::kTextEntryBoxWidthFieldNumber;
const int SliderProto::kTextEntryBoxHeightFieldNumber;
const int SliderProto::kDetentFieldNumber;
const int SliderProto::kDetentRadiusFieldNumber;
const int SliderProto::kTextSuffixFieldNumber;
const int SliderProto::kMinimumFieldNumber;
const int SliderProto::kMaximumFieldNumber;
const int SliderProto::kIntervalFieldNumber;
const int SliderProto::kStyleFieldNumber;
const int SliderProto::kTextEntryBoxPositionFieldNumber;
#endif  // !_MSC_VER

SliderProto::SliderProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SliderProto::InitAsDefaultInstance() {
}

SliderProto::SliderProto(const SliderProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SliderProto::SharedCtor() {
  _cached_size_ = 0;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caption_size_ = const_cast< ::std::string*>(_default_caption_size_);
  text_entry_box_width_ = const_cast< ::std::string*>(_default_text_entry_box_width_);
  text_entry_box_height_ = const_cast< ::std::string*>(_default_text_entry_box_height_);
  detent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detent_radius_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minimum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maximum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  text_entry_box_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SliderProto::~SliderProto() {
  SharedDtor();
}

void SliderProto::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (caption_size_ != _default_caption_size_) {
    delete caption_size_;
  }
  if (text_entry_box_width_ != _default_text_entry_box_width_) {
    delete text_entry_box_width_;
  }
  if (text_entry_box_height_ != _default_text_entry_box_height_) {
    delete text_entry_box_height_;
  }
  if (detent_ != &::google::protobuf::internal::kEmptyString) {
    delete detent_;
  }
  if (detent_radius_ != &::google::protobuf::internal::kEmptyString) {
    delete detent_radius_;
  }
  if (text_suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete text_suffix_;
  }
  if (minimum_ != &::google::protobuf::internal::kEmptyString) {
    delete minimum_;
  }
  if (maximum_ != &::google::protobuf::internal::kEmptyString) {
    delete maximum_;
  }
  if (interval_ != &::google::protobuf::internal::kEmptyString) {
    delete interval_;
  }
  if (this != default_instance_) {
  }
}

void SliderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SliderProto_descriptor_;
}

const SliderProto& SliderProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  return *default_instance_;
}

SliderProto* SliderProto::default_instance_ = NULL;

SliderProto* SliderProto::New() const {
  return new SliderProto;
}

void SliderProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
    if (has_caption_size()) {
      if (caption_size_ != _default_caption_size_) {
        caption_size_->assign(*_default_caption_size_);
      }
    }
    if (has_text_entry_box_width()) {
      if (text_entry_box_width_ != _default_text_entry_box_width_) {
        text_entry_box_width_->assign(*_default_text_entry_box_width_);
      }
    }
    if (has_text_entry_box_height()) {
      if (text_entry_box_height_ != _default_text_entry_box_height_) {
        text_entry_box_height_->assign(*_default_text_entry_box_height_);
      }
    }
    if (has_detent()) {
      if (detent_ != &::google::protobuf::internal::kEmptyString) {
        detent_->clear();
      }
    }
    if (has_detent_radius()) {
      if (detent_radius_ != &::google::protobuf::internal::kEmptyString) {
        detent_radius_->clear();
      }
    }
    if (has_text_suffix()) {
      if (text_suffix_ != &::google::protobuf::internal::kEmptyString) {
        text_suffix_->clear();
      }
    }
    if (has_minimum()) {
      if (minimum_ != &::google::protobuf::internal::kEmptyString) {
        minimum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_maximum()) {
      if (maximum_ != &::google::protobuf::internal::kEmptyString) {
        maximum_->clear();
      }
    }
    if (has_interval()) {
      if (interval_ != &::google::protobuf::internal::kEmptyString) {
        interval_->clear();
      }
    }
    style_ = 0;
    text_entry_box_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SliderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caption_size;
        break;
      }

      // optional string caption_size = 2 [default = "45"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caption_size().data(), this->caption_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text_entry_box_width;
        break;
      }

      // optional string text_entry_box_width = 4 [default = "80"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_entry_box_width:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_entry_box_width()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_entry_box_width().data(), this->text_entry_box_width().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text_entry_box_height;
        break;
      }

      // optional string text_entry_box_height = 5 [default = "16"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_entry_box_height:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_entry_box_height()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_entry_box_height().data(), this->text_entry_box_height().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_detent;
        break;
      }

      // optional string detent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detent().data(), this->detent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_detent_radius;
        break;
      }

      // optional string detent_radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detent_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detent_radius()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->detent_radius().data(), this->detent_radius().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text_suffix;
        break;
      }

      // optional string text_suffix = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_suffix().data(), this->text_suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_minimum;
        break;
      }

      // optional string minimum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minimum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minimum().data(), this->minimum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_maximum;
        break;
      }

      // optional string maximum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maximum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maximum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maximum().data(), this->maximum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_interval;
        break;
      }

      // optional string interval = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interval().data(), this->interval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_style;
        break;
      }

      // optional .rec.gui.SliderProto.Style style = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::SliderProto_Style_IsValid(value)) {
            set_style(static_cast< ::rec::gui::SliderProto_Style >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_text_entry_box_position;
        break;
      }

      // optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_entry_box_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::SliderProto_TextEntryBoxPosition_IsValid(value)) {
            set_text_entry_box_position(static_cast< ::rec::gui::SliderProto_TextEntryBoxPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SliderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->caption(), output);
  }

  // optional string caption_size = 2 [default = "45"];
  if (has_caption_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption_size().data(), this->caption_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caption_size(), output);
  }

  // optional string text_entry_box_width = 4 [default = "80"];
  if (has_text_entry_box_width()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_entry_box_width().data(), this->text_entry_box_width().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text_entry_box_width(), output);
  }

  // optional string text_entry_box_height = 5 [default = "16"];
  if (has_text_entry_box_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_entry_box_height().data(), this->text_entry_box_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->text_entry_box_height(), output);
  }

  // optional string detent = 6;
  if (has_detent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detent().data(), this->detent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->detent(), output);
  }

  // optional string detent_radius = 7;
  if (has_detent_radius()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detent_radius().data(), this->detent_radius().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->detent_radius(), output);
  }

  // optional string text_suffix = 8;
  if (has_text_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_suffix().data(), this->text_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text_suffix(), output);
  }

  // optional string minimum = 9;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->minimum(), output);
  }

  // optional string maximum = 10;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->maximum(), output);
  }

  // optional string interval = 11;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interval().data(), this->interval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->interval(), output);
  }

  // optional .rec.gui.SliderProto.Style style = 21;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->style(), output);
  }

  // optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
  if (has_text_entry_box_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->text_entry_box_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SliderProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string caption = 1;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caption(), target);
  }

  // optional string caption_size = 2 [default = "45"];
  if (has_caption_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caption_size().data(), this->caption_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caption_size(), target);
  }

  // optional string text_entry_box_width = 4 [default = "80"];
  if (has_text_entry_box_width()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_entry_box_width().data(), this->text_entry_box_width().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text_entry_box_width(), target);
  }

  // optional string text_entry_box_height = 5 [default = "16"];
  if (has_text_entry_box_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_entry_box_height().data(), this->text_entry_box_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->text_entry_box_height(), target);
  }

  // optional string detent = 6;
  if (has_detent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detent().data(), this->detent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->detent(), target);
  }

  // optional string detent_radius = 7;
  if (has_detent_radius()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->detent_radius().data(), this->detent_radius().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->detent_radius(), target);
  }

  // optional string text_suffix = 8;
  if (has_text_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_suffix().data(), this->text_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text_suffix(), target);
  }

  // optional string minimum = 9;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minimum().data(), this->minimum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->minimum(), target);
  }

  // optional string maximum = 10;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maximum().data(), this->maximum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->maximum(), target);
  }

  // optional string interval = 11;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interval().data(), this->interval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->interval(), target);
  }

  // optional .rec.gui.SliderProto.Style style = 21;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->style(), target);
  }

  // optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
  if (has_text_entry_box_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->text_entry_box_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SliderProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string caption_size = 2 [default = "45"];
    if (has_caption_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption_size());
    }

    // optional string text_entry_box_width = 4 [default = "80"];
    if (has_text_entry_box_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_entry_box_width());
    }

    // optional string text_entry_box_height = 5 [default = "16"];
    if (has_text_entry_box_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_entry_box_height());
    }

    // optional string detent = 6;
    if (has_detent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detent());
    }

    // optional string detent_radius = 7;
    if (has_detent_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detent_radius());
    }

    // optional string text_suffix = 8;
    if (has_text_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_suffix());
    }

    // optional string minimum = 9;
    if (has_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minimum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string maximum = 10;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maximum());
    }

    // optional string interval = 11;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interval());
    }

    // optional .rec.gui.SliderProto.Style style = 21;
    if (has_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
    }

    // optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
    if (has_text_entry_box_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->text_entry_box_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliderProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SliderProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SliderProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SliderProto::MergeFrom(const SliderProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_caption_size()) {
      set_caption_size(from.caption_size());
    }
    if (from.has_text_entry_box_width()) {
      set_text_entry_box_width(from.text_entry_box_width());
    }
    if (from.has_text_entry_box_height()) {
      set_text_entry_box_height(from.text_entry_box_height());
    }
    if (from.has_detent()) {
      set_detent(from.detent());
    }
    if (from.has_detent_radius()) {
      set_detent_radius(from.detent_radius());
    }
    if (from.has_text_suffix()) {
      set_text_suffix(from.text_suffix());
    }
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_text_entry_box_position()) {
      set_text_entry_box_position(from.text_entry_box_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SliderProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliderProto::CopyFrom(const SliderProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliderProto::IsInitialized() const {

  return true;
}

void SliderProto::Swap(SliderProto* other) {
  if (other != this) {
    std::swap(caption_, other->caption_);
    std::swap(caption_size_, other->caption_size_);
    std::swap(text_entry_box_width_, other->text_entry_box_width_);
    std::swap(text_entry_box_height_, other->text_entry_box_height_);
    std::swap(detent_, other->detent_);
    std::swap(detent_radius_, other->detent_radius_);
    std::swap(text_suffix_, other->text_suffix_);
    std::swap(minimum_, other->minimum_);
    std::swap(maximum_, other->maximum_);
    std::swap(interval_, other->interval_);
    std::swap(style_, other->style_);
    std::swap(text_entry_box_position_, other->text_entry_box_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SliderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SliderProto_descriptor_;
  metadata.reflection = SliderProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
