// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Button.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/proto/Button.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* ButtonProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonProto_HasState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonProto_HasState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ButtonProto_Style_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fproto_2fButton_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/proto/Button.proto");
  GOOGLE_CHECK(file != NULL);
  ButtonProto_descriptor_ = file->message_type(0);
  static const int ButtonProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, tooltip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, image_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, state_on_),
  };
  ButtonProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonProto_descriptor_,
      ButtonProto::default_instance_,
      ButtonProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonProto));
  ButtonProto_HasState_descriptor_ = ButtonProto_descriptor_->nested_type(0);
  static const int ButtonProto_HasState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, disabled_),
  };
  ButtonProto_HasState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonProto_HasState_descriptor_,
      ButtonProto_HasState::default_instance_,
      ButtonProto_HasState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonProto_HasState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonProto_HasState));
  ButtonProto_Style_descriptor_ = ButtonProto_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fproto_2fButton_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonProto_descriptor_, &ButtonProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonProto_HasState_descriptor_, &ButtonProto_HasState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fproto_2fButton_2eproto() {
  delete ButtonProto::default_instance_;
  delete ButtonProto_reflection_;
  delete ButtonProto_HasState::default_instance_;
  delete ButtonProto_HasState_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::data::protobuf_AddDesc_rec_2fdata_2fproto_2fAddress_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rec/gui/proto/Button.proto\022\007rec.gui\032\034r"
    "ec/data/proto/Address.proto\032\030rec/gui/pro"
    "to/Font.proto\"\206\003\n\013ButtonProto\022)\n\005style\030\001"
    " \001(\0162\032.rec.gui.ButtonProto.Style\022\014\n\004name"
    "\030\002 \001(\t\022\017\n\007tooltip\030\003 \001(\t\022\022\n\nimage_name\030\004 "
    "\001(\t\022,\n\005state\030\005 \001(\0132\035.rec.gui.ButtonProto"
    ".HasState\022/\n\010state_on\030\006 \001(\0132\035.rec.gui.Bu"
    "ttonProto.HasState\032H\n\010HasState\022\016\n\006normal"
    "\030\001 \001(\010\022\014\n\004over\030\002 \001(\010\022\014\n\004down\030\003 \001(\010\022\020\n\010di"
    "sabled\030\004 \001(\010\"p\n\005Style\022\017\n\013ImageFitted\020\000\022\014"
    "\n\010ImageRaw\020\001\022\027\n\023ImageAboveTextLabel\020\002\022\033\n"
    "\027ImageOnButtonBackground\020\003\022\022\n\016ImageStret"
    "ched\020\004", 486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/proto/Button.proto", &protobuf_RegisterTypes);
  ButtonProto::default_instance_ = new ButtonProto();
  ButtonProto_HasState::default_instance_ = new ButtonProto_HasState();
  ButtonProto::default_instance_->InitAsDefaultInstance();
  ButtonProto_HasState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fproto_2fButton_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fproto_2fButton_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fproto_2fButton_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fproto_2fButton_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ButtonProto_Style_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonProto_Style_descriptor_;
}
bool ButtonProto_Style_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ButtonProto_Style ButtonProto::ImageFitted;
const ButtonProto_Style ButtonProto::ImageRaw;
const ButtonProto_Style ButtonProto::ImageAboveTextLabel;
const ButtonProto_Style ButtonProto::ImageOnButtonBackground;
const ButtonProto_Style ButtonProto::ImageStretched;
const ButtonProto_Style ButtonProto::Style_MIN;
const ButtonProto_Style ButtonProto::Style_MAX;
const int ButtonProto::Style_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ButtonProto_HasState::kNormalFieldNumber;
const int ButtonProto_HasState::kOverFieldNumber;
const int ButtonProto_HasState::kDownFieldNumber;
const int ButtonProto_HasState::kDisabledFieldNumber;
#endif  // !_MSC_VER

ButtonProto_HasState::ButtonProto_HasState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonProto_HasState::InitAsDefaultInstance() {
}

ButtonProto_HasState::ButtonProto_HasState(const ButtonProto_HasState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonProto_HasState::SharedCtor() {
  _cached_size_ = 0;
  normal_ = false;
  over_ = false;
  down_ = false;
  disabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonProto_HasState::~ButtonProto_HasState() {
  SharedDtor();
}

void ButtonProto_HasState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonProto_HasState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonProto_HasState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonProto_HasState_descriptor_;
}

const ButtonProto_HasState& ButtonProto_HasState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  return *default_instance_;
}

ButtonProto_HasState* ButtonProto_HasState::default_instance_ = NULL;

ButtonProto_HasState* ButtonProto_HasState::New() const {
  return new ButtonProto_HasState;
}

void ButtonProto_HasState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normal_ = false;
    over_ = false;
    down_ = false;
    disabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonProto_HasState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normal_)));
          set_has_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_over;
        break;
      }

      // optional bool over = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &over_)));
          set_has_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_down;
        break;
      }

      // optional bool down = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &down_)));
          set_has_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_disabled;
        break;
      }

      // optional bool disabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
          set_has_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ButtonProto_HasState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool normal = 1;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normal(), output);
  }

  // optional bool over = 2;
  if (has_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->over(), output);
  }

  // optional bool down = 3;
  if (has_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->down(), output);
  }

  // optional bool disabled = 4;
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonProto_HasState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool normal = 1;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normal(), target);
  }

  // optional bool over = 2;
  if (has_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->over(), target);
  }

  // optional bool down = 3;
  if (has_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->down(), target);
  }

  // optional bool disabled = 4;
  if (has_disabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonProto_HasState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool normal = 1;
    if (has_normal()) {
      total_size += 1 + 1;
    }

    // optional bool over = 2;
    if (has_over()) {
      total_size += 1 + 1;
    }

    // optional bool down = 3;
    if (has_down()) {
      total_size += 1 + 1;
    }

    // optional bool disabled = 4;
    if (has_disabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonProto_HasState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonProto_HasState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonProto_HasState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonProto_HasState::MergeFrom(const ButtonProto_HasState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normal()) {
      set_normal(from.normal());
    }
    if (from.has_over()) {
      set_over(from.over());
    }
    if (from.has_down()) {
      set_down(from.down());
    }
    if (from.has_disabled()) {
      set_disabled(from.disabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonProto_HasState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonProto_HasState::CopyFrom(const ButtonProto_HasState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonProto_HasState::IsInitialized() const {

  return true;
}

void ButtonProto_HasState::Swap(ButtonProto_HasState* other) {
  if (other != this) {
    std::swap(normal_, other->normal_);
    std::swap(over_, other->over_);
    std::swap(down_, other->down_);
    std::swap(disabled_, other->disabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonProto_HasState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonProto_HasState_descriptor_;
  metadata.reflection = ButtonProto_HasState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ButtonProto::kStyleFieldNumber;
const int ButtonProto::kNameFieldNumber;
const int ButtonProto::kTooltipFieldNumber;
const int ButtonProto::kImageNameFieldNumber;
const int ButtonProto::kStateFieldNumber;
const int ButtonProto::kStateOnFieldNumber;
#endif  // !_MSC_VER

ButtonProto::ButtonProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonProto::InitAsDefaultInstance() {
  state_ = const_cast< ::rec::gui::ButtonProto_HasState*>(&::rec::gui::ButtonProto_HasState::default_instance());
  state_on_ = const_cast< ::rec::gui::ButtonProto_HasState*>(&::rec::gui::ButtonProto_HasState::default_instance());
}

ButtonProto::ButtonProto(const ButtonProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonProto::SharedCtor() {
  _cached_size_ = 0;
  style_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = NULL;
  state_on_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonProto::~ButtonProto() {
  SharedDtor();
}

void ButtonProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    delete tooltip_;
  }
  if (image_name_ != &::google::protobuf::internal::kEmptyString) {
    delete image_name_;
  }
  if (this != default_instance_) {
    delete state_;
    delete state_on_;
  }
}

void ButtonProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonProto_descriptor_;
}

const ButtonProto& ButtonProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  return *default_instance_;
}

ButtonProto* ButtonProto::default_instance_ = NULL;

ButtonProto* ButtonProto::New() const {
  return new ButtonProto;
}

void ButtonProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    style_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tooltip()) {
      if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
        tooltip_->clear();
      }
    }
    if (has_image_name()) {
      if (image_name_ != &::google::protobuf::internal::kEmptyString) {
        image_name_->clear();
      }
    }
    if (has_state()) {
      if (state_ != NULL) state_->::rec::gui::ButtonProto_HasState::Clear();
    }
    if (has_state_on()) {
      if (state_on_ != NULL) state_on_->::rec::gui::ButtonProto_HasState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.ButtonProto.Style style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::ButtonProto_Style_IsValid(value)) {
            set_style(static_cast< ::rec::gui::ButtonProto_Style >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tooltip;
        break;
      }

      // optional string tooltip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tooltip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tooltip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tooltip().data(), this->tooltip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_image_name;
        break;
      }

      // optional string image_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_name().data(), this->image_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_state;
        break;
      }

      // optional .rec.gui.ButtonProto.HasState state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_state_on;
        break;
      }

      // optional .rec.gui.ButtonProto.HasState state_on = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_on()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ButtonProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.ButtonProto.Style style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->style(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string tooltip = 3;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tooltip(), output);
  }

  // optional string image_name = 4;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->image_name(), output);
  }

  // optional .rec.gui.ButtonProto.HasState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->state(), output);
  }

  // optional .rec.gui.ButtonProto.HasState state_on = 6;
  if (has_state_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->state_on(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.ButtonProto.Style style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->style(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tooltip = 3;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tooltip(), target);
  }

  // optional string image_name = 4;
  if (has_image_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_name().data(), this->image_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_name(), target);
  }

  // optional .rec.gui.ButtonProto.HasState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->state(), target);
  }

  // optional .rec.gui.ButtonProto.HasState state_on = 6;
  if (has_state_on()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->state_on(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.ButtonProto.Style style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tooltip = 3;
    if (has_tooltip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tooltip());
    }

    // optional string image_name = 4;
    if (has_image_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional .rec.gui.ButtonProto.HasState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .rec.gui.ButtonProto.HasState state_on = 6;
    if (has_state_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_on());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonProto::MergeFrom(const ButtonProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tooltip()) {
      set_tooltip(from.tooltip());
    }
    if (from.has_image_name()) {
      set_image_name(from.image_name());
    }
    if (from.has_state()) {
      mutable_state()->::rec::gui::ButtonProto_HasState::MergeFrom(from.state());
    }
    if (from.has_state_on()) {
      mutable_state_on()->::rec::gui::ButtonProto_HasState::MergeFrom(from.state_on());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonProto::CopyFrom(const ButtonProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonProto::IsInitialized() const {

  return true;
}

void ButtonProto::Swap(ButtonProto* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(name_, other->name_);
    std::swap(tooltip_, other->tooltip_);
    std::swap(image_name_, other->image_name_);
    std::swap(state_, other->state_);
    std::swap(state_on_, other->state_on_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonProto_descriptor_;
  metadata.reflection = ButtonProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
