// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/LevelMeter.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fLevelMeter_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fLevelMeter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/gui/Orientation.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLevelMeter_2eproto();

class LevelMeterProto;

enum LevelMeterProto_Type {
  LevelMeterProto_Type_LINEAR = 0,
  LevelMeterProto_Type_RMS = 1
};
bool LevelMeterProto_Type_IsValid(int value);
const LevelMeterProto_Type LevelMeterProto_Type_Type_MIN = LevelMeterProto_Type_LINEAR;
const LevelMeterProto_Type LevelMeterProto_Type_Type_MAX = LevelMeterProto_Type_RMS;
const int LevelMeterProto_Type_Type_ARRAYSIZE = LevelMeterProto_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LevelMeterProto_Type_descriptor();
inline const ::std::string& LevelMeterProto_Type_Name(LevelMeterProto_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LevelMeterProto_Type_descriptor(), value);
}
inline bool LevelMeterProto_Type_Parse(
    const ::std::string& name, LevelMeterProto_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LevelMeterProto_Type>(
    LevelMeterProto_Type_descriptor(), name, value);
}
// ===================================================================

class LevelMeterProto : public ::google::protobuf::Message {
 public:
  LevelMeterProto();
  virtual ~LevelMeterProto();

  LevelMeterProto(const LevelMeterProto& from);

  inline LevelMeterProto& operator=(const LevelMeterProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelMeterProto& default_instance();

  void Swap(LevelMeterProto* other);

  // implements Message ----------------------------------------------

  LevelMeterProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelMeterProto& from);
  void MergeFrom(const LevelMeterProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LevelMeterProto_Type Type;
  static const Type LINEAR = LevelMeterProto_Type_LINEAR;
  static const Type RMS = LevelMeterProto_Type_RMS;
  static inline bool Type_IsValid(int value) {
    return LevelMeterProto_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LevelMeterProto_Type_Type_MIN;
  static const Type Type_MAX =
    LevelMeterProto_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LevelMeterProto_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LevelMeterProto_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LevelMeterProto_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LevelMeterProto_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rec.gui.OrientationProto.Orientation orientation = 1;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  inline ::rec::gui::OrientationProto_Orientation orientation() const;
  inline void set_orientation(::rec::gui::OrientationProto_Orientation value);

  // optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::rec::gui::LevelMeterProto_Type type() const;
  inline void set_type(::rec::gui::LevelMeterProto_Type value);

  // optional uint32 margin = 3 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 3;
  inline ::google::protobuf::uint32 margin() const;
  inline void set_margin(::google::protobuf::uint32 value);

  // optional float scale_up_meter = 4 [default = 2];
  inline bool has_scale_up_meter() const;
  inline void clear_scale_up_meter();
  static const int kScaleUpMeterFieldNumber = 4;
  inline float scale_up_meter() const;
  inline void set_scale_up_meter(float value);

  // optional float gap_width = 5 [default = 2];
  inline bool has_gap_width() const;
  inline void clear_gap_width();
  static const int kGapWidthFieldNumber = 5;
  inline float gap_width() const;
  inline void set_gap_width(float value);

  // optional uint32 segment_count = 6 [default = 32];
  inline bool has_segment_count() const;
  inline void clear_segment_count();
  static const int kSegmentCountFieldNumber = 6;
  inline ::google::protobuf::uint32 segment_count() const;
  inline void set_segment_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rec.gui.LevelMeterProto)
 private:
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_scale_up_meter();
  inline void clear_has_scale_up_meter();
  inline void set_has_gap_width();
  inline void clear_has_gap_width();
  inline void set_has_segment_count();
  inline void clear_has_segment_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int orientation_;
  int type_;
  ::google::protobuf::uint32 margin_;
  float scale_up_meter_;
  float gap_width_;
  ::google::protobuf::uint32 segment_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLevelMeter_2eproto();

  void InitAsDefaultInstance();
  static LevelMeterProto* default_instance_;
};
// ===================================================================


// ===================================================================

// LevelMeterProto

// optional .rec.gui.OrientationProto.Orientation orientation = 1;
inline bool LevelMeterProto::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelMeterProto::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelMeterProto::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelMeterProto::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::rec::gui::OrientationProto_Orientation LevelMeterProto::orientation() const {
  return static_cast< ::rec::gui::OrientationProto_Orientation >(orientation_);
}
inline void LevelMeterProto::set_orientation(::rec::gui::OrientationProto_Orientation value) {
  assert(::rec::gui::OrientationProto_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
inline bool LevelMeterProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelMeterProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelMeterProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelMeterProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::rec::gui::LevelMeterProto_Type LevelMeterProto::type() const {
  return static_cast< ::rec::gui::LevelMeterProto_Type >(type_);
}
inline void LevelMeterProto::set_type(::rec::gui::LevelMeterProto_Type value) {
  assert(::rec::gui::LevelMeterProto_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 margin = 3 [default = 2];
inline bool LevelMeterProto::has_margin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelMeterProto::set_has_margin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelMeterProto::clear_has_margin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelMeterProto::clear_margin() {
  margin_ = 2u;
  clear_has_margin();
}
inline ::google::protobuf::uint32 LevelMeterProto::margin() const {
  return margin_;
}
inline void LevelMeterProto::set_margin(::google::protobuf::uint32 value) {
  set_has_margin();
  margin_ = value;
}

// optional float scale_up_meter = 4 [default = 2];
inline bool LevelMeterProto::has_scale_up_meter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelMeterProto::set_has_scale_up_meter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelMeterProto::clear_has_scale_up_meter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelMeterProto::clear_scale_up_meter() {
  scale_up_meter_ = 2;
  clear_has_scale_up_meter();
}
inline float LevelMeterProto::scale_up_meter() const {
  return scale_up_meter_;
}
inline void LevelMeterProto::set_scale_up_meter(float value) {
  set_has_scale_up_meter();
  scale_up_meter_ = value;
}

// optional float gap_width = 5 [default = 2];
inline bool LevelMeterProto::has_gap_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelMeterProto::set_has_gap_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelMeterProto::clear_has_gap_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelMeterProto::clear_gap_width() {
  gap_width_ = 2;
  clear_has_gap_width();
}
inline float LevelMeterProto::gap_width() const {
  return gap_width_;
}
inline void LevelMeterProto::set_gap_width(float value) {
  set_has_gap_width();
  gap_width_ = value;
}

// optional uint32 segment_count = 6 [default = 32];
inline bool LevelMeterProto::has_segment_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelMeterProto::set_has_segment_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelMeterProto::clear_has_segment_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelMeterProto::clear_segment_count() {
  segment_count_ = 32u;
  clear_has_segment_count();
}
inline ::google::protobuf::uint32 LevelMeterProto::segment_count() const {
  return segment_count_;
}
inline void LevelMeterProto::set_segment_count(::google::protobuf::uint32 value) {
  set_has_segment_count();
  segment_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::LevelMeterProto_Type>() {
  return ::rec::gui::LevelMeterProto_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fLevelMeter_2eproto__INCLUDED
