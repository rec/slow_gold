// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Layout.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

class LayoutProto;

enum LayoutProto_Orientatation {
  LayoutProto_Orientatation_HORIZONTAL = 0,
  LayoutProto_Orientatation_VERTICAL = 1
};
bool LayoutProto_Orientatation_IsValid(int value);
const LayoutProto_Orientatation LayoutProto_Orientatation_Orientatation_MIN = LayoutProto_Orientatation_HORIZONTAL;
const LayoutProto_Orientatation LayoutProto_Orientatation_Orientatation_MAX = LayoutProto_Orientatation_VERTICAL;
const int LayoutProto_Orientatation_Orientatation_ARRAYSIZE = LayoutProto_Orientatation_Orientatation_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayoutProto_Orientatation_descriptor();
inline const ::std::string& LayoutProto_Orientatation_Name(LayoutProto_Orientatation value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayoutProto_Orientatation_descriptor(), value);
}
inline bool LayoutProto_Orientatation_Parse(
    const ::std::string& name, LayoutProto_Orientatation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayoutProto_Orientatation>(
    LayoutProto_Orientatation_descriptor(), name, value);
}
// ===================================================================

class LayoutProto : public ::google::protobuf::Message {
 public:
  LayoutProto();
  virtual ~LayoutProto();

  LayoutProto(const LayoutProto& from);

  inline LayoutProto& operator=(const LayoutProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutProto& default_instance();

  void Swap(LayoutProto* other);

  // implements Message ----------------------------------------------

  LayoutProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayoutProto& from);
  void MergeFrom(const LayoutProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayoutProto_Orientatation Orientatation;
  static const Orientatation HORIZONTAL = LayoutProto_Orientatation_HORIZONTAL;
  static const Orientatation VERTICAL = LayoutProto_Orientatation_VERTICAL;
  static inline bool Orientatation_IsValid(int value) {
    return LayoutProto_Orientatation_IsValid(value);
  }
  static const Orientatation Orientatation_MIN =
    LayoutProto_Orientatation_Orientatation_MIN;
  static const Orientatation Orientatation_MAX =
    LayoutProto_Orientatation_Orientatation_MAX;
  static const int Orientatation_ARRAYSIZE =
    LayoutProto_Orientatation_Orientatation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientatation_descriptor() {
    return LayoutProto_Orientatation_descriptor();
  }
  static inline const ::std::string& Orientatation_Name(Orientatation value) {
    return LayoutProto_Orientatation_Name(value);
  }
  static inline bool Orientatation_Parse(const ::std::string& name,
      Orientatation* value) {
    return LayoutProto_Orientatation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rec.gui.LayoutProto.Orientatation orientation = 1;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 1;
  inline ::rec::gui::LayoutProto_Orientatation orientation() const;
  inline void set_orientation(::rec::gui::LayoutProto_Orientatation value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool resize_other_dimension = 3 [default = true];
  inline bool has_resize_other_dimension() const;
  inline void clear_resize_other_dimension();
  static const int kResizeOtherDimensionFieldNumber = 3;
  inline bool resize_other_dimension() const;
  inline void set_resize_other_dimension(bool value);

  // optional bool is_main = 4;
  inline bool has_is_main() const;
  inline void clear_is_main();
  static const int kIsMainFieldNumber = 4;
  inline bool is_main() const;
  inline void set_is_main(bool value);

  // @@protoc_insertion_point(class_scope:rec.gui.LayoutProto)
 private:
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_resize_other_dimension();
  inline void clear_has_resize_other_dimension();
  inline void set_has_is_main();
  inline void clear_has_is_main();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int orientation_;
  bool resize_other_dimension_;
  bool is_main_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static LayoutProto* default_instance_;
};
// ===================================================================


// ===================================================================

// LayoutProto

// optional .rec.gui.LayoutProto.Orientatation orientation = 1;
inline bool LayoutProto::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayoutProto::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayoutProto::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayoutProto::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::rec::gui::LayoutProto_Orientatation LayoutProto::orientation() const {
  return static_cast< ::rec::gui::LayoutProto_Orientatation >(orientation_);
}
inline void LayoutProto::set_orientation(::rec::gui::LayoutProto_Orientatation value) {
  assert(::rec::gui::LayoutProto_Orientatation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional string name = 2;
inline bool LayoutProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayoutProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayoutProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayoutProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayoutProto::name() const {
  return *name_;
}
inline void LayoutProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayoutProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayoutProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayoutProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayoutProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayoutProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool resize_other_dimension = 3 [default = true];
inline bool LayoutProto::has_resize_other_dimension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayoutProto::set_has_resize_other_dimension() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayoutProto::clear_has_resize_other_dimension() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayoutProto::clear_resize_other_dimension() {
  resize_other_dimension_ = true;
  clear_has_resize_other_dimension();
}
inline bool LayoutProto::resize_other_dimension() const {
  return resize_other_dimension_;
}
inline void LayoutProto::set_resize_other_dimension(bool value) {
  set_has_resize_other_dimension();
  resize_other_dimension_ = value;
}

// optional bool is_main = 4;
inline bool LayoutProto::has_is_main() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayoutProto::set_has_is_main() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayoutProto::clear_has_is_main() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayoutProto::clear_is_main() {
  is_main_ = false;
  clear_has_is_main();
}
inline bool LayoutProto::is_main() const {
  return is_main_;
}
inline void LayoutProto::set_is_main(bool value) {
  set_has_is_main();
  is_main_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::LayoutProto_Orientatation>() {
  return ::rec::gui::LayoutProto_Orientatation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
