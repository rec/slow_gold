// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Layout.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/data/proto/Address.pb.h"
#include "rec/gui/Orientation.pb.h"
#include "rec/gui/proto/Component.pb.h"
#include "rec/gui/proto/Size.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

class Dimensions;
class Layout;
class Layouts;

// ===================================================================

class Dimensions : public ::google::protobuf::Message {
 public:
  Dimensions();
  virtual ~Dimensions();

  Dimensions(const Dimensions& from);

  inline Dimensions& operator=(const Dimensions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dimensions& default_instance();

  void Swap(Dimensions* other);

  // implements Message ----------------------------------------------

  Dimensions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dimensions& from);
  void MergeFrom(const Dimensions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline const ::std::string& width() const;
  inline void set_width(const ::std::string& value);
  inline void set_width(const char* value);
  inline void set_width(const char* value, size_t size);
  inline ::std::string* mutable_width();
  inline ::std::string* release_width();
  inline void set_allocated_width(::std::string* width);

  // optional string height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline const ::std::string& height() const;
  inline void set_height(const ::std::string& value);
  inline void set_height(const char* value);
  inline void set_height(const char* value, size_t size);
  inline ::std::string* mutable_height();
  inline ::std::string* release_height();
  inline void set_allocated_height(::std::string* height);

  // @@protoc_insertion_point(class_scope:rec.gui.Dimensions)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* width_;
  ::std::string* height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static Dimensions* default_instance_;
};
// -------------------------------------------------------------------

class Layout : public ::google::protobuf::Message {
 public:
  Layout();
  virtual ~Layout();

  Layout(const Layout& from);

  inline Layout& operator=(const Layout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layout& default_instance();

  void Swap(Layout* other);

  // implements Message ----------------------------------------------

  Layout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layout& from);
  void MergeFrom(const Layout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .rec.gui.OrientationProto.Orientation orientation = 2;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  inline ::rec::gui::OrientationProto_Orientation orientation() const;
  inline void set_orientation(::rec::gui::OrientationProto_Orientation value);

  // optional bool resize_other_dimension = 3 [default = true];
  inline bool has_resize_other_dimension() const;
  inline void clear_resize_other_dimension();
  static const int kResizeOtherDimensionFieldNumber = 3;
  inline bool resize_other_dimension() const;
  inline void set_resize_other_dimension(bool value);

  // optional bool is_main = 4;
  inline bool has_is_main() const;
  inline void clear_is_main();
  static const int kIsMainFieldNumber = 4;
  inline bool is_main() const;
  inline void set_is_main(bool value);

  // optional bool is_opaque = 5;
  inline bool has_is_opaque() const;
  inline void clear_is_opaque();
  static const int kIsOpaqueFieldNumber = 5;
  inline bool is_opaque() const;
  inline void set_is_opaque(bool value);

  // optional bool has_padding = 6;
  inline bool has_has_padding() const;
  inline void clear_has_padding();
  static const int kHasPaddingFieldNumber = 6;
  inline bool has_padding() const;
  inline void set_has_padding(bool value);

  // optional .rec.gui.Size default_size = 7;
  inline bool has_default_size() const;
  inline void clear_default_size();
  static const int kDefaultSizeFieldNumber = 7;
  inline const ::rec::gui::Size& default_size() const;
  inline ::rec::gui::Size* mutable_default_size();
  inline ::rec::gui::Size* release_default_size();
  inline void set_allocated_default_size(::rec::gui::Size* default_size);

  // optional .rec.gui.Dimensions dimensions = 8;
  inline bool has_dimensions() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 8;
  inline const ::rec::gui::Dimensions& dimensions() const;
  inline ::rec::gui::Dimensions* mutable_dimensions();
  inline ::rec::gui::Dimensions* release_dimensions();
  inline void set_allocated_dimensions(::rec::gui::Dimensions* dimensions);

  // optional .rec.gui.ComponentProto container = 9;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 9;
  inline const ::rec::gui::ComponentProto& container() const;
  inline ::rec::gui::ComponentProto* mutable_container();
  inline ::rec::gui::ComponentProto* release_container();
  inline void set_allocated_container(::rec::gui::ComponentProto* container);

  // repeated .rec.gui.ComponentProto component = 10;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 10;
  inline const ::rec::gui::ComponentProto& component(int index) const;
  inline ::rec::gui::ComponentProto* mutable_component(int index);
  inline ::rec::gui::ComponentProto* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::ComponentProto >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::ComponentProto >*
      mutable_component();

  // @@protoc_insertion_point(class_scope:rec.gui.Layout)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_resize_other_dimension();
  inline void clear_has_resize_other_dimension();
  inline void set_has_is_main();
  inline void clear_has_is_main();
  inline void set_has_is_opaque();
  inline void clear_has_is_opaque();
  inline void set_has_has_padding();
  inline void clear_has_has_padding();
  inline void set_has_default_size();
  inline void clear_has_default_size();
  inline void set_has_dimensions();
  inline void clear_has_dimensions();
  inline void set_has_container();
  inline void clear_has_container();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int orientation_;
  bool resize_other_dimension_;
  bool is_main_;
  bool is_opaque_;
  bool has_padding_;
  ::rec::gui::Size* default_size_;
  ::rec::gui::Dimensions* dimensions_;
  ::rec::gui::ComponentProto* container_;
  ::google::protobuf::RepeatedPtrField< ::rec::gui::ComponentProto > component_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static Layout* default_instance_;
};
// -------------------------------------------------------------------

class Layouts : public ::google::protobuf::Message {
 public:
  Layouts();
  virtual ~Layouts();

  Layouts(const Layouts& from);

  inline Layouts& operator=(const Layouts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layouts& default_instance();

  void Swap(Layouts* other);

  // implements Message ----------------------------------------------

  Layouts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layouts& from);
  void MergeFrom(const Layouts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.gui.Layout layout = 1;
  inline int layout_size() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 1;
  inline const ::rec::gui::Layout& layout(int index) const;
  inline ::rec::gui::Layout* mutable_layout(int index);
  inline ::rec::gui::Layout* add_layout();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >&
      layout() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >*
      mutable_layout();

  // @@protoc_insertion_point(class_scope:rec.gui.Layouts)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout > layout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static Layouts* default_instance_;
};
// ===================================================================


// ===================================================================

// Dimensions

// optional string width = 1;
inline bool Dimensions::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dimensions::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dimensions::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dimensions::clear_width() {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    width_->clear();
  }
  clear_has_width();
}
inline const ::std::string& Dimensions::width() const {
  return *width_;
}
inline void Dimensions::set_width(const ::std::string& value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void Dimensions::set_width(const char* value) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(value);
}
inline void Dimensions::set_width(const char* value, size_t size) {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dimensions::mutable_width() {
  set_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    width_ = new ::std::string;
  }
  return width_;
}
inline ::std::string* Dimensions::release_width() {
  clear_has_width();
  if (width_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_;
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Dimensions::set_allocated_width(::std::string* width) {
  if (width_ != &::google::protobuf::internal::kEmptyString) {
    delete width_;
  }
  if (width) {
    set_has_width();
    width_ = width;
  } else {
    clear_has_width();
    width_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string height = 2;
inline bool Dimensions::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dimensions::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dimensions::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dimensions::clear_height() {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    height_->clear();
  }
  clear_has_height();
}
inline const ::std::string& Dimensions::height() const {
  return *height_;
}
inline void Dimensions::set_height(const ::std::string& value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void Dimensions::set_height(const char* value) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(value);
}
inline void Dimensions::set_height(const char* value, size_t size) {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Dimensions::mutable_height() {
  set_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    height_ = new ::std::string;
  }
  return height_;
}
inline ::std::string* Dimensions::release_height() {
  clear_has_height();
  if (height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = height_;
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Dimensions::set_allocated_height(::std::string* height) {
  if (height_ != &::google::protobuf::internal::kEmptyString) {
    delete height_;
  }
  if (height) {
    set_has_height();
    height_ = height;
  } else {
    clear_has_height();
    height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Layout

// optional string name = 1;
inline bool Layout::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Layout::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Layout::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Layout::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Layout::name() const {
  return *name_;
}
inline void Layout::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Layout::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Layout::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Layout::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Layout::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Layout::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rec.gui.OrientationProto.Orientation orientation = 2;
inline bool Layout::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Layout::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Layout::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Layout::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::rec::gui::OrientationProto_Orientation Layout::orientation() const {
  return static_cast< ::rec::gui::OrientationProto_Orientation >(orientation_);
}
inline void Layout::set_orientation(::rec::gui::OrientationProto_Orientation value) {
  assert(::rec::gui::OrientationProto_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional bool resize_other_dimension = 3 [default = true];
inline bool Layout::has_resize_other_dimension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Layout::set_has_resize_other_dimension() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Layout::clear_has_resize_other_dimension() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Layout::clear_resize_other_dimension() {
  resize_other_dimension_ = true;
  clear_has_resize_other_dimension();
}
inline bool Layout::resize_other_dimension() const {
  return resize_other_dimension_;
}
inline void Layout::set_resize_other_dimension(bool value) {
  set_has_resize_other_dimension();
  resize_other_dimension_ = value;
}

// optional bool is_main = 4;
inline bool Layout::has_is_main() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Layout::set_has_is_main() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Layout::clear_has_is_main() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Layout::clear_is_main() {
  is_main_ = false;
  clear_has_is_main();
}
inline bool Layout::is_main() const {
  return is_main_;
}
inline void Layout::set_is_main(bool value) {
  set_has_is_main();
  is_main_ = value;
}

// optional bool is_opaque = 5;
inline bool Layout::has_is_opaque() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Layout::set_has_is_opaque() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Layout::clear_has_is_opaque() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Layout::clear_is_opaque() {
  is_opaque_ = false;
  clear_has_is_opaque();
}
inline bool Layout::is_opaque() const {
  return is_opaque_;
}
inline void Layout::set_is_opaque(bool value) {
  set_has_is_opaque();
  is_opaque_ = value;
}

// optional bool has_padding = 6;
inline bool Layout::has_has_padding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Layout::set_has_has_padding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Layout::clear_has_has_padding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Layout::clear_has_padding() {
  has_padding_ = false;
  clear_has_has_padding();
}
inline bool Layout::has_padding() const {
  return has_padding_;
}
inline void Layout::set_has_padding(bool value) {
  set_has_has_padding();
  has_padding_ = value;
}

// optional .rec.gui.Size default_size = 7;
inline bool Layout::has_default_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Layout::set_has_default_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Layout::clear_has_default_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Layout::clear_default_size() {
  if (default_size_ != NULL) default_size_->::rec::gui::Size::Clear();
  clear_has_default_size();
}
inline const ::rec::gui::Size& Layout::default_size() const {
  return default_size_ != NULL ? *default_size_ : *default_instance_->default_size_;
}
inline ::rec::gui::Size* Layout::mutable_default_size() {
  set_has_default_size();
  if (default_size_ == NULL) default_size_ = new ::rec::gui::Size;
  return default_size_;
}
inline ::rec::gui::Size* Layout::release_default_size() {
  clear_has_default_size();
  ::rec::gui::Size* temp = default_size_;
  default_size_ = NULL;
  return temp;
}
inline void Layout::set_allocated_default_size(::rec::gui::Size* default_size) {
  delete default_size_;
  default_size_ = default_size;
  if (default_size) {
    set_has_default_size();
  } else {
    clear_has_default_size();
  }
}

// optional .rec.gui.Dimensions dimensions = 8;
inline bool Layout::has_dimensions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Layout::set_has_dimensions() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Layout::clear_has_dimensions() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Layout::clear_dimensions() {
  if (dimensions_ != NULL) dimensions_->::rec::gui::Dimensions::Clear();
  clear_has_dimensions();
}
inline const ::rec::gui::Dimensions& Layout::dimensions() const {
  return dimensions_ != NULL ? *dimensions_ : *default_instance_->dimensions_;
}
inline ::rec::gui::Dimensions* Layout::mutable_dimensions() {
  set_has_dimensions();
  if (dimensions_ == NULL) dimensions_ = new ::rec::gui::Dimensions;
  return dimensions_;
}
inline ::rec::gui::Dimensions* Layout::release_dimensions() {
  clear_has_dimensions();
  ::rec::gui::Dimensions* temp = dimensions_;
  dimensions_ = NULL;
  return temp;
}
inline void Layout::set_allocated_dimensions(::rec::gui::Dimensions* dimensions) {
  delete dimensions_;
  dimensions_ = dimensions;
  if (dimensions) {
    set_has_dimensions();
  } else {
    clear_has_dimensions();
  }
}

// optional .rec.gui.ComponentProto container = 9;
inline bool Layout::has_container() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Layout::set_has_container() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Layout::clear_has_container() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Layout::clear_container() {
  if (container_ != NULL) container_->::rec::gui::ComponentProto::Clear();
  clear_has_container();
}
inline const ::rec::gui::ComponentProto& Layout::container() const {
  return container_ != NULL ? *container_ : *default_instance_->container_;
}
inline ::rec::gui::ComponentProto* Layout::mutable_container() {
  set_has_container();
  if (container_ == NULL) container_ = new ::rec::gui::ComponentProto;
  return container_;
}
inline ::rec::gui::ComponentProto* Layout::release_container() {
  clear_has_container();
  ::rec::gui::ComponentProto* temp = container_;
  container_ = NULL;
  return temp;
}
inline void Layout::set_allocated_container(::rec::gui::ComponentProto* container) {
  delete container_;
  container_ = container;
  if (container) {
    set_has_container();
  } else {
    clear_has_container();
  }
}

// repeated .rec.gui.ComponentProto component = 10;
inline int Layout::component_size() const {
  return component_.size();
}
inline void Layout::clear_component() {
  component_.Clear();
}
inline const ::rec::gui::ComponentProto& Layout::component(int index) const {
  return component_.Get(index);
}
inline ::rec::gui::ComponentProto* Layout::mutable_component(int index) {
  return component_.Mutable(index);
}
inline ::rec::gui::ComponentProto* Layout::add_component() {
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::ComponentProto >&
Layout::component() const {
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::ComponentProto >*
Layout::mutable_component() {
  return &component_;
}

// -------------------------------------------------------------------

// Layouts

// repeated .rec.gui.Layout layout = 1;
inline int Layouts::layout_size() const {
  return layout_.size();
}
inline void Layouts::clear_layout() {
  layout_.Clear();
}
inline const ::rec::gui::Layout& Layouts::layout(int index) const {
  return layout_.Get(index);
}
inline ::rec::gui::Layout* Layouts::mutable_layout(int index) {
  return layout_.Mutable(index);
}
inline ::rec::gui::Layout* Layouts::add_layout() {
  return layout_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >&
Layouts::layout() const {
  return layout_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >*
Layouts::mutable_layout() {
  return &layout_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
