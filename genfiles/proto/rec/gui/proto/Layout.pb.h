// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Layout.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/gui/proto/Resizer.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

class LayoutEntry;
class Layout;
class Layouts;

enum Layout_Orientation {
  Layout_Orientation_HORIZONTAL = 0,
  Layout_Orientation_VERTICAL = 1
};
bool Layout_Orientation_IsValid(int value);
const Layout_Orientation Layout_Orientation_Orientation_MIN = Layout_Orientation_HORIZONTAL;
const Layout_Orientation Layout_Orientation_Orientation_MAX = Layout_Orientation_VERTICAL;
const int Layout_Orientation_Orientation_ARRAYSIZE = Layout_Orientation_Orientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Layout_Orientation_descriptor();
inline const ::std::string& Layout_Orientation_Name(Layout_Orientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Layout_Orientation_descriptor(), value);
}
inline bool Layout_Orientation_Parse(
    const ::std::string& name, Layout_Orientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Layout_Orientation>(
    Layout_Orientation_descriptor(), name, value);
}
// ===================================================================

class LayoutEntry : public ::google::protobuf::Message {
 public:
  LayoutEntry();
  virtual ~LayoutEntry();

  LayoutEntry(const LayoutEntry& from);

  inline LayoutEntry& operator=(const LayoutEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayoutEntry& default_instance();

  void Swap(LayoutEntry* other);

  // implements Message ----------------------------------------------

  LayoutEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayoutEntry& from);
  void MergeFrom(const LayoutEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double preferred = 2;
  inline bool has_preferred() const;
  inline void clear_preferred();
  static const int kPreferredFieldNumber = 2;
  inline double preferred() const;
  inline void set_preferred(double value);

  // optional double min = 3;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline double min() const;
  inline void set_min(double value);

  // optional double max = 4;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline double max() const;
  inline void set_max(double value);

  // optional .rec.gui.ResizerProto resizer = 5;
  inline bool has_resizer() const;
  inline void clear_resizer();
  static const int kResizerFieldNumber = 5;
  inline const ::rec::gui::ResizerProto& resizer() const;
  inline ::rec::gui::ResizerProto* mutable_resizer();
  inline ::rec::gui::ResizerProto* release_resizer();
  inline void set_allocated_resizer(::rec::gui::ResizerProto* resizer);

  // @@protoc_insertion_point(class_scope:rec.gui.LayoutEntry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_preferred();
  inline void clear_has_preferred();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_resizer();
  inline void clear_has_resizer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double preferred_;
  double min_;
  double max_;
  ::rec::gui::ResizerProto* resizer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static LayoutEntry* default_instance_;
};
// -------------------------------------------------------------------

class Layout : public ::google::protobuf::Message {
 public:
  Layout();
  virtual ~Layout();

  Layout(const Layout& from);

  inline Layout& operator=(const Layout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layout& default_instance();

  void Swap(Layout* other);

  // implements Message ----------------------------------------------

  Layout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layout& from);
  void MergeFrom(const Layout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Layout_Orientation Orientation;
  static const Orientation HORIZONTAL = Layout_Orientation_HORIZONTAL;
  static const Orientation VERTICAL = Layout_Orientation_VERTICAL;
  static inline bool Orientation_IsValid(int value) {
    return Layout_Orientation_IsValid(value);
  }
  static const Orientation Orientation_MIN =
    Layout_Orientation_Orientation_MIN;
  static const Orientation Orientation_MAX =
    Layout_Orientation_Orientation_MAX;
  static const int Orientation_ARRAYSIZE =
    Layout_Orientation_Orientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Orientation_descriptor() {
    return Layout_Orientation_descriptor();
  }
  static inline const ::std::string& Orientation_Name(Orientation value) {
    return Layout_Orientation_Name(value);
  }
  static inline bool Orientation_Parse(const ::std::string& name,
      Orientation* value) {
    return Layout_Orientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .rec.gui.LayoutEntry entry = 2;
  inline int entry_size() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 2;
  inline const ::rec::gui::LayoutEntry& entry(int index) const;
  inline ::rec::gui::LayoutEntry* mutable_entry(int index);
  inline ::rec::gui::LayoutEntry* add_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::LayoutEntry >&
      entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::LayoutEntry >*
      mutable_entry();

  // optional .rec.gui.Layout.Orientation orientation = 3;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  inline ::rec::gui::Layout_Orientation orientation() const;
  inline void set_orientation(::rec::gui::Layout_Orientation value);

  // optional bool resize_other_dimension = 4 [default = true];
  inline bool has_resize_other_dimension() const;
  inline void clear_resize_other_dimension();
  static const int kResizeOtherDimensionFieldNumber = 4;
  inline bool resize_other_dimension() const;
  inline void set_resize_other_dimension(bool value);

  // optional bool is_main = 5;
  inline bool has_is_main() const;
  inline void clear_is_main();
  static const int kIsMainFieldNumber = 5;
  inline bool is_main() const;
  inline void set_is_main(bool value);

  // optional bool padding = 6;
  inline bool has_padding() const;
  inline void clear_padding();
  static const int kPaddingFieldNumber = 6;
  inline bool padding() const;
  inline void set_padding(bool value);

  // @@protoc_insertion_point(class_scope:rec.gui.Layout)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_resize_other_dimension();
  inline void clear_has_resize_other_dimension();
  inline void set_has_is_main();
  inline void clear_has_is_main();
  inline void set_has_padding();
  inline void clear_has_padding();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::rec::gui::LayoutEntry > entry_;
  int orientation_;
  bool resize_other_dimension_;
  bool is_main_;
  bool padding_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static Layout* default_instance_;
};
// -------------------------------------------------------------------

class Layouts : public ::google::protobuf::Message {
 public:
  Layouts();
  virtual ~Layouts();

  Layouts(const Layouts& from);

  inline Layouts& operator=(const Layouts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layouts& default_instance();

  void Swap(Layouts* other);

  // implements Message ----------------------------------------------

  Layouts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layouts& from);
  void MergeFrom(const Layouts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.gui.Layout layout = 1;
  inline int layout_size() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 1;
  inline const ::rec::gui::Layout& layout(int index) const;
  inline ::rec::gui::Layout* mutable_layout(int index);
  inline ::rec::gui::Layout* add_layout();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >&
      layout() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >*
      mutable_layout();

  // @@protoc_insertion_point(class_scope:rec.gui.Layouts)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout > layout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLayout_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLayout_2eproto();

  void InitAsDefaultInstance();
  static Layouts* default_instance_;
};
// ===================================================================


// ===================================================================

// LayoutEntry

// optional string name = 1;
inline bool LayoutEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayoutEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayoutEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayoutEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayoutEntry::name() const {
  return *name_;
}
inline void LayoutEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayoutEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayoutEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayoutEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayoutEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayoutEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double preferred = 2;
inline bool LayoutEntry::has_preferred() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayoutEntry::set_has_preferred() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayoutEntry::clear_has_preferred() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayoutEntry::clear_preferred() {
  preferred_ = 0;
  clear_has_preferred();
}
inline double LayoutEntry::preferred() const {
  return preferred_;
}
inline void LayoutEntry::set_preferred(double value) {
  set_has_preferred();
  preferred_ = value;
}

// optional double min = 3;
inline bool LayoutEntry::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayoutEntry::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayoutEntry::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayoutEntry::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double LayoutEntry::min() const {
  return min_;
}
inline void LayoutEntry::set_min(double value) {
  set_has_min();
  min_ = value;
}

// optional double max = 4;
inline bool LayoutEntry::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayoutEntry::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayoutEntry::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayoutEntry::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double LayoutEntry::max() const {
  return max_;
}
inline void LayoutEntry::set_max(double value) {
  set_has_max();
  max_ = value;
}

// optional .rec.gui.ResizerProto resizer = 5;
inline bool LayoutEntry::has_resizer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayoutEntry::set_has_resizer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayoutEntry::clear_has_resizer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayoutEntry::clear_resizer() {
  if (resizer_ != NULL) resizer_->::rec::gui::ResizerProto::Clear();
  clear_has_resizer();
}
inline const ::rec::gui::ResizerProto& LayoutEntry::resizer() const {
  return resizer_ != NULL ? *resizer_ : *default_instance_->resizer_;
}
inline ::rec::gui::ResizerProto* LayoutEntry::mutable_resizer() {
  set_has_resizer();
  if (resizer_ == NULL) resizer_ = new ::rec::gui::ResizerProto;
  return resizer_;
}
inline ::rec::gui::ResizerProto* LayoutEntry::release_resizer() {
  clear_has_resizer();
  ::rec::gui::ResizerProto* temp = resizer_;
  resizer_ = NULL;
  return temp;
}
inline void LayoutEntry::set_allocated_resizer(::rec::gui::ResizerProto* resizer) {
  delete resizer_;
  resizer_ = resizer;
  if (resizer) {
    set_has_resizer();
  } else {
    clear_has_resizer();
  }
}

// -------------------------------------------------------------------

// Layout

// optional string name = 1;
inline bool Layout::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Layout::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Layout::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Layout::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Layout::name() const {
  return *name_;
}
inline void Layout::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Layout::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Layout::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Layout::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Layout::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Layout::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .rec.gui.LayoutEntry entry = 2;
inline int Layout::entry_size() const {
  return entry_.size();
}
inline void Layout::clear_entry() {
  entry_.Clear();
}
inline const ::rec::gui::LayoutEntry& Layout::entry(int index) const {
  return entry_.Get(index);
}
inline ::rec::gui::LayoutEntry* Layout::mutable_entry(int index) {
  return entry_.Mutable(index);
}
inline ::rec::gui::LayoutEntry* Layout::add_entry() {
  return entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::LayoutEntry >&
Layout::entry() const {
  return entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::LayoutEntry >*
Layout::mutable_entry() {
  return &entry_;
}

// optional .rec.gui.Layout.Orientation orientation = 3;
inline bool Layout::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Layout::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Layout::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Layout::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::rec::gui::Layout_Orientation Layout::orientation() const {
  return static_cast< ::rec::gui::Layout_Orientation >(orientation_);
}
inline void Layout::set_orientation(::rec::gui::Layout_Orientation value) {
  assert(::rec::gui::Layout_Orientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
}

// optional bool resize_other_dimension = 4 [default = true];
inline bool Layout::has_resize_other_dimension() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Layout::set_has_resize_other_dimension() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Layout::clear_has_resize_other_dimension() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Layout::clear_resize_other_dimension() {
  resize_other_dimension_ = true;
  clear_has_resize_other_dimension();
}
inline bool Layout::resize_other_dimension() const {
  return resize_other_dimension_;
}
inline void Layout::set_resize_other_dimension(bool value) {
  set_has_resize_other_dimension();
  resize_other_dimension_ = value;
}

// optional bool is_main = 5;
inline bool Layout::has_is_main() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Layout::set_has_is_main() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Layout::clear_has_is_main() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Layout::clear_is_main() {
  is_main_ = false;
  clear_has_is_main();
}
inline bool Layout::is_main() const {
  return is_main_;
}
inline void Layout::set_is_main(bool value) {
  set_has_is_main();
  is_main_ = value;
}

// optional bool padding = 6;
inline bool Layout::has_padding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Layout::set_has_padding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Layout::clear_has_padding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Layout::clear_padding() {
  padding_ = false;
  clear_has_padding();
}
inline bool Layout::padding() const {
  return padding_;
}
inline void Layout::set_padding(bool value) {
  set_has_padding();
  padding_ = value;
}

// -------------------------------------------------------------------

// Layouts

// repeated .rec.gui.Layout layout = 1;
inline int Layouts::layout_size() const {
  return layout_.size();
}
inline void Layouts::clear_layout() {
  layout_.Clear();
}
inline const ::rec::gui::Layout& Layouts::layout(int index) const {
  return layout_.Get(index);
}
inline ::rec::gui::Layout* Layouts::mutable_layout(int index) {
  return layout_.Mutable(index);
}
inline ::rec::gui::Layout* Layouts::add_layout() {
  return layout_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >&
Layouts::layout() const {
  return layout_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Layout >*
Layouts::mutable_layout() {
  return &layout_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::Layout_Orientation>() {
  return ::rec::gui::Layout_Orientation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fLayout_2eproto__INCLUDED
