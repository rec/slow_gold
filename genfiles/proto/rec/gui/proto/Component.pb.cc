// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Component.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/proto/Component.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* ComponentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fproto_2fComponent_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fproto_2fComponent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/proto/Component.proto");
  GOOGLE_CHECK(file != NULL);
  ComponentProto_descriptor_ = file->message_type(0);
  static const int ComponentProto_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, tooltip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, resizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, min_resizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, combo_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, help_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, full_resizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, slider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, toggle_button_),
  };
  ComponentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentProto_descriptor_,
      ComponentProto::default_instance_,
      ComponentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fproto_2fComponent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentProto_descriptor_, &ComponentProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fproto_2fComponent_2eproto() {
  delete ComponentProto::default_instance_;
  delete ComponentProto_reflection_;
  delete ComponentProto::_default_min_resizer_;
}

void protobuf_AddDesc_rec_2fgui_2fproto_2fComponent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::data::protobuf_AddDesc_rec_2fdata_2fproto_2fAddress_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fButton_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fComboBox_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fCustom_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fHelp_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fLabel_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fResizer_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fSize_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fText_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fproto_2fToggleButton_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035rec/gui/proto/Component.proto\022\007rec.gui"
    "\032\034rec/data/proto/Address.proto\032\032rec/gui/"
    "proto/Button.proto\032\034rec/gui/proto/ComboB"
    "ox.proto\032\032rec/gui/proto/Custom.proto\032\030re"
    "c/gui/proto/Font.proto\032\030rec/gui/proto/He"
    "lp.proto\032\031rec/gui/proto/Label.proto\032\033rec"
    "/gui/proto/Resizer.proto\032\030rec/gui/proto/"
    "Size.proto\032\032rec/gui/proto/Slider.proto\032\030"
    "rec/gui/proto/Text.proto\032 rec/gui/proto/"
    "ToggleButton.proto\032\023rec/gui/Color.proto\""
    "\324\004\n\016ComponentProto\022\014\n\004name\030\001 \001(\t\022\017\n\007tool"
    "tip\030\002 \001(\t\022\033\n\004size\030\003 \001(\0132\r.rec.gui.Size\022\'"
    "\n\007address\030\004 \001(\0132\026.rec.data.AddressProto\022"
    "\035\n\005color\030\005 \003(\0132\016.rec.gui.Color\022 \n\004font\030\006"
    " \001(\0132\022.rec.gui.FontProto\022\016\n\006layout\030\021 \001(\t"
    "\022\017\n\007resizer\030\007 \001(\t\022\026\n\013min_resizer\030\022 \001(\t:\001"
    "0\022$\n\006button\030\010 \001(\0132\024.rec.gui.ButtonProto\022"
    ")\n\tcombo_box\030\t \001(\0132\026.rec.gui.ComboBoxPro"
    "to\022$\n\006custom\030\n \001(\0132\024.rec.gui.CustomProto"
    "\022 \n\004help\030\020 \001(\0132\022.rec.gui.HelpProto\022\"\n\005la"
    "bel\030\013 \001(\0132\023.rec.gui.LabelProto\022+\n\014full_r"
    "esizer\030\014 \001(\0132\025.rec.gui.ResizerProto\022$\n\006s"
    "lider\030\r \001(\0132\024.rec.gui.SliderProto\022 \n\004tex"
    "t\030\016 \001(\0132\022.rec.gui.TextProto\0221\n\rtoggle_bu"
    "tton\030\017 \001(\0132\032.rec.gui.ToggleButtonProto", 998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/proto/Component.proto", &protobuf_RegisterTypes);
  ComponentProto::_default_min_resizer_ =
      new ::std::string("0", 1);
  ComponentProto::default_instance_ = new ComponentProto();
  ComponentProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fproto_2fComponent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fproto_2fComponent_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fproto_2fComponent_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fproto_2fComponent_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fproto_2fComponent_2eproto_;

// ===================================================================

::std::string* ComponentProto::_default_min_resizer_ = NULL;
#ifndef _MSC_VER
const int ComponentProto::kNameFieldNumber;
const int ComponentProto::kTooltipFieldNumber;
const int ComponentProto::kSizeFieldNumber;
const int ComponentProto::kAddressFieldNumber;
const int ComponentProto::kColorFieldNumber;
const int ComponentProto::kFontFieldNumber;
const int ComponentProto::kLayoutFieldNumber;
const int ComponentProto::kResizerFieldNumber;
const int ComponentProto::kMinResizerFieldNumber;
const int ComponentProto::kButtonFieldNumber;
const int ComponentProto::kComboBoxFieldNumber;
const int ComponentProto::kCustomFieldNumber;
const int ComponentProto::kHelpFieldNumber;
const int ComponentProto::kLabelFieldNumber;
const int ComponentProto::kFullResizerFieldNumber;
const int ComponentProto::kSliderFieldNumber;
const int ComponentProto::kTextFieldNumber;
const int ComponentProto::kToggleButtonFieldNumber;
#endif  // !_MSC_VER

ComponentProto::ComponentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentProto::InitAsDefaultInstance() {
  size_ = const_cast< ::rec::gui::Size*>(&::rec::gui::Size::default_instance());
  address_ = const_cast< ::rec::data::AddressProto*>(&::rec::data::AddressProto::default_instance());
  font_ = const_cast< ::rec::gui::FontProto*>(&::rec::gui::FontProto::default_instance());
  button_ = const_cast< ::rec::gui::ButtonProto*>(&::rec::gui::ButtonProto::default_instance());
  combo_box_ = const_cast< ::rec::gui::ComboBoxProto*>(&::rec::gui::ComboBoxProto::default_instance());
  custom_ = const_cast< ::rec::gui::CustomProto*>(&::rec::gui::CustomProto::default_instance());
  help_ = const_cast< ::rec::gui::HelpProto*>(&::rec::gui::HelpProto::default_instance());
  label_ = const_cast< ::rec::gui::LabelProto*>(&::rec::gui::LabelProto::default_instance());
  full_resizer_ = const_cast< ::rec::gui::ResizerProto*>(&::rec::gui::ResizerProto::default_instance());
  slider_ = const_cast< ::rec::gui::SliderProto*>(&::rec::gui::SliderProto::default_instance());
  text_ = const_cast< ::rec::gui::TextProto*>(&::rec::gui::TextProto::default_instance());
  toggle_button_ = const_cast< ::rec::gui::ToggleButtonProto*>(&::rec::gui::ToggleButtonProto::default_instance());
}

ComponentProto::ComponentProto(const ComponentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = NULL;
  address_ = NULL;
  font_ = NULL;
  layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resizer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_resizer_ = const_cast< ::std::string*>(_default_min_resizer_);
  button_ = NULL;
  combo_box_ = NULL;
  custom_ = NULL;
  help_ = NULL;
  label_ = NULL;
  full_resizer_ = NULL;
  slider_ = NULL;
  text_ = NULL;
  toggle_button_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentProto::~ComponentProto() {
  SharedDtor();
}

void ComponentProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    delete tooltip_;
  }
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    delete layout_;
  }
  if (resizer_ != &::google::protobuf::internal::kEmptyString) {
    delete resizer_;
  }
  if (min_resizer_ != _default_min_resizer_) {
    delete min_resizer_;
  }
  if (this != default_instance_) {
    delete size_;
    delete address_;
    delete font_;
    delete button_;
    delete combo_box_;
    delete custom_;
    delete help_;
    delete label_;
    delete full_resizer_;
    delete slider_;
    delete text_;
    delete toggle_button_;
  }
}

void ComponentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentProto_descriptor_;
}

const ComponentProto& ComponentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fComponent_2eproto();
  return *default_instance_;
}

ComponentProto* ComponentProto::default_instance_ = NULL;

ComponentProto* ComponentProto::New() const {
  return new ComponentProto;
}

void ComponentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tooltip()) {
      if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
        tooltip_->clear();
      }
    }
    if (has_size()) {
      if (size_ != NULL) size_->::rec::gui::Size::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::rec::data::AddressProto::Clear();
    }
    if (has_font()) {
      if (font_ != NULL) font_->::rec::gui::FontProto::Clear();
    }
    if (has_layout()) {
      if (layout_ != &::google::protobuf::internal::kEmptyString) {
        layout_->clear();
      }
    }
    if (has_resizer()) {
      if (resizer_ != &::google::protobuf::internal::kEmptyString) {
        resizer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_min_resizer()) {
      if (min_resizer_ != _default_min_resizer_) {
        min_resizer_->assign(*_default_min_resizer_);
      }
    }
    if (has_button()) {
      if (button_ != NULL) button_->::rec::gui::ButtonProto::Clear();
    }
    if (has_combo_box()) {
      if (combo_box_ != NULL) combo_box_->::rec::gui::ComboBoxProto::Clear();
    }
    if (has_custom()) {
      if (custom_ != NULL) custom_->::rec::gui::CustomProto::Clear();
    }
    if (has_help()) {
      if (help_ != NULL) help_->::rec::gui::HelpProto::Clear();
    }
    if (has_label()) {
      if (label_ != NULL) label_->::rec::gui::LabelProto::Clear();
    }
    if (has_full_resizer()) {
      if (full_resizer_ != NULL) full_resizer_->::rec::gui::ResizerProto::Clear();
    }
    if (has_slider()) {
      if (slider_ != NULL) slider_->::rec::gui::SliderProto::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_text()) {
      if (text_ != NULL) text_->::rec::gui::TextProto::Clear();
    }
    if (has_toggle_button()) {
      if (toggle_button_ != NULL) toggle_button_->::rec::gui::ToggleButtonProto::Clear();
    }
  }
  color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tooltip;
        break;
      }

      // optional string tooltip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tooltip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tooltip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tooltip().data(), this->tooltip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional .rec.gui.Size size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional .rec.data.AddressProto address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_color;
        break;
      }

      // repeated .rec.gui.Color color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_color;
        if (input->ExpectTag(50)) goto parse_font;
        break;
      }

      // optional .rec.gui.FontProto font = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_resizer;
        break;
      }

      // optional string resizer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resizer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resizer().data(), this->resizer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_button;
        break;
      }

      // optional .rec.gui.ButtonProto button = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_button()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_combo_box;
        break;
      }

      // optional .rec.gui.ComboBoxProto combo_box = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combo_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combo_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_custom;
        break;
      }

      // optional .rec.gui.CustomProto custom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_label;
        break;
      }

      // optional .rec.gui.LabelProto label = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_full_resizer;
        break;
      }

      // optional .rec.gui.ResizerProto full_resizer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_resizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_full_resizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_slider;
        break;
      }

      // optional .rec.gui.SliderProto slider = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_text;
        break;
      }

      // optional .rec.gui.TextProto text = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_toggle_button;
        break;
      }

      // optional .rec.gui.ToggleButtonProto toggle_button = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toggle_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toggle_button()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_help;
        break;
      }

      // optional .rec.gui.HelpProto help = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_help()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_layout;
        break;
      }

      // optional string layout = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layout().data(), this->layout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_min_resizer;
        break;
      }

      // optional string min_resizer = 18 [default = "0"];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_min_resizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_min_resizer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->min_resizer().data(), this->min_resizer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string tooltip = 2;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tooltip(), output);
  }

  // optional .rec.gui.Size size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->size(), output);
  }

  // optional .rec.data.AddressProto address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->address(), output);
  }

  // repeated .rec.gui.Color color = 5;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->color(i), output);
  }

  // optional .rec.gui.FontProto font = 6;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->font(), output);
  }

  // optional string resizer = 7;
  if (has_resizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resizer().data(), this->resizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->resizer(), output);
  }

  // optional .rec.gui.ButtonProto button = 8;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->button(), output);
  }

  // optional .rec.gui.ComboBoxProto combo_box = 9;
  if (has_combo_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->combo_box(), output);
  }

  // optional .rec.gui.CustomProto custom = 10;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->custom(), output);
  }

  // optional .rec.gui.LabelProto label = 11;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->label(), output);
  }

  // optional .rec.gui.ResizerProto full_resizer = 12;
  if (has_full_resizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->full_resizer(), output);
  }

  // optional .rec.gui.SliderProto slider = 13;
  if (has_slider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->slider(), output);
  }

  // optional .rec.gui.TextProto text = 14;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->text(), output);
  }

  // optional .rec.gui.ToggleButtonProto toggle_button = 15;
  if (has_toggle_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->toggle_button(), output);
  }

  // optional .rec.gui.HelpProto help = 16;
  if (has_help()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->help(), output);
  }

  // optional string layout = 17;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->layout(), output);
  }

  // optional string min_resizer = 18 [default = "0"];
  if (has_min_resizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_resizer().data(), this->min_resizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->min_resizer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tooltip = 2;
  if (has_tooltip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tooltip().data(), this->tooltip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tooltip(), target);
  }

  // optional .rec.gui.Size size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->size(), target);
  }

  // optional .rec.data.AddressProto address = 4;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->address(), target);
  }

  // repeated .rec.gui.Color color = 5;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->color(i), target);
  }

  // optional .rec.gui.FontProto font = 6;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->font(), target);
  }

  // optional string resizer = 7;
  if (has_resizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resizer().data(), this->resizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->resizer(), target);
  }

  // optional .rec.gui.ButtonProto button = 8;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->button(), target);
  }

  // optional .rec.gui.ComboBoxProto combo_box = 9;
  if (has_combo_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->combo_box(), target);
  }

  // optional .rec.gui.CustomProto custom = 10;
  if (has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->custom(), target);
  }

  // optional .rec.gui.LabelProto label = 11;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->label(), target);
  }

  // optional .rec.gui.ResizerProto full_resizer = 12;
  if (has_full_resizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->full_resizer(), target);
  }

  // optional .rec.gui.SliderProto slider = 13;
  if (has_slider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->slider(), target);
  }

  // optional .rec.gui.TextProto text = 14;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->text(), target);
  }

  // optional .rec.gui.ToggleButtonProto toggle_button = 15;
  if (has_toggle_button()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->toggle_button(), target);
  }

  // optional .rec.gui.HelpProto help = 16;
  if (has_help()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->help(), target);
  }

  // optional string layout = 17;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layout().data(), this->layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->layout(), target);
  }

  // optional string min_resizer = 18 [default = "0"];
  if (has_min_resizer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->min_resizer().data(), this->min_resizer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->min_resizer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tooltip = 2;
    if (has_tooltip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tooltip());
    }

    // optional .rec.gui.Size size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional .rec.data.AddressProto address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional .rec.gui.FontProto font = 6;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }

    // optional string layout = 17;
    if (has_layout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layout());
    }

    // optional string resizer = 7;
    if (has_resizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resizer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string min_resizer = 18 [default = "0"];
    if (has_min_resizer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->min_resizer());
    }

    // optional .rec.gui.ButtonProto button = 8;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->button());
    }

    // optional .rec.gui.ComboBoxProto combo_box = 9;
    if (has_combo_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combo_box());
    }

    // optional .rec.gui.CustomProto custom = 10;
    if (has_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom());
    }

    // optional .rec.gui.HelpProto help = 16;
    if (has_help()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->help());
    }

    // optional .rec.gui.LabelProto label = 11;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label());
    }

    // optional .rec.gui.ResizerProto full_resizer = 12;
    if (has_full_resizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->full_resizer());
    }

    // optional .rec.gui.SliderProto slider = 13;
    if (has_slider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slider());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .rec.gui.TextProto text = 14;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .rec.gui.ToggleButtonProto toggle_button = 15;
    if (has_toggle_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toggle_button());
    }

  }
  // repeated .rec.gui.Color color = 5;
  total_size += 1 * this->color_size();
  for (int i = 0; i < this->color_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->color(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentProto::MergeFrom(const ComponentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_.MergeFrom(from.color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tooltip()) {
      set_tooltip(from.tooltip());
    }
    if (from.has_size()) {
      mutable_size()->::rec::gui::Size::MergeFrom(from.size());
    }
    if (from.has_address()) {
      mutable_address()->::rec::data::AddressProto::MergeFrom(from.address());
    }
    if (from.has_font()) {
      mutable_font()->::rec::gui::FontProto::MergeFrom(from.font());
    }
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_resizer()) {
      set_resizer(from.resizer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_resizer()) {
      set_min_resizer(from.min_resizer());
    }
    if (from.has_button()) {
      mutable_button()->::rec::gui::ButtonProto::MergeFrom(from.button());
    }
    if (from.has_combo_box()) {
      mutable_combo_box()->::rec::gui::ComboBoxProto::MergeFrom(from.combo_box());
    }
    if (from.has_custom()) {
      mutable_custom()->::rec::gui::CustomProto::MergeFrom(from.custom());
    }
    if (from.has_help()) {
      mutable_help()->::rec::gui::HelpProto::MergeFrom(from.help());
    }
    if (from.has_label()) {
      mutable_label()->::rec::gui::LabelProto::MergeFrom(from.label());
    }
    if (from.has_full_resizer()) {
      mutable_full_resizer()->::rec::gui::ResizerProto::MergeFrom(from.full_resizer());
    }
    if (from.has_slider()) {
      mutable_slider()->::rec::gui::SliderProto::MergeFrom(from.slider());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_text()) {
      mutable_text()->::rec::gui::TextProto::MergeFrom(from.text());
    }
    if (from.has_toggle_button()) {
      mutable_toggle_button()->::rec::gui::ToggleButtonProto::MergeFrom(from.toggle_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentProto::CopyFrom(const ComponentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentProto::IsInitialized() const {

  return true;
}

void ComponentProto::Swap(ComponentProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tooltip_, other->tooltip_);
    std::swap(size_, other->size_);
    std::swap(address_, other->address_);
    color_.Swap(&other->color_);
    std::swap(font_, other->font_);
    std::swap(layout_, other->layout_);
    std::swap(resizer_, other->resizer_);
    std::swap(min_resizer_, other->min_resizer_);
    std::swap(button_, other->button_);
    std::swap(combo_box_, other->combo_box_);
    std::swap(custom_, other->custom_);
    std::swap(help_, other->help_);
    std::swap(label_, other->label_);
    std::swap(full_resizer_, other->full_resizer_);
    std::swap(slider_, other->slider_);
    std::swap(text_, other->text_);
    std::swap(toggle_button_, other->toggle_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentProto_descriptor_;
  metadata.reflection = ComponentProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
