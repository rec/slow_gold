// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/LevelMeter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/proto/LevelMeter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* LevelMeterProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelMeterProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LevelMeterProto_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/proto/LevelMeter.proto");
  GOOGLE_CHECK(file != NULL);
  LevelMeterProto_descriptor_ = file->message_type(0);
  static const int LevelMeterProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, scale_up_meter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, gap_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, segment_count_),
  };
  LevelMeterProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelMeterProto_descriptor_,
      LevelMeterProto::default_instance_,
      LevelMeterProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMeterProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelMeterProto));
  LevelMeterProto_Type_descriptor_ = LevelMeterProto_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelMeterProto_descriptor_, &LevelMeterProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLevelMeter_2eproto() {
  delete LevelMeterProto::default_instance_;
  delete LevelMeterProto_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fOrientation_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036rec/gui/proto/LevelMeter.proto\022\007rec.gu"
    "i\032\031rec/gui/Orientation.proto\"\373\001\n\017LevelMe"
    "terProto\022:\n\013orientation\030\001 \001(\0162%.rec.gui."
    "OrientationProto.Orientation\0220\n\004type\030\002 \001"
    "(\0162\035.rec.gui.LevelMeterProto.Type:\003RMS\022\021"
    "\n\006margin\030\003 \001(\r:\0012\022\031\n\016scale_up_meter\030\004 \001("
    "\002:\0012\022\024\n\tgap_width\030\005 \001(\002:\0012\022\031\n\rsegment_co"
    "unt\030\006 \001(\r:\00232\"\033\n\004Type\022\n\n\006LINEAR\020\000\022\007\n\003RMS"
    "\020\001", 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/proto/LevelMeter.proto", &protobuf_RegisterTypes);
  LevelMeterProto::default_instance_ = new LevelMeterProto();
  LevelMeterProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fproto_2fLevelMeter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fproto_2fLevelMeter_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fproto_2fLevelMeter_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fproto_2fLevelMeter_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LevelMeterProto_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelMeterProto_Type_descriptor_;
}
bool LevelMeterProto_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LevelMeterProto_Type LevelMeterProto::LINEAR;
const LevelMeterProto_Type LevelMeterProto::RMS;
const LevelMeterProto_Type LevelMeterProto::Type_MIN;
const LevelMeterProto_Type LevelMeterProto::Type_MAX;
const int LevelMeterProto::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LevelMeterProto::kOrientationFieldNumber;
const int LevelMeterProto::kTypeFieldNumber;
const int LevelMeterProto::kMarginFieldNumber;
const int LevelMeterProto::kScaleUpMeterFieldNumber;
const int LevelMeterProto::kGapWidthFieldNumber;
const int LevelMeterProto::kSegmentCountFieldNumber;
#endif  // !_MSC_VER

LevelMeterProto::LevelMeterProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelMeterProto::InitAsDefaultInstance() {
}

LevelMeterProto::LevelMeterProto(const LevelMeterProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelMeterProto::SharedCtor() {
  _cached_size_ = 0;
  orientation_ = 0;
  type_ = 1;
  margin_ = 2u;
  scale_up_meter_ = 2;
  gap_width_ = 2;
  segment_count_ = 32u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelMeterProto::~LevelMeterProto() {
  SharedDtor();
}

void LevelMeterProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelMeterProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelMeterProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelMeterProto_descriptor_;
}

const LevelMeterProto& LevelMeterProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fLevelMeter_2eproto();
  return *default_instance_;
}

LevelMeterProto* LevelMeterProto::default_instance_ = NULL;

LevelMeterProto* LevelMeterProto::New() const {
  return new LevelMeterProto;
}

void LevelMeterProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orientation_ = 0;
    type_ = 1;
    margin_ = 2u;
    scale_up_meter_ = 2;
    gap_width_ = 2;
    segment_count_ = 32u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelMeterProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.OrientationProto.Orientation orientation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::OrientationProto_Orientation_IsValid(value)) {
            set_orientation(static_cast< ::rec::gui::OrientationProto_Orientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::LevelMeterProto_Type_IsValid(value)) {
            set_type(static_cast< ::rec::gui::LevelMeterProto_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_margin;
        break;
      }

      // optional uint32 margin = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale_up_meter;
        break;
      }

      // optional float scale_up_meter = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_up_meter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_up_meter_)));
          set_has_scale_up_meter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gap_width;
        break;
      }

      // optional float gap_width = 5 [default = 2];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gap_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gap_width_)));
          set_has_gap_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_segment_count;
        break;
      }

      // optional uint32 segment_count = 6 [default = 32];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_segment_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segment_count_)));
          set_has_segment_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelMeterProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.OrientationProto.Orientation orientation = 1;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->orientation(), output);
  }

  // optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 margin = 3 [default = 2];
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->margin(), output);
  }

  // optional float scale_up_meter = 4 [default = 2];
  if (has_scale_up_meter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale_up_meter(), output);
  }

  // optional float gap_width = 5 [default = 2];
  if (has_gap_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gap_width(), output);
  }

  // optional uint32 segment_count = 6 [default = 32];
  if (has_segment_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->segment_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelMeterProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.OrientationProto.Orientation orientation = 1;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->orientation(), target);
  }

  // optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 margin = 3 [default = 2];
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->margin(), target);
  }

  // optional float scale_up_meter = 4 [default = 2];
  if (has_scale_up_meter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->scale_up_meter(), target);
  }

  // optional float gap_width = 5 [default = 2];
  if (has_gap_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gap_width(), target);
  }

  // optional uint32 segment_count = 6 [default = 32];
  if (has_segment_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->segment_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelMeterProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.OrientationProto.Orientation orientation = 1;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
    }

    // optional .rec.gui.LevelMeterProto.Type type = 2 [default = RMS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 margin = 3 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }

    // optional float scale_up_meter = 4 [default = 2];
    if (has_scale_up_meter()) {
      total_size += 1 + 4;
    }

    // optional float gap_width = 5 [default = 2];
    if (has_gap_width()) {
      total_size += 1 + 4;
    }

    // optional uint32 segment_count = 6 [default = 32];
    if (has_segment_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->segment_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelMeterProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelMeterProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelMeterProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelMeterProto::MergeFrom(const LevelMeterProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_scale_up_meter()) {
      set_scale_up_meter(from.scale_up_meter());
    }
    if (from.has_gap_width()) {
      set_gap_width(from.gap_width());
    }
    if (from.has_segment_count()) {
      set_segment_count(from.segment_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelMeterProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelMeterProto::CopyFrom(const LevelMeterProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelMeterProto::IsInitialized() const {

  return true;
}

void LevelMeterProto::Swap(LevelMeterProto* other) {
  if (other != this) {
    std::swap(orientation_, other->orientation_);
    std::swap(type_, other->type_);
    std::swap(margin_, other->margin_);
    std::swap(scale_up_meter_, other->scale_up_meter_);
    std::swap(gap_width_, other->gap_width_);
    std::swap(segment_count_, other->segment_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelMeterProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelMeterProto_descriptor_;
  metadata.reflection = LevelMeterProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
