// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Label.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fLabel_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fLabel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rec/data/proto/Address.pb.h"
#include "rec/gui/proto/Font.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fLabel_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fLabel_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLabel_2eproto();

class LabelProto;

// ===================================================================

class LabelProto : public ::google::protobuf::Message {
 public:
  LabelProto();
  virtual ~LabelProto();

  LabelProto(const LabelProto& from);

  inline LabelProto& operator=(const LabelProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelProto& default_instance();

  void Swap(LabelProto* other);

  // implements Message ----------------------------------------------

  LabelProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelProto& from);
  void MergeFrom(const LabelProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rec.gui.FontProto font = 1;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 1;
  inline const ::rec::gui::FontProto& font() const;
  inline ::rec::gui::FontProto* mutable_font();
  inline ::rec::gui::FontProto* release_font();
  inline void set_allocated_font(::rec::gui::FontProto* font);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string tooltip = 4;
  inline bool has_tooltip() const;
  inline void clear_tooltip();
  static const int kTooltipFieldNumber = 4;
  inline const ::std::string& tooltip() const;
  inline void set_tooltip(const ::std::string& value);
  inline void set_tooltip(const char* value);
  inline void set_tooltip(const char* value, size_t size);
  inline ::std::string* mutable_tooltip();
  inline ::std::string* release_tooltip();
  inline void set_allocated_tooltip(::std::string* tooltip);

  // @@protoc_insertion_point(class_scope:rec.gui.LabelProto)
 private:
  inline void set_has_font();
  inline void clear_has_font();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_tooltip();
  inline void clear_has_tooltip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rec::gui::FontProto* font_;
  ::std::string* name_;
  ::std::string* text_;
  ::std::string* tooltip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fLabel_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fLabel_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fLabel_2eproto();

  void InitAsDefaultInstance();
  static LabelProto* default_instance_;
};
// ===================================================================


// ===================================================================

// LabelProto

// optional .rec.gui.FontProto font = 1;
inline bool LabelProto::has_font() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelProto::set_has_font() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelProto::clear_has_font() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelProto::clear_font() {
  if (font_ != NULL) font_->::rec::gui::FontProto::Clear();
  clear_has_font();
}
inline const ::rec::gui::FontProto& LabelProto::font() const {
  return font_ != NULL ? *font_ : *default_instance_->font_;
}
inline ::rec::gui::FontProto* LabelProto::mutable_font() {
  set_has_font();
  if (font_ == NULL) font_ = new ::rec::gui::FontProto;
  return font_;
}
inline ::rec::gui::FontProto* LabelProto::release_font() {
  clear_has_font();
  ::rec::gui::FontProto* temp = font_;
  font_ = NULL;
  return temp;
}
inline void LabelProto::set_allocated_font(::rec::gui::FontProto* font) {
  delete font_;
  font_ = font;
  if (font) {
    set_has_font();
  } else {
    clear_has_font();
  }
}

// optional string name = 2;
inline bool LabelProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LabelProto::name() const {
  return *name_;
}
inline void LabelProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LabelProto::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LabelProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LabelProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string text = 3;
inline bool LabelProto::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelProto::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelProto::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelProto::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& LabelProto::text() const {
  return *text_;
}
inline void LabelProto::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void LabelProto::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void LabelProto::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelProto::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* LabelProto::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LabelProto::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tooltip = 4;
inline bool LabelProto::has_tooltip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelProto::set_has_tooltip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelProto::clear_has_tooltip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelProto::clear_tooltip() {
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    tooltip_->clear();
  }
  clear_has_tooltip();
}
inline const ::std::string& LabelProto::tooltip() const {
  return *tooltip_;
}
inline void LabelProto::set_tooltip(const ::std::string& value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
}
inline void LabelProto::set_tooltip(const char* value) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(value);
}
inline void LabelProto::set_tooltip(const char* value, size_t size) {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  tooltip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelProto::mutable_tooltip() {
  set_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    tooltip_ = new ::std::string;
  }
  return tooltip_;
}
inline ::std::string* LabelProto::release_tooltip() {
  clear_has_tooltip();
  if (tooltip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tooltip_;
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LabelProto::set_allocated_tooltip(::std::string* tooltip) {
  if (tooltip_ != &::google::protobuf::internal::kEmptyString) {
    delete tooltip_;
  }
  if (tooltip) {
    set_has_tooltip();
    tooltip_ = tooltip;
  } else {
    clear_has_tooltip();
    tooltip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fLabel_2eproto__INCLUDED
