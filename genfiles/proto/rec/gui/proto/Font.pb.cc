// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Font.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/proto/Font.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* FontProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fproto_2fFont_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/proto/Font.proto");
  GOOGLE_CHECK(file != NULL);
  FontProto_descriptor_ = file->message_type(0);
  static const int FontProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, height_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, typeface_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, typeface_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, is_bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, is_italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, is_underlined_),
  };
  FontProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontProto_descriptor_,
      FontProto::default_instance_,
      FontProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fproto_2fFont_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontProto_descriptor_, &FontProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fproto_2fFont_2eproto() {
  delete FontProto::default_instance_;
  delete FontProto_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030rec/gui/proto/Font.proto\022\007rec.gui\"\233\001\n\t"
    "FontProto\022\016\n\006height\030\001 \001(\002\022\024\n\014height_delt"
    "a\030\002 \001(\002\022\025\n\rtypeface_name\030\003 \001(\t\022\026\n\016typefa"
    "ce_style\030\004 \001(\t\022\017\n\007is_bold\030\005 \001(\010\022\021\n\tis_it"
    "alic\030\006 \001(\010\022\025\n\ris_underlined\030\007 \001(\010", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/proto/Font.proto", &protobuf_RegisterTypes);
  FontProto::default_instance_ = new FontProto();
  FontProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fproto_2fFont_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fproto_2fFont_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fproto_2fFont_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fproto_2fFont_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FontProto::kHeightFieldNumber;
const int FontProto::kHeightDeltaFieldNumber;
const int FontProto::kTypefaceNameFieldNumber;
const int FontProto::kTypefaceStyleFieldNumber;
const int FontProto::kIsBoldFieldNumber;
const int FontProto::kIsItalicFieldNumber;
const int FontProto::kIsUnderlinedFieldNumber;
#endif  // !_MSC_VER

FontProto::FontProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontProto::InitAsDefaultInstance() {
}

FontProto::FontProto(const FontProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontProto::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  height_delta_ = 0;
  typeface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeface_style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_bold_ = false;
  is_italic_ = false;
  is_underlined_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontProto::~FontProto() {
  SharedDtor();
}

void FontProto::SharedDtor() {
  if (typeface_name_ != &::google::protobuf::internal::kEmptyString) {
    delete typeface_name_;
  }
  if (typeface_style_ != &::google::protobuf::internal::kEmptyString) {
    delete typeface_style_;
  }
  if (this != default_instance_) {
  }
}

void FontProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontProto_descriptor_;
}

const FontProto& FontProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fproto_2fFont_2eproto();
  return *default_instance_;
}

FontProto* FontProto::default_instance_ = NULL;

FontProto* FontProto::New() const {
  return new FontProto;
}

void FontProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
    height_delta_ = 0;
    if (has_typeface_name()) {
      if (typeface_name_ != &::google::protobuf::internal::kEmptyString) {
        typeface_name_->clear();
      }
    }
    if (has_typeface_style()) {
      if (typeface_style_ != &::google::protobuf::internal::kEmptyString) {
        typeface_style_->clear();
      }
    }
    is_bold_ = false;
    is_italic_ = false;
    is_underlined_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height_delta;
        break;
      }

      // optional float height_delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_delta_)));
          set_has_height_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_typeface_name;
        break;
      }

      // optional string typeface_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeface_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeface_name().data(), this->typeface_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_typeface_style;
        break;
      }

      // optional string typeface_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeface_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeface_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeface_style().data(), this->typeface_style().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_bold;
        break;
      }

      // optional bool is_bold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_bold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bold_)));
          set_has_is_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_italic;
        break;
      }

      // optional bool is_italic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_italic_)));
          set_has_is_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_underlined;
        break;
      }

      // optional bool is_underlined = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_underlined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_underlined_)));
          set_has_is_underlined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->height(), output);
  }

  // optional float height_delta = 2;
  if (has_height_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height_delta(), output);
  }

  // optional string typeface_name = 3;
  if (has_typeface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeface_name().data(), this->typeface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->typeface_name(), output);
  }

  // optional string typeface_style = 4;
  if (has_typeface_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeface_style().data(), this->typeface_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->typeface_style(), output);
  }

  // optional bool is_bold = 5;
  if (has_is_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_bold(), output);
  }

  // optional bool is_italic = 6;
  if (has_is_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_italic(), output);
  }

  // optional bool is_underlined = 7;
  if (has_is_underlined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_underlined(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->height(), target);
  }

  // optional float height_delta = 2;
  if (has_height_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height_delta(), target);
  }

  // optional string typeface_name = 3;
  if (has_typeface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeface_name().data(), this->typeface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->typeface_name(), target);
  }

  // optional string typeface_style = 4;
  if (has_typeface_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeface_style().data(), this->typeface_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->typeface_style(), target);
  }

  // optional bool is_bold = 5;
  if (has_is_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_bold(), target);
  }

  // optional bool is_italic = 6;
  if (has_is_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_italic(), target);
  }

  // optional bool is_underlined = 7;
  if (has_is_underlined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_underlined(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float height = 1;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float height_delta = 2;
    if (has_height_delta()) {
      total_size += 1 + 4;
    }

    // optional string typeface_name = 3;
    if (has_typeface_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeface_name());
    }

    // optional string typeface_style = 4;
    if (has_typeface_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeface_style());
    }

    // optional bool is_bold = 5;
    if (has_is_bold()) {
      total_size += 1 + 1;
    }

    // optional bool is_italic = 6;
    if (has_is_italic()) {
      total_size += 1 + 1;
    }

    // optional bool is_underlined = 7;
    if (has_is_underlined()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontProto::MergeFrom(const FontProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_height_delta()) {
      set_height_delta(from.height_delta());
    }
    if (from.has_typeface_name()) {
      set_typeface_name(from.typeface_name());
    }
    if (from.has_typeface_style()) {
      set_typeface_style(from.typeface_style());
    }
    if (from.has_is_bold()) {
      set_is_bold(from.is_bold());
    }
    if (from.has_is_italic()) {
      set_is_italic(from.is_italic());
    }
    if (from.has_is_underlined()) {
      set_is_underlined(from.is_underlined());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontProto::CopyFrom(const FontProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontProto::IsInitialized() const {

  return true;
}

void FontProto::Swap(FontProto* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(height_delta_, other->height_delta_);
    std::swap(typeface_name_, other->typeface_name_);
    std::swap(typeface_style_, other->typeface_style_);
    std::swap(is_bold_, other->is_bold_);
    std::swap(is_italic_, other->is_italic_);
    std::swap(is_underlined_, other->is_underlined_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontProto_descriptor_;
  metadata.reflection = FontProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
