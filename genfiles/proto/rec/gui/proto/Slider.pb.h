// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Slider.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fSlider_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fSlider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fSlider_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fSlider_2eproto();

class SliderProto;

enum SliderProto_Style {
  SliderProto_Style_LinearHorizontal = 0,
  SliderProto_Style_LinearVertical = 1,
  SliderProto_Style_LinearBar = 2,
  SliderProto_Style_LinearBarVertical = 3,
  SliderProto_Style_Rotary = 4,
  SliderProto_Style_RotaryHorizontalDrag = 5,
  SliderProto_Style_RotaryVerticalDrag = 6,
  SliderProto_Style_RotaryHorizontalVerticalDrag = 7,
  SliderProto_Style_IncDecButtons = 8,
  SliderProto_Style_TwoValueHorizontal = 9,
  SliderProto_Style_TwoValueVertical = 10,
  SliderProto_Style_ThreeValueHorizontal = 11,
  SliderProto_Style_ThreeValueVertical = 12
};
bool SliderProto_Style_IsValid(int value);
const SliderProto_Style SliderProto_Style_Style_MIN = SliderProto_Style_LinearHorizontal;
const SliderProto_Style SliderProto_Style_Style_MAX = SliderProto_Style_ThreeValueVertical;
const int SliderProto_Style_Style_ARRAYSIZE = SliderProto_Style_Style_MAX + 1;

const ::google::protobuf::EnumDescriptor* SliderProto_Style_descriptor();
inline const ::std::string& SliderProto_Style_Name(SliderProto_Style value) {
  return ::google::protobuf::internal::NameOfEnum(
    SliderProto_Style_descriptor(), value);
}
inline bool SliderProto_Style_Parse(
    const ::std::string& name, SliderProto_Style* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SliderProto_Style>(
    SliderProto_Style_descriptor(), name, value);
}
enum SliderProto_TextEntryBoxPosition {
  SliderProto_TextEntryBoxPosition_NoTextBox = 0,
  SliderProto_TextEntryBoxPosition_TextBoxLeft = 1,
  SliderProto_TextEntryBoxPosition_TextBoxRight = 2,
  SliderProto_TextEntryBoxPosition_TextBoxAbove = 3,
  SliderProto_TextEntryBoxPosition_TextBoxBelow = 4
};
bool SliderProto_TextEntryBoxPosition_IsValid(int value);
const SliderProto_TextEntryBoxPosition SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_MIN = SliderProto_TextEntryBoxPosition_NoTextBox;
const SliderProto_TextEntryBoxPosition SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_MAX = SliderProto_TextEntryBoxPosition_TextBoxBelow;
const int SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_ARRAYSIZE = SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* SliderProto_TextEntryBoxPosition_descriptor();
inline const ::std::string& SliderProto_TextEntryBoxPosition_Name(SliderProto_TextEntryBoxPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    SliderProto_TextEntryBoxPosition_descriptor(), value);
}
inline bool SliderProto_TextEntryBoxPosition_Parse(
    const ::std::string& name, SliderProto_TextEntryBoxPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SliderProto_TextEntryBoxPosition>(
    SliderProto_TextEntryBoxPosition_descriptor(), name, value);
}
// ===================================================================

class SliderProto : public ::google::protobuf::Message {
 public:
  SliderProto();
  virtual ~SliderProto();

  SliderProto(const SliderProto& from);

  inline SliderProto& operator=(const SliderProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliderProto& default_instance();

  void Swap(SliderProto* other);

  // implements Message ----------------------------------------------

  SliderProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliderProto& from);
  void MergeFrom(const SliderProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SliderProto_Style Style;
  static const Style LinearHorizontal = SliderProto_Style_LinearHorizontal;
  static const Style LinearVertical = SliderProto_Style_LinearVertical;
  static const Style LinearBar = SliderProto_Style_LinearBar;
  static const Style LinearBarVertical = SliderProto_Style_LinearBarVertical;
  static const Style Rotary = SliderProto_Style_Rotary;
  static const Style RotaryHorizontalDrag = SliderProto_Style_RotaryHorizontalDrag;
  static const Style RotaryVerticalDrag = SliderProto_Style_RotaryVerticalDrag;
  static const Style RotaryHorizontalVerticalDrag = SliderProto_Style_RotaryHorizontalVerticalDrag;
  static const Style IncDecButtons = SliderProto_Style_IncDecButtons;
  static const Style TwoValueHorizontal = SliderProto_Style_TwoValueHorizontal;
  static const Style TwoValueVertical = SliderProto_Style_TwoValueVertical;
  static const Style ThreeValueHorizontal = SliderProto_Style_ThreeValueHorizontal;
  static const Style ThreeValueVertical = SliderProto_Style_ThreeValueVertical;
  static inline bool Style_IsValid(int value) {
    return SliderProto_Style_IsValid(value);
  }
  static const Style Style_MIN =
    SliderProto_Style_Style_MIN;
  static const Style Style_MAX =
    SliderProto_Style_Style_MAX;
  static const int Style_ARRAYSIZE =
    SliderProto_Style_Style_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Style_descriptor() {
    return SliderProto_Style_descriptor();
  }
  static inline const ::std::string& Style_Name(Style value) {
    return SliderProto_Style_Name(value);
  }
  static inline bool Style_Parse(const ::std::string& name,
      Style* value) {
    return SliderProto_Style_Parse(name, value);
  }

  typedef SliderProto_TextEntryBoxPosition TextEntryBoxPosition;
  static const TextEntryBoxPosition NoTextBox = SliderProto_TextEntryBoxPosition_NoTextBox;
  static const TextEntryBoxPosition TextBoxLeft = SliderProto_TextEntryBoxPosition_TextBoxLeft;
  static const TextEntryBoxPosition TextBoxRight = SliderProto_TextEntryBoxPosition_TextBoxRight;
  static const TextEntryBoxPosition TextBoxAbove = SliderProto_TextEntryBoxPosition_TextBoxAbove;
  static const TextEntryBoxPosition TextBoxBelow = SliderProto_TextEntryBoxPosition_TextBoxBelow;
  static inline bool TextEntryBoxPosition_IsValid(int value) {
    return SliderProto_TextEntryBoxPosition_IsValid(value);
  }
  static const TextEntryBoxPosition TextEntryBoxPosition_MIN =
    SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_MIN;
  static const TextEntryBoxPosition TextEntryBoxPosition_MAX =
    SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_MAX;
  static const int TextEntryBoxPosition_ARRAYSIZE =
    SliderProto_TextEntryBoxPosition_TextEntryBoxPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TextEntryBoxPosition_descriptor() {
    return SliderProto_TextEntryBoxPosition_descriptor();
  }
  static inline const ::std::string& TextEntryBoxPosition_Name(TextEntryBoxPosition value) {
    return SliderProto_TextEntryBoxPosition_Name(value);
  }
  static inline bool TextEntryBoxPosition_Parse(const ::std::string& name,
      TextEntryBoxPosition* value) {
    return SliderProto_TextEntryBoxPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string caption = 1;
  inline bool has_caption() const;
  inline void clear_caption();
  static const int kCaptionFieldNumber = 1;
  inline const ::std::string& caption() const;
  inline void set_caption(const ::std::string& value);
  inline void set_caption(const char* value);
  inline void set_caption(const char* value, size_t size);
  inline ::std::string* mutable_caption();
  inline ::std::string* release_caption();
  inline void set_allocated_caption(::std::string* caption);

  // optional string caption_size = 2 [default = "45"];
  inline bool has_caption_size() const;
  inline void clear_caption_size();
  static const int kCaptionSizeFieldNumber = 2;
  inline const ::std::string& caption_size() const;
  inline void set_caption_size(const ::std::string& value);
  inline void set_caption_size(const char* value);
  inline void set_caption_size(const char* value, size_t size);
  inline ::std::string* mutable_caption_size();
  inline ::std::string* release_caption_size();
  inline void set_allocated_caption_size(::std::string* caption_size);

  // optional string text_entry_box_width = 4 [default = "80"];
  inline bool has_text_entry_box_width() const;
  inline void clear_text_entry_box_width();
  static const int kTextEntryBoxWidthFieldNumber = 4;
  inline const ::std::string& text_entry_box_width() const;
  inline void set_text_entry_box_width(const ::std::string& value);
  inline void set_text_entry_box_width(const char* value);
  inline void set_text_entry_box_width(const char* value, size_t size);
  inline ::std::string* mutable_text_entry_box_width();
  inline ::std::string* release_text_entry_box_width();
  inline void set_allocated_text_entry_box_width(::std::string* text_entry_box_width);

  // optional string text_entry_box_height = 5 [default = "16"];
  inline bool has_text_entry_box_height() const;
  inline void clear_text_entry_box_height();
  static const int kTextEntryBoxHeightFieldNumber = 5;
  inline const ::std::string& text_entry_box_height() const;
  inline void set_text_entry_box_height(const ::std::string& value);
  inline void set_text_entry_box_height(const char* value);
  inline void set_text_entry_box_height(const char* value, size_t size);
  inline ::std::string* mutable_text_entry_box_height();
  inline ::std::string* release_text_entry_box_height();
  inline void set_allocated_text_entry_box_height(::std::string* text_entry_box_height);

  // optional string detent = 6;
  inline bool has_detent() const;
  inline void clear_detent();
  static const int kDetentFieldNumber = 6;
  inline const ::std::string& detent() const;
  inline void set_detent(const ::std::string& value);
  inline void set_detent(const char* value);
  inline void set_detent(const char* value, size_t size);
  inline ::std::string* mutable_detent();
  inline ::std::string* release_detent();
  inline void set_allocated_detent(::std::string* detent);

  // optional string detent_radius = 7;
  inline bool has_detent_radius() const;
  inline void clear_detent_radius();
  static const int kDetentRadiusFieldNumber = 7;
  inline const ::std::string& detent_radius() const;
  inline void set_detent_radius(const ::std::string& value);
  inline void set_detent_radius(const char* value);
  inline void set_detent_radius(const char* value, size_t size);
  inline ::std::string* mutable_detent_radius();
  inline ::std::string* release_detent_radius();
  inline void set_allocated_detent_radius(::std::string* detent_radius);

  // optional string text_suffix = 8;
  inline bool has_text_suffix() const;
  inline void clear_text_suffix();
  static const int kTextSuffixFieldNumber = 8;
  inline const ::std::string& text_suffix() const;
  inline void set_text_suffix(const ::std::string& value);
  inline void set_text_suffix(const char* value);
  inline void set_text_suffix(const char* value, size_t size);
  inline ::std::string* mutable_text_suffix();
  inline ::std::string* release_text_suffix();
  inline void set_allocated_text_suffix(::std::string* text_suffix);

  // optional string minimum = 9;
  inline bool has_minimum() const;
  inline void clear_minimum();
  static const int kMinimumFieldNumber = 9;
  inline const ::std::string& minimum() const;
  inline void set_minimum(const ::std::string& value);
  inline void set_minimum(const char* value);
  inline void set_minimum(const char* value, size_t size);
  inline ::std::string* mutable_minimum();
  inline ::std::string* release_minimum();
  inline void set_allocated_minimum(::std::string* minimum);

  // optional string maximum = 10;
  inline bool has_maximum() const;
  inline void clear_maximum();
  static const int kMaximumFieldNumber = 10;
  inline const ::std::string& maximum() const;
  inline void set_maximum(const ::std::string& value);
  inline void set_maximum(const char* value);
  inline void set_maximum(const char* value, size_t size);
  inline ::std::string* mutable_maximum();
  inline ::std::string* release_maximum();
  inline void set_allocated_maximum(::std::string* maximum);

  // optional string interval = 11;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 11;
  inline const ::std::string& interval() const;
  inline void set_interval(const ::std::string& value);
  inline void set_interval(const char* value);
  inline void set_interval(const char* value, size_t size);
  inline ::std::string* mutable_interval();
  inline ::std::string* release_interval();
  inline void set_allocated_interval(::std::string* interval);

  // optional .rec.gui.SliderProto.Style style = 21;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 21;
  inline ::rec::gui::SliderProto_Style style() const;
  inline void set_style(::rec::gui::SliderProto_Style value);

  // optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
  inline bool has_text_entry_box_position() const;
  inline void clear_text_entry_box_position();
  static const int kTextEntryBoxPositionFieldNumber = 22;
  inline ::rec::gui::SliderProto_TextEntryBoxPosition text_entry_box_position() const;
  inline void set_text_entry_box_position(::rec::gui::SliderProto_TextEntryBoxPosition value);

  // @@protoc_insertion_point(class_scope:rec.gui.SliderProto)
 private:
  inline void set_has_caption();
  inline void clear_has_caption();
  inline void set_has_caption_size();
  inline void clear_has_caption_size();
  inline void set_has_text_entry_box_width();
  inline void clear_has_text_entry_box_width();
  inline void set_has_text_entry_box_height();
  inline void clear_has_text_entry_box_height();
  inline void set_has_detent();
  inline void clear_has_detent();
  inline void set_has_detent_radius();
  inline void clear_has_detent_radius();
  inline void set_has_text_suffix();
  inline void clear_has_text_suffix();
  inline void set_has_minimum();
  inline void clear_has_minimum();
  inline void set_has_maximum();
  inline void clear_has_maximum();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_text_entry_box_position();
  inline void clear_has_text_entry_box_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* caption_;
  ::std::string* caption_size_;
  static ::std::string* _default_caption_size_;
  ::std::string* text_entry_box_width_;
  static ::std::string* _default_text_entry_box_width_;
  ::std::string* text_entry_box_height_;
  static ::std::string* _default_text_entry_box_height_;
  ::std::string* detent_;
  ::std::string* detent_radius_;
  ::std::string* text_suffix_;
  ::std::string* minimum_;
  ::std::string* maximum_;
  ::std::string* interval_;
  int style_;
  int text_entry_box_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fSlider_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fSlider_2eproto();

  void InitAsDefaultInstance();
  static SliderProto* default_instance_;
};
// ===================================================================


// ===================================================================

// SliderProto

// optional string caption = 1;
inline bool SliderProto::has_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliderProto::set_has_caption() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliderProto::clear_has_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliderProto::clear_caption() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    caption_->clear();
  }
  clear_has_caption();
}
inline const ::std::string& SliderProto::caption() const {
  return *caption_;
}
inline void SliderProto::set_caption(const ::std::string& value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void SliderProto::set_caption(const char* value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void SliderProto::set_caption(const char* value, size_t size) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_caption() {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  return caption_;
}
inline ::std::string* SliderProto::release_caption() {
  clear_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caption_;
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_caption(::std::string* caption) {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (caption) {
    set_has_caption();
    caption_ = caption;
  } else {
    clear_has_caption();
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string caption_size = 2 [default = "45"];
inline bool SliderProto::has_caption_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SliderProto::set_has_caption_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SliderProto::clear_has_caption_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SliderProto::clear_caption_size() {
  if (caption_size_ != _default_caption_size_) {
    caption_size_->assign(*_default_caption_size_);
  }
  clear_has_caption_size();
}
inline const ::std::string& SliderProto::caption_size() const {
  return *caption_size_;
}
inline void SliderProto::set_caption_size(const ::std::string& value) {
  set_has_caption_size();
  if (caption_size_ == _default_caption_size_) {
    caption_size_ = new ::std::string;
  }
  caption_size_->assign(value);
}
inline void SliderProto::set_caption_size(const char* value) {
  set_has_caption_size();
  if (caption_size_ == _default_caption_size_) {
    caption_size_ = new ::std::string;
  }
  caption_size_->assign(value);
}
inline void SliderProto::set_caption_size(const char* value, size_t size) {
  set_has_caption_size();
  if (caption_size_ == _default_caption_size_) {
    caption_size_ = new ::std::string;
  }
  caption_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_caption_size() {
  set_has_caption_size();
  if (caption_size_ == _default_caption_size_) {
    caption_size_ = new ::std::string(*_default_caption_size_);
  }
  return caption_size_;
}
inline ::std::string* SliderProto::release_caption_size() {
  clear_has_caption_size();
  if (caption_size_ == _default_caption_size_) {
    return NULL;
  } else {
    ::std::string* temp = caption_size_;
    caption_size_ = const_cast< ::std::string*>(_default_caption_size_);
    return temp;
  }
}
inline void SliderProto::set_allocated_caption_size(::std::string* caption_size) {
  if (caption_size_ != _default_caption_size_) {
    delete caption_size_;
  }
  if (caption_size) {
    set_has_caption_size();
    caption_size_ = caption_size;
  } else {
    clear_has_caption_size();
    caption_size_ = const_cast< ::std::string*>(_default_caption_size_);
  }
}

// optional string text_entry_box_width = 4 [default = "80"];
inline bool SliderProto::has_text_entry_box_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliderProto::set_has_text_entry_box_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliderProto::clear_has_text_entry_box_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliderProto::clear_text_entry_box_width() {
  if (text_entry_box_width_ != _default_text_entry_box_width_) {
    text_entry_box_width_->assign(*_default_text_entry_box_width_);
  }
  clear_has_text_entry_box_width();
}
inline const ::std::string& SliderProto::text_entry_box_width() const {
  return *text_entry_box_width_;
}
inline void SliderProto::set_text_entry_box_width(const ::std::string& value) {
  set_has_text_entry_box_width();
  if (text_entry_box_width_ == _default_text_entry_box_width_) {
    text_entry_box_width_ = new ::std::string;
  }
  text_entry_box_width_->assign(value);
}
inline void SliderProto::set_text_entry_box_width(const char* value) {
  set_has_text_entry_box_width();
  if (text_entry_box_width_ == _default_text_entry_box_width_) {
    text_entry_box_width_ = new ::std::string;
  }
  text_entry_box_width_->assign(value);
}
inline void SliderProto::set_text_entry_box_width(const char* value, size_t size) {
  set_has_text_entry_box_width();
  if (text_entry_box_width_ == _default_text_entry_box_width_) {
    text_entry_box_width_ = new ::std::string;
  }
  text_entry_box_width_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_text_entry_box_width() {
  set_has_text_entry_box_width();
  if (text_entry_box_width_ == _default_text_entry_box_width_) {
    text_entry_box_width_ = new ::std::string(*_default_text_entry_box_width_);
  }
  return text_entry_box_width_;
}
inline ::std::string* SliderProto::release_text_entry_box_width() {
  clear_has_text_entry_box_width();
  if (text_entry_box_width_ == _default_text_entry_box_width_) {
    return NULL;
  } else {
    ::std::string* temp = text_entry_box_width_;
    text_entry_box_width_ = const_cast< ::std::string*>(_default_text_entry_box_width_);
    return temp;
  }
}
inline void SliderProto::set_allocated_text_entry_box_width(::std::string* text_entry_box_width) {
  if (text_entry_box_width_ != _default_text_entry_box_width_) {
    delete text_entry_box_width_;
  }
  if (text_entry_box_width) {
    set_has_text_entry_box_width();
    text_entry_box_width_ = text_entry_box_width;
  } else {
    clear_has_text_entry_box_width();
    text_entry_box_width_ = const_cast< ::std::string*>(_default_text_entry_box_width_);
  }
}

// optional string text_entry_box_height = 5 [default = "16"];
inline bool SliderProto::has_text_entry_box_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SliderProto::set_has_text_entry_box_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SliderProto::clear_has_text_entry_box_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SliderProto::clear_text_entry_box_height() {
  if (text_entry_box_height_ != _default_text_entry_box_height_) {
    text_entry_box_height_->assign(*_default_text_entry_box_height_);
  }
  clear_has_text_entry_box_height();
}
inline const ::std::string& SliderProto::text_entry_box_height() const {
  return *text_entry_box_height_;
}
inline void SliderProto::set_text_entry_box_height(const ::std::string& value) {
  set_has_text_entry_box_height();
  if (text_entry_box_height_ == _default_text_entry_box_height_) {
    text_entry_box_height_ = new ::std::string;
  }
  text_entry_box_height_->assign(value);
}
inline void SliderProto::set_text_entry_box_height(const char* value) {
  set_has_text_entry_box_height();
  if (text_entry_box_height_ == _default_text_entry_box_height_) {
    text_entry_box_height_ = new ::std::string;
  }
  text_entry_box_height_->assign(value);
}
inline void SliderProto::set_text_entry_box_height(const char* value, size_t size) {
  set_has_text_entry_box_height();
  if (text_entry_box_height_ == _default_text_entry_box_height_) {
    text_entry_box_height_ = new ::std::string;
  }
  text_entry_box_height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_text_entry_box_height() {
  set_has_text_entry_box_height();
  if (text_entry_box_height_ == _default_text_entry_box_height_) {
    text_entry_box_height_ = new ::std::string(*_default_text_entry_box_height_);
  }
  return text_entry_box_height_;
}
inline ::std::string* SliderProto::release_text_entry_box_height() {
  clear_has_text_entry_box_height();
  if (text_entry_box_height_ == _default_text_entry_box_height_) {
    return NULL;
  } else {
    ::std::string* temp = text_entry_box_height_;
    text_entry_box_height_ = const_cast< ::std::string*>(_default_text_entry_box_height_);
    return temp;
  }
}
inline void SliderProto::set_allocated_text_entry_box_height(::std::string* text_entry_box_height) {
  if (text_entry_box_height_ != _default_text_entry_box_height_) {
    delete text_entry_box_height_;
  }
  if (text_entry_box_height) {
    set_has_text_entry_box_height();
    text_entry_box_height_ = text_entry_box_height;
  } else {
    clear_has_text_entry_box_height();
    text_entry_box_height_ = const_cast< ::std::string*>(_default_text_entry_box_height_);
  }
}

// optional string detent = 6;
inline bool SliderProto::has_detent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SliderProto::set_has_detent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SliderProto::clear_has_detent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SliderProto::clear_detent() {
  if (detent_ != &::google::protobuf::internal::kEmptyString) {
    detent_->clear();
  }
  clear_has_detent();
}
inline const ::std::string& SliderProto::detent() const {
  return *detent_;
}
inline void SliderProto::set_detent(const ::std::string& value) {
  set_has_detent();
  if (detent_ == &::google::protobuf::internal::kEmptyString) {
    detent_ = new ::std::string;
  }
  detent_->assign(value);
}
inline void SliderProto::set_detent(const char* value) {
  set_has_detent();
  if (detent_ == &::google::protobuf::internal::kEmptyString) {
    detent_ = new ::std::string;
  }
  detent_->assign(value);
}
inline void SliderProto::set_detent(const char* value, size_t size) {
  set_has_detent();
  if (detent_ == &::google::protobuf::internal::kEmptyString) {
    detent_ = new ::std::string;
  }
  detent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_detent() {
  set_has_detent();
  if (detent_ == &::google::protobuf::internal::kEmptyString) {
    detent_ = new ::std::string;
  }
  return detent_;
}
inline ::std::string* SliderProto::release_detent() {
  clear_has_detent();
  if (detent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = detent_;
    detent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_detent(::std::string* detent) {
  if (detent_ != &::google::protobuf::internal::kEmptyString) {
    delete detent_;
  }
  if (detent) {
    set_has_detent();
    detent_ = detent;
  } else {
    clear_has_detent();
    detent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string detent_radius = 7;
inline bool SliderProto::has_detent_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SliderProto::set_has_detent_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SliderProto::clear_has_detent_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SliderProto::clear_detent_radius() {
  if (detent_radius_ != &::google::protobuf::internal::kEmptyString) {
    detent_radius_->clear();
  }
  clear_has_detent_radius();
}
inline const ::std::string& SliderProto::detent_radius() const {
  return *detent_radius_;
}
inline void SliderProto::set_detent_radius(const ::std::string& value) {
  set_has_detent_radius();
  if (detent_radius_ == &::google::protobuf::internal::kEmptyString) {
    detent_radius_ = new ::std::string;
  }
  detent_radius_->assign(value);
}
inline void SliderProto::set_detent_radius(const char* value) {
  set_has_detent_radius();
  if (detent_radius_ == &::google::protobuf::internal::kEmptyString) {
    detent_radius_ = new ::std::string;
  }
  detent_radius_->assign(value);
}
inline void SliderProto::set_detent_radius(const char* value, size_t size) {
  set_has_detent_radius();
  if (detent_radius_ == &::google::protobuf::internal::kEmptyString) {
    detent_radius_ = new ::std::string;
  }
  detent_radius_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_detent_radius() {
  set_has_detent_radius();
  if (detent_radius_ == &::google::protobuf::internal::kEmptyString) {
    detent_radius_ = new ::std::string;
  }
  return detent_radius_;
}
inline ::std::string* SliderProto::release_detent_radius() {
  clear_has_detent_radius();
  if (detent_radius_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = detent_radius_;
    detent_radius_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_detent_radius(::std::string* detent_radius) {
  if (detent_radius_ != &::google::protobuf::internal::kEmptyString) {
    delete detent_radius_;
  }
  if (detent_radius) {
    set_has_detent_radius();
    detent_radius_ = detent_radius;
  } else {
    clear_has_detent_radius();
    detent_radius_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string text_suffix = 8;
inline bool SliderProto::has_text_suffix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SliderProto::set_has_text_suffix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SliderProto::clear_has_text_suffix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SliderProto::clear_text_suffix() {
  if (text_suffix_ != &::google::protobuf::internal::kEmptyString) {
    text_suffix_->clear();
  }
  clear_has_text_suffix();
}
inline const ::std::string& SliderProto::text_suffix() const {
  return *text_suffix_;
}
inline void SliderProto::set_text_suffix(const ::std::string& value) {
  set_has_text_suffix();
  if (text_suffix_ == &::google::protobuf::internal::kEmptyString) {
    text_suffix_ = new ::std::string;
  }
  text_suffix_->assign(value);
}
inline void SliderProto::set_text_suffix(const char* value) {
  set_has_text_suffix();
  if (text_suffix_ == &::google::protobuf::internal::kEmptyString) {
    text_suffix_ = new ::std::string;
  }
  text_suffix_->assign(value);
}
inline void SliderProto::set_text_suffix(const char* value, size_t size) {
  set_has_text_suffix();
  if (text_suffix_ == &::google::protobuf::internal::kEmptyString) {
    text_suffix_ = new ::std::string;
  }
  text_suffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_text_suffix() {
  set_has_text_suffix();
  if (text_suffix_ == &::google::protobuf::internal::kEmptyString) {
    text_suffix_ = new ::std::string;
  }
  return text_suffix_;
}
inline ::std::string* SliderProto::release_text_suffix() {
  clear_has_text_suffix();
  if (text_suffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_suffix_;
    text_suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_text_suffix(::std::string* text_suffix) {
  if (text_suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete text_suffix_;
  }
  if (text_suffix) {
    set_has_text_suffix();
    text_suffix_ = text_suffix;
  } else {
    clear_has_text_suffix();
    text_suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string minimum = 9;
inline bool SliderProto::has_minimum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SliderProto::set_has_minimum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SliderProto::clear_has_minimum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SliderProto::clear_minimum() {
  if (minimum_ != &::google::protobuf::internal::kEmptyString) {
    minimum_->clear();
  }
  clear_has_minimum();
}
inline const ::std::string& SliderProto::minimum() const {
  return *minimum_;
}
inline void SliderProto::set_minimum(const ::std::string& value) {
  set_has_minimum();
  if (minimum_ == &::google::protobuf::internal::kEmptyString) {
    minimum_ = new ::std::string;
  }
  minimum_->assign(value);
}
inline void SliderProto::set_minimum(const char* value) {
  set_has_minimum();
  if (minimum_ == &::google::protobuf::internal::kEmptyString) {
    minimum_ = new ::std::string;
  }
  minimum_->assign(value);
}
inline void SliderProto::set_minimum(const char* value, size_t size) {
  set_has_minimum();
  if (minimum_ == &::google::protobuf::internal::kEmptyString) {
    minimum_ = new ::std::string;
  }
  minimum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_minimum() {
  set_has_minimum();
  if (minimum_ == &::google::protobuf::internal::kEmptyString) {
    minimum_ = new ::std::string;
  }
  return minimum_;
}
inline ::std::string* SliderProto::release_minimum() {
  clear_has_minimum();
  if (minimum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minimum_;
    minimum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_minimum(::std::string* minimum) {
  if (minimum_ != &::google::protobuf::internal::kEmptyString) {
    delete minimum_;
  }
  if (minimum) {
    set_has_minimum();
    minimum_ = minimum;
  } else {
    clear_has_minimum();
    minimum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maximum = 10;
inline bool SliderProto::has_maximum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SliderProto::set_has_maximum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SliderProto::clear_has_maximum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SliderProto::clear_maximum() {
  if (maximum_ != &::google::protobuf::internal::kEmptyString) {
    maximum_->clear();
  }
  clear_has_maximum();
}
inline const ::std::string& SliderProto::maximum() const {
  return *maximum_;
}
inline void SliderProto::set_maximum(const ::std::string& value) {
  set_has_maximum();
  if (maximum_ == &::google::protobuf::internal::kEmptyString) {
    maximum_ = new ::std::string;
  }
  maximum_->assign(value);
}
inline void SliderProto::set_maximum(const char* value) {
  set_has_maximum();
  if (maximum_ == &::google::protobuf::internal::kEmptyString) {
    maximum_ = new ::std::string;
  }
  maximum_->assign(value);
}
inline void SliderProto::set_maximum(const char* value, size_t size) {
  set_has_maximum();
  if (maximum_ == &::google::protobuf::internal::kEmptyString) {
    maximum_ = new ::std::string;
  }
  maximum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_maximum() {
  set_has_maximum();
  if (maximum_ == &::google::protobuf::internal::kEmptyString) {
    maximum_ = new ::std::string;
  }
  return maximum_;
}
inline ::std::string* SliderProto::release_maximum() {
  clear_has_maximum();
  if (maximum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maximum_;
    maximum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_maximum(::std::string* maximum) {
  if (maximum_ != &::google::protobuf::internal::kEmptyString) {
    delete maximum_;
  }
  if (maximum) {
    set_has_maximum();
    maximum_ = maximum;
  } else {
    clear_has_maximum();
    maximum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string interval = 11;
inline bool SliderProto::has_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SliderProto::set_has_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SliderProto::clear_has_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SliderProto::clear_interval() {
  if (interval_ != &::google::protobuf::internal::kEmptyString) {
    interval_->clear();
  }
  clear_has_interval();
}
inline const ::std::string& SliderProto::interval() const {
  return *interval_;
}
inline void SliderProto::set_interval(const ::std::string& value) {
  set_has_interval();
  if (interval_ == &::google::protobuf::internal::kEmptyString) {
    interval_ = new ::std::string;
  }
  interval_->assign(value);
}
inline void SliderProto::set_interval(const char* value) {
  set_has_interval();
  if (interval_ == &::google::protobuf::internal::kEmptyString) {
    interval_ = new ::std::string;
  }
  interval_->assign(value);
}
inline void SliderProto::set_interval(const char* value, size_t size) {
  set_has_interval();
  if (interval_ == &::google::protobuf::internal::kEmptyString) {
    interval_ = new ::std::string;
  }
  interval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SliderProto::mutable_interval() {
  set_has_interval();
  if (interval_ == &::google::protobuf::internal::kEmptyString) {
    interval_ = new ::std::string;
  }
  return interval_;
}
inline ::std::string* SliderProto::release_interval() {
  clear_has_interval();
  if (interval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interval_;
    interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SliderProto::set_allocated_interval(::std::string* interval) {
  if (interval_ != &::google::protobuf::internal::kEmptyString) {
    delete interval_;
  }
  if (interval) {
    set_has_interval();
    interval_ = interval;
  } else {
    clear_has_interval();
    interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .rec.gui.SliderProto.Style style = 21;
inline bool SliderProto::has_style() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SliderProto::set_has_style() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SliderProto::clear_has_style() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SliderProto::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::rec::gui::SliderProto_Style SliderProto::style() const {
  return static_cast< ::rec::gui::SliderProto_Style >(style_);
}
inline void SliderProto::set_style(::rec::gui::SliderProto_Style value) {
  assert(::rec::gui::SliderProto_Style_IsValid(value));
  set_has_style();
  style_ = value;
}

// optional .rec.gui.SliderProto.TextEntryBoxPosition text_entry_box_position = 22;
inline bool SliderProto::has_text_entry_box_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SliderProto::set_has_text_entry_box_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SliderProto::clear_has_text_entry_box_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SliderProto::clear_text_entry_box_position() {
  text_entry_box_position_ = 0;
  clear_has_text_entry_box_position();
}
inline ::rec::gui::SliderProto_TextEntryBoxPosition SliderProto::text_entry_box_position() const {
  return static_cast< ::rec::gui::SliderProto_TextEntryBoxPosition >(text_entry_box_position_);
}
inline void SliderProto::set_text_entry_box_position(::rec::gui::SliderProto_TextEntryBoxPosition value) {
  assert(::rec::gui::SliderProto_TextEntryBoxPosition_IsValid(value));
  set_has_text_entry_box_position();
  text_entry_box_position_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::SliderProto_Style>() {
  return ::rec::gui::SliderProto_Style_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rec::gui::SliderProto_TextEntryBoxPosition>() {
  return ::rec::gui::SliderProto_TextEntryBoxPosition_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fSlider_2eproto__INCLUDED
