// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/proto/Size.proto

#ifndef PROTOBUF_rec_2fgui_2fproto_2fSize_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fproto_2fSize_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fproto_2fSize_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fproto_2fSize_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fproto_2fSize_2eproto();

class Size;

// ===================================================================

class Size : public ::google::protobuf::Message {
 public:
  Size();
  virtual ~Size();

  Size(const Size& from);

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size& default_instance();

  void Swap(Size* other);

  // implements Message ----------------------------------------------

  Size* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fixed = 1;
  inline bool has_fixed() const;
  inline void clear_fixed();
  static const int kFixedFieldNumber = 1;
  inline const ::std::string& fixed() const;
  inline void set_fixed(const ::std::string& value);
  inline void set_fixed(const char* value);
  inline void set_fixed(const char* value, size_t size);
  inline ::std::string* mutable_fixed();
  inline ::std::string* release_fixed();
  inline void set_allocated_fixed(::std::string* fixed);

  // optional string preferred = 2 [default = "-1.0"];
  inline bool has_preferred() const;
  inline void clear_preferred();
  static const int kPreferredFieldNumber = 2;
  inline const ::std::string& preferred() const;
  inline void set_preferred(const ::std::string& value);
  inline void set_preferred(const char* value);
  inline void set_preferred(const char* value, size_t size);
  inline ::std::string* mutable_preferred();
  inline ::std::string* release_preferred();
  inline void set_allocated_preferred(::std::string* preferred);

  // optional string min = 3;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline const ::std::string& min() const;
  inline void set_min(const ::std::string& value);
  inline void set_min(const char* value);
  inline void set_min(const char* value, size_t size);
  inline ::std::string* mutable_min();
  inline ::std::string* release_min();
  inline void set_allocated_min(::std::string* min);

  // optional string max = 4 [default = "-1.0"];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline const ::std::string& max() const;
  inline void set_max(const ::std::string& value);
  inline void set_max(const char* value);
  inline void set_max(const char* value, size_t size);
  inline ::std::string* mutable_max();
  inline ::std::string* release_max();
  inline void set_allocated_max(::std::string* max);

  // @@protoc_insertion_point(class_scope:rec.gui.Size)
 private:
  inline void set_has_fixed();
  inline void clear_has_fixed();
  inline void set_has_preferred();
  inline void clear_has_preferred();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fixed_;
  ::std::string* preferred_;
  static ::std::string* _default_preferred_;
  ::std::string* min_;
  ::std::string* max_;
  static ::std::string* _default_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fproto_2fSize_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fproto_2fSize_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fproto_2fSize_2eproto();

  void InitAsDefaultInstance();
  static Size* default_instance_;
};
// ===================================================================


// ===================================================================

// Size

// optional string fixed = 1;
inline bool Size::has_fixed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Size::set_has_fixed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Size::clear_has_fixed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Size::clear_fixed() {
  if (fixed_ != &::google::protobuf::internal::kEmptyString) {
    fixed_->clear();
  }
  clear_has_fixed();
}
inline const ::std::string& Size::fixed() const {
  return *fixed_;
}
inline void Size::set_fixed(const ::std::string& value) {
  set_has_fixed();
  if (fixed_ == &::google::protobuf::internal::kEmptyString) {
    fixed_ = new ::std::string;
  }
  fixed_->assign(value);
}
inline void Size::set_fixed(const char* value) {
  set_has_fixed();
  if (fixed_ == &::google::protobuf::internal::kEmptyString) {
    fixed_ = new ::std::string;
  }
  fixed_->assign(value);
}
inline void Size::set_fixed(const char* value, size_t size) {
  set_has_fixed();
  if (fixed_ == &::google::protobuf::internal::kEmptyString) {
    fixed_ = new ::std::string;
  }
  fixed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Size::mutable_fixed() {
  set_has_fixed();
  if (fixed_ == &::google::protobuf::internal::kEmptyString) {
    fixed_ = new ::std::string;
  }
  return fixed_;
}
inline ::std::string* Size::release_fixed() {
  clear_has_fixed();
  if (fixed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fixed_;
    fixed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Size::set_allocated_fixed(::std::string* fixed) {
  if (fixed_ != &::google::protobuf::internal::kEmptyString) {
    delete fixed_;
  }
  if (fixed) {
    set_has_fixed();
    fixed_ = fixed;
  } else {
    clear_has_fixed();
    fixed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string preferred = 2 [default = "-1.0"];
inline bool Size::has_preferred() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Size::set_has_preferred() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Size::clear_has_preferred() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Size::clear_preferred() {
  if (preferred_ != _default_preferred_) {
    preferred_->assign(*_default_preferred_);
  }
  clear_has_preferred();
}
inline const ::std::string& Size::preferred() const {
  return *preferred_;
}
inline void Size::set_preferred(const ::std::string& value) {
  set_has_preferred();
  if (preferred_ == _default_preferred_) {
    preferred_ = new ::std::string;
  }
  preferred_->assign(value);
}
inline void Size::set_preferred(const char* value) {
  set_has_preferred();
  if (preferred_ == _default_preferred_) {
    preferred_ = new ::std::string;
  }
  preferred_->assign(value);
}
inline void Size::set_preferred(const char* value, size_t size) {
  set_has_preferred();
  if (preferred_ == _default_preferred_) {
    preferred_ = new ::std::string;
  }
  preferred_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Size::mutable_preferred() {
  set_has_preferred();
  if (preferred_ == _default_preferred_) {
    preferred_ = new ::std::string(*_default_preferred_);
  }
  return preferred_;
}
inline ::std::string* Size::release_preferred() {
  clear_has_preferred();
  if (preferred_ == _default_preferred_) {
    return NULL;
  } else {
    ::std::string* temp = preferred_;
    preferred_ = const_cast< ::std::string*>(_default_preferred_);
    return temp;
  }
}
inline void Size::set_allocated_preferred(::std::string* preferred) {
  if (preferred_ != _default_preferred_) {
    delete preferred_;
  }
  if (preferred) {
    set_has_preferred();
    preferred_ = preferred;
  } else {
    clear_has_preferred();
    preferred_ = const_cast< ::std::string*>(_default_preferred_);
  }
}

// optional string min = 3;
inline bool Size::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Size::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Size::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Size::clear_min() {
  if (min_ != &::google::protobuf::internal::kEmptyString) {
    min_->clear();
  }
  clear_has_min();
}
inline const ::std::string& Size::min() const {
  return *min_;
}
inline void Size::set_min(const ::std::string& value) {
  set_has_min();
  if (min_ == &::google::protobuf::internal::kEmptyString) {
    min_ = new ::std::string;
  }
  min_->assign(value);
}
inline void Size::set_min(const char* value) {
  set_has_min();
  if (min_ == &::google::protobuf::internal::kEmptyString) {
    min_ = new ::std::string;
  }
  min_->assign(value);
}
inline void Size::set_min(const char* value, size_t size) {
  set_has_min();
  if (min_ == &::google::protobuf::internal::kEmptyString) {
    min_ = new ::std::string;
  }
  min_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Size::mutable_min() {
  set_has_min();
  if (min_ == &::google::protobuf::internal::kEmptyString) {
    min_ = new ::std::string;
  }
  return min_;
}
inline ::std::string* Size::release_min() {
  clear_has_min();
  if (min_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = min_;
    min_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Size::set_allocated_min(::std::string* min) {
  if (min_ != &::google::protobuf::internal::kEmptyString) {
    delete min_;
  }
  if (min) {
    set_has_min();
    min_ = min;
  } else {
    clear_has_min();
    min_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string max = 4 [default = "-1.0"];
inline bool Size::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Size::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Size::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Size::clear_max() {
  if (max_ != _default_max_) {
    max_->assign(*_default_max_);
  }
  clear_has_max();
}
inline const ::std::string& Size::max() const {
  return *max_;
}
inline void Size::set_max(const ::std::string& value) {
  set_has_max();
  if (max_ == _default_max_) {
    max_ = new ::std::string;
  }
  max_->assign(value);
}
inline void Size::set_max(const char* value) {
  set_has_max();
  if (max_ == _default_max_) {
    max_ = new ::std::string;
  }
  max_->assign(value);
}
inline void Size::set_max(const char* value, size_t size) {
  set_has_max();
  if (max_ == _default_max_) {
    max_ = new ::std::string;
  }
  max_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Size::mutable_max() {
  set_has_max();
  if (max_ == _default_max_) {
    max_ = new ::std::string(*_default_max_);
  }
  return max_;
}
inline ::std::string* Size::release_max() {
  clear_has_max();
  if (max_ == _default_max_) {
    return NULL;
  } else {
    ::std::string* temp = max_;
    max_ = const_cast< ::std::string*>(_default_max_);
    return temp;
  }
}
inline void Size::set_allocated_max(::std::string* max) {
  if (max_ != _default_max_) {
    delete max_;
  }
  if (max) {
    set_has_max();
    max_ = max;
  } else {
    clear_has_max();
    max_ = const_cast< ::std::string*>(_default_max_);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fproto_2fSize_2eproto__INCLUDED
