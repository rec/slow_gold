// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/DialogFiles.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/DialogFiles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

namespace {

const ::google::protobuf::Descriptor* DialogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DialogFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* DialogFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DialogFiles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fDialogFiles_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/DialogFiles.proto");
  GOOGLE_CHECK(file != NULL);
  DialogFile_descriptor_ = file->message_type(0);
  static const int DialogFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFile, dialog_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFile, file_name_),
  };
  DialogFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DialogFile_descriptor_,
      DialogFile::default_instance_,
      DialogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DialogFile));
  DialogFiles_descriptor_ = file->message_type(1);
  static const int DialogFiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFiles, dialog_file_),
  };
  DialogFiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DialogFiles_descriptor_,
      DialogFiles::default_instance_,
      DialogFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogFiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DialogFiles));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fDialogFiles_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DialogFile_descriptor_, &DialogFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DialogFiles_descriptor_, &DialogFiles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fDialogFiles_2eproto() {
  delete DialogFile::default_instance_;
  delete DialogFile_reflection_;
  delete DialogFiles::default_instance_;
  delete DialogFiles_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/gui/DialogFiles.proto\022\007rec.gui\"4\n\n"
    "DialogFile\022\023\n\013dialog_name\030\001 \001(\t\022\021\n\tfile_"
    "name\030\002 \001(\t\"7\n\013DialogFiles\022(\n\013dialog_file"
    "\030\001 \003(\0132\023.rec.gui.DialogFile", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/DialogFiles.proto", &protobuf_RegisterTypes);
  DialogFile::default_instance_ = new DialogFile();
  DialogFiles::default_instance_ = new DialogFiles();
  DialogFile::default_instance_->InitAsDefaultInstance();
  DialogFiles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fDialogFiles_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fDialogFiles_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fDialogFiles_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fDialogFiles_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DialogFile::kDialogNameFieldNumber;
const int DialogFile::kFileNameFieldNumber;
#endif  // !_MSC_VER

DialogFile::DialogFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DialogFile::InitAsDefaultInstance() {
}

DialogFile::DialogFile(const DialogFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DialogFile::SharedCtor() {
  _cached_size_ = 0;
  dialog_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DialogFile::~DialogFile() {
  SharedDtor();
}

void DialogFile::SharedDtor() {
  if (dialog_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dialog_name_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void DialogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DialogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DialogFile_descriptor_;
}

const DialogFile& DialogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  return *default_instance_;
}

DialogFile* DialogFile::default_instance_ = NULL;

DialogFile* DialogFile::New() const {
  return new DialogFile;
}

void DialogFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dialog_name()) {
      if (dialog_name_ != &::google::protobuf::internal::kEmptyString) {
        dialog_name_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DialogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dialog_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dialog_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dialog_name().data(), this->dialog_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DialogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dialog_name = 1;
  if (has_dialog_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dialog_name().data(), this->dialog_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dialog_name(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DialogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dialog_name = 1;
  if (has_dialog_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dialog_name().data(), this->dialog_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dialog_name(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DialogFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dialog_name = 1;
    if (has_dialog_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dialog_name());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DialogFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DialogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DialogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DialogFile::MergeFrom(const DialogFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dialog_name()) {
      set_dialog_name(from.dialog_name());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DialogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DialogFile::CopyFrom(const DialogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogFile::IsInitialized() const {

  return true;
}

void DialogFile::Swap(DialogFile* other) {
  if (other != this) {
    std::swap(dialog_name_, other->dialog_name_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DialogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DialogFile_descriptor_;
  metadata.reflection = DialogFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DialogFiles::kDialogFileFieldNumber;
#endif  // !_MSC_VER

DialogFiles::DialogFiles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DialogFiles::InitAsDefaultInstance() {
}

DialogFiles::DialogFiles(const DialogFiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DialogFiles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DialogFiles::~DialogFiles() {
  SharedDtor();
}

void DialogFiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DialogFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DialogFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DialogFiles_descriptor_;
}

const DialogFiles& DialogFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  return *default_instance_;
}

DialogFiles* DialogFiles::default_instance_ = NULL;

DialogFiles* DialogFiles::New() const {
  return new DialogFiles;
}

void DialogFiles::Clear() {
  dialog_file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DialogFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.gui.DialogFile dialog_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dialog_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dialog_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dialog_file;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DialogFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.gui.DialogFile dialog_file = 1;
  for (int i = 0; i < this->dialog_file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dialog_file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DialogFiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.gui.DialogFile dialog_file = 1;
  for (int i = 0; i < this->dialog_file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dialog_file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DialogFiles::ByteSize() const {
  int total_size = 0;

  // repeated .rec.gui.DialogFile dialog_file = 1;
  total_size += 1 * this->dialog_file_size();
  for (int i = 0; i < this->dialog_file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dialog_file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DialogFiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DialogFiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DialogFiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DialogFiles::MergeFrom(const DialogFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  dialog_file_.MergeFrom(from.dialog_file_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DialogFiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DialogFiles::CopyFrom(const DialogFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogFiles::IsInitialized() const {

  return true;
}

void DialogFiles::Swap(DialogFiles* other) {
  if (other != this) {
    dialog_file_.Swap(&other->dialog_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DialogFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DialogFiles_descriptor_;
  metadata.reflection = DialogFiles_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
