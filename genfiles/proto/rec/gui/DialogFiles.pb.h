// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/DialogFiles.proto

#ifndef PROTOBUF_rec_2fgui_2fDialogFiles_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fDialogFiles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fDialogFiles_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fDialogFiles_2eproto();

class DialogFile;
class DialogFiles;

// ===================================================================

class DialogFile : public ::google::protobuf::Message {
 public:
  DialogFile();
  virtual ~DialogFile();

  DialogFile(const DialogFile& from);

  inline DialogFile& operator=(const DialogFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogFile& default_instance();

  void Swap(DialogFile* other);

  // implements Message ----------------------------------------------

  DialogFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DialogFile& from);
  void MergeFrom(const DialogFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dialog_name = 1;
  inline bool has_dialog_name() const;
  inline void clear_dialog_name();
  static const int kDialogNameFieldNumber = 1;
  inline const ::std::string& dialog_name() const;
  inline void set_dialog_name(const ::std::string& value);
  inline void set_dialog_name(const char* value);
  inline void set_dialog_name(const char* value, size_t size);
  inline ::std::string* mutable_dialog_name();
  inline ::std::string* release_dialog_name();
  inline void set_allocated_dialog_name(::std::string* dialog_name);

  // optional string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:rec.gui.DialogFile)
 private:
  inline void set_has_dialog_name();
  inline void clear_has_dialog_name();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dialog_name_;
  ::std::string* file_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fDialogFiles_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fDialogFiles_2eproto();

  void InitAsDefaultInstance();
  static DialogFile* default_instance_;
};
// -------------------------------------------------------------------

class DialogFiles : public ::google::protobuf::Message {
 public:
  DialogFiles();
  virtual ~DialogFiles();

  DialogFiles(const DialogFiles& from);

  inline DialogFiles& operator=(const DialogFiles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DialogFiles& default_instance();

  void Swap(DialogFiles* other);

  // implements Message ----------------------------------------------

  DialogFiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DialogFiles& from);
  void MergeFrom(const DialogFiles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.gui.DialogFile dialog_file = 1;
  inline int dialog_file_size() const;
  inline void clear_dialog_file();
  static const int kDialogFileFieldNumber = 1;
  inline const ::rec::gui::DialogFile& dialog_file(int index) const;
  inline ::rec::gui::DialogFile* mutable_dialog_file(int index);
  inline ::rec::gui::DialogFile* add_dialog_file();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::DialogFile >&
      dialog_file() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::DialogFile >*
      mutable_dialog_file();

  // @@protoc_insertion_point(class_scope:rec.gui.DialogFiles)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::gui::DialogFile > dialog_file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fDialogFiles_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fDialogFiles_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fDialogFiles_2eproto();

  void InitAsDefaultInstance();
  static DialogFiles* default_instance_;
};
// ===================================================================


// ===================================================================

// DialogFile

// optional string dialog_name = 1;
inline bool DialogFile::has_dialog_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DialogFile::set_has_dialog_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DialogFile::clear_has_dialog_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DialogFile::clear_dialog_name() {
  if (dialog_name_ != &::google::protobuf::internal::kEmptyString) {
    dialog_name_->clear();
  }
  clear_has_dialog_name();
}
inline const ::std::string& DialogFile::dialog_name() const {
  return *dialog_name_;
}
inline void DialogFile::set_dialog_name(const ::std::string& value) {
  set_has_dialog_name();
  if (dialog_name_ == &::google::protobuf::internal::kEmptyString) {
    dialog_name_ = new ::std::string;
  }
  dialog_name_->assign(value);
}
inline void DialogFile::set_dialog_name(const char* value) {
  set_has_dialog_name();
  if (dialog_name_ == &::google::protobuf::internal::kEmptyString) {
    dialog_name_ = new ::std::string;
  }
  dialog_name_->assign(value);
}
inline void DialogFile::set_dialog_name(const char* value, size_t size) {
  set_has_dialog_name();
  if (dialog_name_ == &::google::protobuf::internal::kEmptyString) {
    dialog_name_ = new ::std::string;
  }
  dialog_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DialogFile::mutable_dialog_name() {
  set_has_dialog_name();
  if (dialog_name_ == &::google::protobuf::internal::kEmptyString) {
    dialog_name_ = new ::std::string;
  }
  return dialog_name_;
}
inline ::std::string* DialogFile::release_dialog_name() {
  clear_has_dialog_name();
  if (dialog_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dialog_name_;
    dialog_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DialogFile::set_allocated_dialog_name(::std::string* dialog_name) {
  if (dialog_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dialog_name_;
  }
  if (dialog_name) {
    set_has_dialog_name();
    dialog_name_ = dialog_name;
  } else {
    clear_has_dialog_name();
    dialog_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string file_name = 2;
inline bool DialogFile::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DialogFile::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DialogFile::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DialogFile::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& DialogFile::file_name() const {
  return *file_name_;
}
inline void DialogFile::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void DialogFile::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void DialogFile::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DialogFile::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* DialogFile::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DialogFile::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DialogFiles

// repeated .rec.gui.DialogFile dialog_file = 1;
inline int DialogFiles::dialog_file_size() const {
  return dialog_file_.size();
}
inline void DialogFiles::clear_dialog_file() {
  dialog_file_.Clear();
}
inline const ::rec::gui::DialogFile& DialogFiles::dialog_file(int index) const {
  return dialog_file_.Get(index);
}
inline ::rec::gui::DialogFile* DialogFiles::mutable_dialog_file(int index) {
  return dialog_file_.Mutable(index);
}
inline ::rec::gui::DialogFile* DialogFiles::add_dialog_file() {
  return dialog_file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::DialogFile >&
DialogFiles::dialog_file() const {
  return dialog_file_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::DialogFile >*
DialogFiles::mutable_dialog_file() {
  return &dialog_file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fDialogFiles_2eproto__INCLUDED
