// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/ThumbnailDescription.proto

#ifndef PROTOBUF_rec_2fgui_2fThumbnailDescription_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fThumbnailDescription_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/gui/Color.pb.h"
#include "rec/gui/Font.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fThumbnailDescription_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fThumbnailDescription_2eproto();

class ThreadDescription;
class ThumbnailDescription;

// ===================================================================

class ThreadDescription : public ::google::protobuf::Message {
 public:
  ThreadDescription();
  virtual ~ThreadDescription();
  
  ThreadDescription(const ThreadDescription& from);
  
  inline ThreadDescription& operator=(const ThreadDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadDescription& default_instance();
  
  void Swap(ThreadDescription* other);
  
  // implements Message ----------------------------------------------
  
  ThreadDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThreadDescription& from);
  void MergeFrom(const ThreadDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 priority = 1 [default = 4];
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 1;
  inline ::google::protobuf::uint32 priority() const;
  inline void set_priority(::google::protobuf::uint32 value);
  
  // optional uint32 period = 2 [default = 40];
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 2;
  inline ::google::protobuf::uint32 period() const;
  inline void set_period(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.ThreadDescription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 priority_;
  ::google::protobuf::uint32 period_;
  friend void  protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fThumbnailDescription_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ThreadDescription* default_instance_;
};
// -------------------------------------------------------------------

class ThumbnailDescription : public ::google::protobuf::Message {
 public:
  ThumbnailDescription();
  virtual ~ThumbnailDescription();
  
  ThumbnailDescription(const ThumbnailDescription& from);
  
  inline ThumbnailDescription& operator=(const ThumbnailDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThumbnailDescription& default_instance();
  
  void Swap(ThumbnailDescription* other);
  
  // implements Message ----------------------------------------------
  
  ThumbnailDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThumbnailDescription& from);
  void MergeFrom(const ThumbnailDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.gui.color.Colors colors = 1;
  inline bool has_colors() const;
  inline void clear_colors();
  static const int kColorsFieldNumber = 1;
  inline const ::rec::gui::color::Colors& colors() const;
  inline ::rec::gui::color::Colors* mutable_colors();
  
  // optional uint32 cursor_thickness = 2 [default = 1];
  inline bool has_cursor_thickness() const;
  inline void clear_cursor_thickness();
  static const int kCursorThicknessFieldNumber = 2;
  inline ::google::protobuf::uint32 cursor_thickness() const;
  inline void set_cursor_thickness(::google::protobuf::uint32 value);
  
  // optional uint32 margin = 3 [default = 2];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 3;
  inline ::google::protobuf::uint32 margin() const;
  inline void set_margin(::google::protobuf::uint32 value);
  
  // optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
  inline bool has_source_samples_per_thumbnail_sample() const;
  inline void clear_source_samples_per_thumbnail_sample();
  static const int kSourceSamplesPerThumbnailSampleFieldNumber = 4;
  inline ::google::protobuf::uint32 source_samples_per_thumbnail_sample() const;
  inline void set_source_samples_per_thumbnail_sample(::google::protobuf::uint32 value);
  
  // optional uint32 thumbnail_cache = 5 [default = 5];
  inline bool has_thumbnail_cache() const;
  inline void clear_thumbnail_cache();
  static const int kThumbnailCacheFieldNumber = 5;
  inline ::google::protobuf::uint32 thumbnail_cache() const;
  inline void set_thumbnail_cache(::google::protobuf::uint32 value);
  
  // optional .rec.gui.ThreadDescription cursor_thread = 6;
  inline bool has_cursor_thread() const;
  inline void clear_cursor_thread();
  static const int kCursorThreadFieldNumber = 6;
  inline const ::rec::gui::ThreadDescription& cursor_thread() const;
  inline ::rec::gui::ThreadDescription* mutable_cursor_thread();
  
  // optional .rec.gui.FontDesc font = 7;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 7;
  inline const ::rec::gui::FontDesc& font() const;
  inline ::rec::gui::FontDesc* mutable_font();
  
  // optional uint32 tic_height = 8 [default = 8];
  inline bool has_tic_height() const;
  inline void clear_tic_height();
  static const int kTicHeightFieldNumber = 8;
  inline ::google::protobuf::uint32 tic_height() const;
  inline void set_tic_height(::google::protobuf::uint32 value);
  
  // optional uint32 subtic_height = 9 [default = 3];
  inline bool has_subtic_height() const;
  inline void clear_subtic_height();
  static const int kSubticHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 subtic_height() const;
  inline void set_subtic_height(::google::protobuf::uint32 value);
  
  // optional bool use_captions = 10 [default = true];
  inline bool has_use_captions() const;
  inline void clear_use_captions();
  static const int kUseCaptionsFieldNumber = 10;
  inline bool use_captions() const;
  inline void set_use_captions(bool value);
  
  // optional bool tics_at_bottom = 11 [default = true];
  inline bool has_tics_at_bottom() const;
  inline void clear_tics_at_bottom();
  static const int kTicsAtBottomFieldNumber = 11;
  inline bool tics_at_bottom() const;
  inline void set_tics_at_bottom(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.gui.ThumbnailDescription)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::gui::color::Colors* colors_;
  ::google::protobuf::uint32 cursor_thickness_;
  ::google::protobuf::uint32 margin_;
  ::google::protobuf::uint32 source_samples_per_thumbnail_sample_;
  ::google::protobuf::uint32 thumbnail_cache_;
  ::rec::gui::ThreadDescription* cursor_thread_;
  ::rec::gui::FontDesc* font_;
  ::google::protobuf::uint32 tic_height_;
  ::google::protobuf::uint32 subtic_height_;
  bool use_captions_;
  bool tics_at_bottom_;
  friend void  protobuf_AddDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fThumbnailDescription_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fThumbnailDescription_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ThumbnailDescription* default_instance_;
};
// ===================================================================


// ===================================================================

// ThreadDescription

// optional uint32 priority = 1 [default = 4];
inline bool ThreadDescription::has_priority() const {
  return _has_bit(0);
}
inline void ThreadDescription::clear_priority() {
  priority_ = 4u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 ThreadDescription::priority() const {
  return priority_;
}
inline void ThreadDescription::set_priority(::google::protobuf::uint32 value) {
  _set_bit(0);
  priority_ = value;
}

// optional uint32 period = 2 [default = 40];
inline bool ThreadDescription::has_period() const {
  return _has_bit(1);
}
inline void ThreadDescription::clear_period() {
  period_ = 40u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ThreadDescription::period() const {
  return period_;
}
inline void ThreadDescription::set_period(::google::protobuf::uint32 value) {
  _set_bit(1);
  period_ = value;
}

// -------------------------------------------------------------------

// ThumbnailDescription

// optional .rec.gui.color.Colors colors = 1;
inline bool ThumbnailDescription::has_colors() const {
  return _has_bit(0);
}
inline void ThumbnailDescription::clear_colors() {
  if (colors_ != NULL) colors_->::rec::gui::color::Colors::Clear();
  _clear_bit(0);
}
inline const ::rec::gui::color::Colors& ThumbnailDescription::colors() const {
  return colors_ != NULL ? *colors_ : *default_instance_->colors_;
}
inline ::rec::gui::color::Colors* ThumbnailDescription::mutable_colors() {
  _set_bit(0);
  if (colors_ == NULL) colors_ = new ::rec::gui::color::Colors;
  return colors_;
}

// optional uint32 cursor_thickness = 2 [default = 1];
inline bool ThumbnailDescription::has_cursor_thickness() const {
  return _has_bit(1);
}
inline void ThumbnailDescription::clear_cursor_thickness() {
  cursor_thickness_ = 1u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ThumbnailDescription::cursor_thickness() const {
  return cursor_thickness_;
}
inline void ThumbnailDescription::set_cursor_thickness(::google::protobuf::uint32 value) {
  _set_bit(1);
  cursor_thickness_ = value;
}

// optional uint32 margin = 3 [default = 2];
inline bool ThumbnailDescription::has_margin() const {
  return _has_bit(2);
}
inline void ThumbnailDescription::clear_margin() {
  margin_ = 2u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ThumbnailDescription::margin() const {
  return margin_;
}
inline void ThumbnailDescription::set_margin(::google::protobuf::uint32 value) {
  _set_bit(2);
  margin_ = value;
}

// optional uint32 source_samples_per_thumbnail_sample = 4 [default = 512];
inline bool ThumbnailDescription::has_source_samples_per_thumbnail_sample() const {
  return _has_bit(3);
}
inline void ThumbnailDescription::clear_source_samples_per_thumbnail_sample() {
  source_samples_per_thumbnail_sample_ = 512u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ThumbnailDescription::source_samples_per_thumbnail_sample() const {
  return source_samples_per_thumbnail_sample_;
}
inline void ThumbnailDescription::set_source_samples_per_thumbnail_sample(::google::protobuf::uint32 value) {
  _set_bit(3);
  source_samples_per_thumbnail_sample_ = value;
}

// optional uint32 thumbnail_cache = 5 [default = 5];
inline bool ThumbnailDescription::has_thumbnail_cache() const {
  return _has_bit(4);
}
inline void ThumbnailDescription::clear_thumbnail_cache() {
  thumbnail_cache_ = 5u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 ThumbnailDescription::thumbnail_cache() const {
  return thumbnail_cache_;
}
inline void ThumbnailDescription::set_thumbnail_cache(::google::protobuf::uint32 value) {
  _set_bit(4);
  thumbnail_cache_ = value;
}

// optional .rec.gui.ThreadDescription cursor_thread = 6;
inline bool ThumbnailDescription::has_cursor_thread() const {
  return _has_bit(5);
}
inline void ThumbnailDescription::clear_cursor_thread() {
  if (cursor_thread_ != NULL) cursor_thread_->::rec::gui::ThreadDescription::Clear();
  _clear_bit(5);
}
inline const ::rec::gui::ThreadDescription& ThumbnailDescription::cursor_thread() const {
  return cursor_thread_ != NULL ? *cursor_thread_ : *default_instance_->cursor_thread_;
}
inline ::rec::gui::ThreadDescription* ThumbnailDescription::mutable_cursor_thread() {
  _set_bit(5);
  if (cursor_thread_ == NULL) cursor_thread_ = new ::rec::gui::ThreadDescription;
  return cursor_thread_;
}

// optional .rec.gui.FontDesc font = 7;
inline bool ThumbnailDescription::has_font() const {
  return _has_bit(6);
}
inline void ThumbnailDescription::clear_font() {
  if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
  _clear_bit(6);
}
inline const ::rec::gui::FontDesc& ThumbnailDescription::font() const {
  return font_ != NULL ? *font_ : *default_instance_->font_;
}
inline ::rec::gui::FontDesc* ThumbnailDescription::mutable_font() {
  _set_bit(6);
  if (font_ == NULL) font_ = new ::rec::gui::FontDesc;
  return font_;
}

// optional uint32 tic_height = 8 [default = 8];
inline bool ThumbnailDescription::has_tic_height() const {
  return _has_bit(7);
}
inline void ThumbnailDescription::clear_tic_height() {
  tic_height_ = 8u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 ThumbnailDescription::tic_height() const {
  return tic_height_;
}
inline void ThumbnailDescription::set_tic_height(::google::protobuf::uint32 value) {
  _set_bit(7);
  tic_height_ = value;
}

// optional uint32 subtic_height = 9 [default = 3];
inline bool ThumbnailDescription::has_subtic_height() const {
  return _has_bit(8);
}
inline void ThumbnailDescription::clear_subtic_height() {
  subtic_height_ = 3u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 ThumbnailDescription::subtic_height() const {
  return subtic_height_;
}
inline void ThumbnailDescription::set_subtic_height(::google::protobuf::uint32 value) {
  _set_bit(8);
  subtic_height_ = value;
}

// optional bool use_captions = 10 [default = true];
inline bool ThumbnailDescription::has_use_captions() const {
  return _has_bit(9);
}
inline void ThumbnailDescription::clear_use_captions() {
  use_captions_ = true;
  _clear_bit(9);
}
inline bool ThumbnailDescription::use_captions() const {
  return use_captions_;
}
inline void ThumbnailDescription::set_use_captions(bool value) {
  _set_bit(9);
  use_captions_ = value;
}

// optional bool tics_at_bottom = 11 [default = true];
inline bool ThumbnailDescription::has_tics_at_bottom() const {
  return _has_bit(10);
}
inline void ThumbnailDescription::clear_tics_at_bottom() {
  tics_at_bottom_ = true;
  _clear_bit(10);
}
inline bool ThumbnailDescription::tics_at_bottom() const {
  return tics_at_bottom_;
}
inline void ThumbnailDescription::set_tics_at_bottom(bool value) {
  _set_bit(10);
  tics_at_bottom_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fThumbnailDescription_2eproto__INCLUDED
