// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/Color.proto

#ifndef PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();

class Color;
class Colors;

// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rgb = 1 [default = 0];
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 1;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);

  // optional uint32 alpha = 2 [default = 255];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline ::google::protobuf::uint32 alpha() const;
  inline void set_alpha(::google::protobuf::uint32 value);

  // optional uint32 red = 3 [default = 0];
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 3;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);

  // optional uint32 green = 4 [default = 0];
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 4;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);

  // optional uint32 blue = 5 [default = 0];
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 5;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);

  // optional uint32 argb = 6 [default = 4278190080];
  inline bool has_argb() const;
  inline void clear_argb();
  static const int kArgbFieldNumber = 6;
  inline ::google::protobuf::uint32 argb() const;
  inline void set_argb(::google::protobuf::uint32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:rec.gui.Color)
 private:
  inline void set_has_rgb();
  inline void clear_has_rgb();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  inline void set_has_argb();
  inline void clear_has_argb();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rgb_;
  ::google::protobuf::uint32 alpha_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  ::google::protobuf::uint32 argb_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Colors : public ::google::protobuf::Message {
 public:
  Colors();
  virtual ~Colors();

  Colors(const Colors& from);

  inline Colors& operator=(const Colors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Colors& default_instance();

  void Swap(Colors* other);

  // implements Message ----------------------------------------------

  Colors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Colors& from);
  void MergeFrom(const Colors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rec.gui.Color color = 1;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline const ::rec::gui::Color& color(int index) const;
  inline ::rec::gui::Color* mutable_color(int index);
  inline ::rec::gui::Color* add_color();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >&
      color() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >*
      mutable_color();

  // @@protoc_insertion_point(class_scope:rec.gui.Colors)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rec::gui::Color > color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();

  void InitAsDefaultInstance();
  static Colors* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// optional uint32 rgb = 1 [default = 0];
inline bool Color::has_rgb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_rgb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_rgb() {
  rgb_ = 0u;
  clear_has_rgb();
}
inline ::google::protobuf::uint32 Color::rgb() const {
  return rgb_;
}
inline void Color::set_rgb(::google::protobuf::uint32 value) {
  set_has_rgb();
  rgb_ = value;
}

// optional uint32 alpha = 2 [default = 255];
inline bool Color::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_alpha() {
  alpha_ = 255u;
  clear_has_alpha();
}
inline ::google::protobuf::uint32 Color::alpha() const {
  return alpha_;
}
inline void Color::set_alpha(::google::protobuf::uint32 value) {
  set_has_alpha();
  alpha_ = value;
}

// optional uint32 red = 3 [default = 0];
inline bool Color::has_red() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_red() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_red() {
  red_ = 0u;
  clear_has_red();
}
inline ::google::protobuf::uint32 Color::red() const {
  return red_;
}
inline void Color::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
}

// optional uint32 green = 4 [default = 0];
inline bool Color::has_green() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color::set_has_green() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color::clear_green() {
  green_ = 0u;
  clear_has_green();
}
inline ::google::protobuf::uint32 Color::green() const {
  return green_;
}
inline void Color::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
}

// optional uint32 blue = 5 [default = 0];
inline bool Color::has_blue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Color::set_has_blue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Color::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
inline ::google::protobuf::uint32 Color::blue() const {
  return blue_;
}
inline void Color::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
}

// optional uint32 argb = 6 [default = 4278190080];
inline bool Color::has_argb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Color::set_has_argb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Color::clear_has_argb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Color::clear_argb() {
  argb_ = 4278190080u;
  clear_has_argb();
}
inline ::google::protobuf::uint32 Color::argb() const {
  return argb_;
}
inline void Color::set_argb(::google::protobuf::uint32 value) {
  set_has_argb();
  argb_ = value;
}

// optional string name = 7;
inline bool Color::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Color::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Color::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Color::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Color::name() const {
  return *name_;
}
inline void Color::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Color::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Color::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Color::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Color::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Color::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Colors

// repeated .rec.gui.Color color = 1;
inline int Colors::color_size() const {
  return color_.size();
}
inline void Colors::clear_color() {
  color_.Clear();
}
inline const ::rec::gui::Color& Colors::color(int index) const {
  return color_.Get(index);
}
inline ::rec::gui::Color* Colors::mutable_color(int index) {
  return color_.Mutable(index);
}
inline ::rec::gui::Color* Colors::add_color() {
  return color_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >&
Colors::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >*
Colors::mutable_color() {
  return &color_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED
