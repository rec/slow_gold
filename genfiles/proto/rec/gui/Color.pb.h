// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/gui/Color.proto

#ifndef PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED
#define PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();

class Color;
class Colors;

// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();
  
  Color(const Color& from);
  
  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();
  
  void Swap(Color* other);
  
  // implements Message ----------------------------------------------
  
  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 rgb = 1 [default = 0];
  inline bool has_rgb() const;
  inline void clear_rgb();
  static const int kRgbFieldNumber = 1;
  inline ::google::protobuf::uint32 rgb() const;
  inline void set_rgb(::google::protobuf::uint32 value);
  
  // optional uint32 alpha = 2 [default = 255];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline ::google::protobuf::uint32 alpha() const;
  inline void set_alpha(::google::protobuf::uint32 value);
  
  // optional uint32 red = 3 [default = 0];
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 3;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);
  
  // optional uint32 green = 4 [default = 0];
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 4;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);
  
  // optional uint32 blue = 5 [default = 0];
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 5;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);
  
  // optional uint32 argb = 6 [default = 4278190080];
  inline bool has_argb() const;
  inline void clear_argb();
  static const int kArgbFieldNumber = 6;
  inline ::google::protobuf::uint32 argb() const;
  inline void set_argb(::google::protobuf::uint32 value);
  
  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // @@protoc_insertion_point(class_scope:rec.gui.Color)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 rgb_;
  ::google::protobuf::uint32 alpha_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  ::google::protobuf::uint32 argb_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Colors : public ::google::protobuf::Message {
 public:
  Colors();
  virtual ~Colors();
  
  Colors(const Colors& from);
  
  inline Colors& operator=(const Colors& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Colors& default_instance();
  
  void Swap(Colors* other);
  
  // implements Message ----------------------------------------------
  
  Colors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Colors& from);
  void MergeFrom(const Colors& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .rec.gui.Color color = 1;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline const ::rec::gui::Color& color(int index) const;
  inline ::rec::gui::Color* mutable_color(int index);
  inline ::rec::gui::Color* add_color();
  inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >&
      color() const;
  inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >*
      mutable_color();
  
  // @@protoc_insertion_point(class_scope:rec.gui.Colors)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::rec::gui::Color > color_;
  friend void  protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_AssignDesc_rec_2fgui_2fColor_2eproto();
  friend void protobuf_ShutdownFile_rec_2fgui_2fColor_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Colors* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// optional uint32 rgb = 1 [default = 0];
inline bool Color::has_rgb() const {
  return _has_bit(0);
}
inline void Color::clear_rgb() {
  rgb_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 Color::rgb() const {
  return rgb_;
}
inline void Color::set_rgb(::google::protobuf::uint32 value) {
  _set_bit(0);
  rgb_ = value;
}

// optional uint32 alpha = 2 [default = 255];
inline bool Color::has_alpha() const {
  return _has_bit(1);
}
inline void Color::clear_alpha() {
  alpha_ = 255u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Color::alpha() const {
  return alpha_;
}
inline void Color::set_alpha(::google::protobuf::uint32 value) {
  _set_bit(1);
  alpha_ = value;
}

// optional uint32 red = 3 [default = 0];
inline bool Color::has_red() const {
  return _has_bit(2);
}
inline void Color::clear_red() {
  red_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Color::red() const {
  return red_;
}
inline void Color::set_red(::google::protobuf::uint32 value) {
  _set_bit(2);
  red_ = value;
}

// optional uint32 green = 4 [default = 0];
inline bool Color::has_green() const {
  return _has_bit(3);
}
inline void Color::clear_green() {
  green_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Color::green() const {
  return green_;
}
inline void Color::set_green(::google::protobuf::uint32 value) {
  _set_bit(3);
  green_ = value;
}

// optional uint32 blue = 5 [default = 0];
inline bool Color::has_blue() const {
  return _has_bit(4);
}
inline void Color::clear_blue() {
  blue_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Color::blue() const {
  return blue_;
}
inline void Color::set_blue(::google::protobuf::uint32 value) {
  _set_bit(4);
  blue_ = value;
}

// optional uint32 argb = 6 [default = 4278190080];
inline bool Color::has_argb() const {
  return _has_bit(5);
}
inline void Color::clear_argb() {
  argb_ = 4278190080u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Color::argb() const {
  return argb_;
}
inline void Color::set_argb(::google::protobuf::uint32 value) {
  _set_bit(5);
  argb_ = value;
}

// optional string name = 7;
inline bool Color::has_name() const {
  return _has_bit(6);
}
inline void Color::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Color::name() const {
  return *name_;
}
inline void Color::set_name(const ::std::string& value) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Color::set_name(const char* value) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Color::set_name(const char* value, size_t size) {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Color::mutable_name() {
  _set_bit(6);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// Colors

// repeated .rec.gui.Color color = 1;
inline int Colors::color_size() const {
  return color_.size();
}
inline void Colors::clear_color() {
  color_.Clear();
}
inline const ::rec::gui::Color& Colors::color(int index) const {
  return color_.Get(index);
}
inline ::rec::gui::Color* Colors::mutable_color(int index) {
  return color_.Mutable(index);
}
inline ::rec::gui::Color* Colors::add_color() {
  return color_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >&
Colors::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedPtrField< ::rec::gui::Color >*
Colors::mutable_color() {
  return &color_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gui
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fgui_2fColor_2eproto__INCLUDED
