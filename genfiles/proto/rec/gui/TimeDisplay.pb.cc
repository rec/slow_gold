// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/gui/TimeDisplay.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace gui {
namespace time {

namespace {

const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_Separator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_Separator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_Display_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_Display_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dial_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Dial_Style_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto() {
  protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/gui/TimeDisplay.proto");
  GOOGLE_CHECK(file != NULL);
  Text_descriptor_ = file->message_type(0);
  static const int Text_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, margin_),
  };
  Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text));
  Text_Separator_descriptor_ = Text_descriptor_->nested_type(0);
  static const int Text_Separator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, flash_),
  };
  Text_Separator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_Separator_descriptor_,
      Text_Separator::default_instance_,
      Text_Separator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Separator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text_Separator));
  Text_Display_descriptor_ = Text_descriptor_->nested_type(1);
  static const int Text_Display_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, milliseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, frames_),
  };
  Text_Display_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_Display_descriptor_,
      Text_Display::default_instance_,
      Text_Display_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text_Display, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text_Display));
  Dial_descriptor_ = file->message_type(1);
  static const int Dial_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, outline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, display_lap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, margin_),
  };
  Dial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dial_descriptor_,
      Dial::default_instance_,
      Dial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dial));
  Dial_Style_descriptor_ = Dial_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fgui_2fTimeDisplay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_Separator_descriptor_, &Text_Separator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_Display_descriptor_, &Text_Display::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dial_descriptor_, &Dial::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto() {
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Text_Separator::default_instance_;
  delete Text_Separator_reflection_;
  delete Text_Display::default_instance_;
  delete Text_Display_reflection_;
  delete Dial::default_instance_;
  delete Dial_reflection_;
}

void protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::gui::protobuf_AddDesc_rec_2fgui_2fFont_2eproto();
  ::rec::gui::color::protobuf_AddDesc_rec_2fgui_2fColor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/gui/TimeDisplay.proto\022\014rec.gui.tim"
    "e\032\022rec/gui/Font.proto\032\023rec/gui/Color.pro"
    "to\"\337\002\n\004Text\022\037\n\004font\030\001 \001(\0132\021.rec.gui.Font"
    "Desc\022/\n\tseparator\030\002 \001(\0132\034.rec.gui.time.T"
    "ext.Separator\022+\n\007display\030\003 \001(\0132\032.rec.gui"
    ".time.Text.Display\022\021\n\006margin\030\004 \001(\r:\0012\032B\n"
    "\tSeparator\022\021\n\tseparator\030\001 \001(\t\022\r\n\005width\030\002"
    " \001(\r\022\023\n\005flash\030\003 \001(\010:\004true\032\200\001\n\007Display\022\024\n"
    "\005hours\030\001 \001(\010:\005false\022\025\n\007minutes\030\002 \001(\010:\004tr"
    "ue\022\025\n\007seconds\030\003 \001(\010:\004true\022\032\n\014millisecond"
    "s\030\004 \001(\010:\004true\022\025\n\006frames\030\005 \001(\010:\005false\"\253\001\n"
    "\004Dial\022\'\n\005style\030\001 \001(\0162\030.rec.gui.time.Dial"
    ".Style\022\017\n\007outline\030\002 \001(\r\022\031\n\021display_lap_c"
    "ount\030\004 \001(\010\022\037\n\004font\030\005 \001(\0132\021.rec.gui.FontD"
    "esc\022\021\n\006margin\030\006 \001(\r:\0012\"\032\n\005Style\022\010\n\004DIAL\020"
    "\001\022\007\n\003BAR\020\002", 610);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/gui/TimeDisplay.proto", &protobuf_RegisterTypes);
  Text::default_instance_ = new Text();
  Text_Separator::default_instance_ = new Text_Separator();
  Text_Display::default_instance_ = new Text_Display();
  Dial::default_instance_ = new Dial();
  Text::default_instance_->InitAsDefaultInstance();
  Text_Separator::default_instance_->InitAsDefaultInstance();
  Text_Display::default_instance_->InitAsDefaultInstance();
  Dial::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fgui_2fTimeDisplay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fgui_2fTimeDisplay_2eproto {
  StaticDescriptorInitializer_rec_2fgui_2fTimeDisplay_2eproto() {
    protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();
  }
} static_descriptor_initializer_rec_2fgui_2fTimeDisplay_2eproto_;


// ===================================================================

const ::std::string Text_Separator::_default_separator_;
#ifndef _MSC_VER
const int Text_Separator::kSeparatorFieldNumber;
const int Text_Separator::kWidthFieldNumber;
const int Text_Separator::kFlashFieldNumber;
#endif  // !_MSC_VER

Text_Separator::Text_Separator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text_Separator::InitAsDefaultInstance() {
}

Text_Separator::Text_Separator(const Text_Separator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text_Separator::SharedCtor() {
  _cached_size_ = 0;
  separator_ = const_cast< ::std::string*>(&_default_separator_);
  width_ = 0u;
  flash_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text_Separator::~Text_Separator() {
  SharedDtor();
}

void Text_Separator::SharedDtor() {
  if (separator_ != &_default_separator_) {
    delete separator_;
  }
  if (this != default_instance_) {
  }
}

void Text_Separator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text_Separator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_Separator_descriptor_;
}

const Text_Separator& Text_Separator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();  return *default_instance_;
}

Text_Separator* Text_Separator::default_instance_ = NULL;

Text_Separator* Text_Separator::New() const {
  return new Text_Separator;
}

void Text_Separator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (separator_ != &_default_separator_) {
        separator_->clear();
      }
    }
    width_ = 0u;
    flash_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text_Separator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string separator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_separator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->separator().data(), this->separator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flash;
        break;
      }
      
      // optional bool flash = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flash_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text_Separator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string separator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->separator().data(), this->separator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->separator(), output);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }
  
  // optional bool flash = 3 [default = true];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text_Separator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string separator = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->separator().data(), this->separator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->separator(), target);
  }
  
  // optional uint32 width = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }
  
  // optional bool flash = 3 [default = true];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text_Separator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string separator = 1;
    if (has_separator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->separator());
    }
    
    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // optional bool flash = 3 [default = true];
    if (has_flash()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text_Separator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text_Separator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text_Separator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text_Separator::MergeFrom(const Text_Separator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_separator(from.separator());
    }
    if (from._has_bit(1)) {
      set_width(from.width());
    }
    if (from._has_bit(2)) {
      set_flash(from.flash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text_Separator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text_Separator::CopyFrom(const Text_Separator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text_Separator::IsInitialized() const {
  
  return true;
}

void Text_Separator::Swap(Text_Separator* other) {
  if (other != this) {
    std::swap(separator_, other->separator_);
    std::swap(width_, other->width_);
    std::swap(flash_, other->flash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text_Separator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_Separator_descriptor_;
  metadata.reflection = Text_Separator_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Text_Display::kHoursFieldNumber;
const int Text_Display::kMinutesFieldNumber;
const int Text_Display::kSecondsFieldNumber;
const int Text_Display::kMillisecondsFieldNumber;
const int Text_Display::kFramesFieldNumber;
#endif  // !_MSC_VER

Text_Display::Text_Display()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text_Display::InitAsDefaultInstance() {
}

Text_Display::Text_Display(const Text_Display& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text_Display::SharedCtor() {
  _cached_size_ = 0;
  hours_ = false;
  minutes_ = true;
  seconds_ = true;
  milliseconds_ = true;
  frames_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text_Display::~Text_Display() {
  SharedDtor();
}

void Text_Display::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Text_Display::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text_Display::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_Display_descriptor_;
}

const Text_Display& Text_Display::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();  return *default_instance_;
}

Text_Display* Text_Display::default_instance_ = NULL;

Text_Display* Text_Display::New() const {
  return new Text_Display;
}

void Text_Display::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hours_ = false;
    minutes_ = true;
    seconds_ = true;
    milliseconds_ = true;
    frames_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text_Display::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hours = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hours_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }
      
      // optional bool minutes = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &minutes_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }
      
      // optional bool seconds = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seconds_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_milliseconds;
        break;
      }
      
      // optional bool milliseconds = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &milliseconds_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frames;
        break;
      }
      
      // optional bool frames = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frames_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text_Display::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hours = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hours(), output);
  }
  
  // optional bool minutes = 2 [default = true];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->minutes(), output);
  }
  
  // optional bool seconds = 3 [default = true];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->seconds(), output);
  }
  
  // optional bool milliseconds = 4 [default = true];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->milliseconds(), output);
  }
  
  // optional bool frames = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->frames(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text_Display::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hours = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hours(), target);
  }
  
  // optional bool minutes = 2 [default = true];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->minutes(), target);
  }
  
  // optional bool seconds = 3 [default = true];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->seconds(), target);
  }
  
  // optional bool milliseconds = 4 [default = true];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->milliseconds(), target);
  }
  
  // optional bool frames = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->frames(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text_Display::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hours = 1 [default = false];
    if (has_hours()) {
      total_size += 1 + 1;
    }
    
    // optional bool minutes = 2 [default = true];
    if (has_minutes()) {
      total_size += 1 + 1;
    }
    
    // optional bool seconds = 3 [default = true];
    if (has_seconds()) {
      total_size += 1 + 1;
    }
    
    // optional bool milliseconds = 4 [default = true];
    if (has_milliseconds()) {
      total_size += 1 + 1;
    }
    
    // optional bool frames = 5 [default = false];
    if (has_frames()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text_Display::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text_Display* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text_Display*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text_Display::MergeFrom(const Text_Display& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hours(from.hours());
    }
    if (from._has_bit(1)) {
      set_minutes(from.minutes());
    }
    if (from._has_bit(2)) {
      set_seconds(from.seconds());
    }
    if (from._has_bit(3)) {
      set_milliseconds(from.milliseconds());
    }
    if (from._has_bit(4)) {
      set_frames(from.frames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text_Display::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text_Display::CopyFrom(const Text_Display& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text_Display::IsInitialized() const {
  
  return true;
}

void Text_Display::Swap(Text_Display* other) {
  if (other != this) {
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(frames_, other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text_Display::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_Display_descriptor_;
  metadata.reflection = Text_Display_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Text::kFontFieldNumber;
const int Text::kSeparatorFieldNumber;
const int Text::kDisplayFieldNumber;
const int Text::kMarginFieldNumber;
#endif  // !_MSC_VER

Text::Text()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Text::InitAsDefaultInstance() {
  font_ = const_cast< ::rec::gui::FontDesc*>(&::rec::gui::FontDesc::default_instance());
  separator_ = const_cast< ::rec::gui::time::Text_Separator*>(&::rec::gui::time::Text_Separator::default_instance());
  display_ = const_cast< ::rec::gui::time::Text_Display*>(&::rec::gui::time::Text_Display::default_instance());
}

Text::Text(const Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Text::SharedCtor() {
  _cached_size_ = 0;
  font_ = NULL;
  separator_ = NULL;
  display_ = NULL;
  margin_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text::~Text() {
  SharedDtor();
}

void Text::SharedDtor() {
  if (this != default_instance_) {
    delete font_;
    delete separator_;
    delete display_;
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New() const {
  return new Text;
}

void Text::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
    }
    if (_has_bit(1)) {
      if (separator_ != NULL) separator_->::rec::gui::time::Text_Separator::Clear();
    }
    if (_has_bit(2)) {
      if (display_ != NULL) display_->::rec::gui::time::Text_Display::Clear();
    }
    margin_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.FontDesc font = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_separator;
        break;
      }
      
      // optional .rec.gui.time.Text.Separator separator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_separator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display;
        break;
      }
      
      // optional .rec.gui.time.Text.Display display = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_margin;
        break;
      }
      
      // optional uint32 margin = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.FontDesc font = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->font(), output);
  }
  
  // optional .rec.gui.time.Text.Separator separator = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->separator(), output);
  }
  
  // optional .rec.gui.time.Text.Display display = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->display(), output);
  }
  
  // optional uint32 margin = 4 [default = 2];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->margin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.FontDesc font = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->font(), target);
  }
  
  // optional .rec.gui.time.Text.Separator separator = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->separator(), target);
  }
  
  // optional .rec.gui.time.Text.Display display = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->display(), target);
  }
  
  // optional uint32 margin = 4 [default = 2];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->margin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Text::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.FontDesc font = 1;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }
    
    // optional .rec.gui.time.Text.Separator separator = 2;
    if (has_separator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->separator());
    }
    
    // optional .rec.gui.time.Text.Display display = 3;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display());
    }
    
    // optional uint32 margin = 4 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_font()->::rec::gui::FontDesc::MergeFrom(from.font());
    }
    if (from._has_bit(1)) {
      mutable_separator()->::rec::gui::time::Text_Separator::MergeFrom(from.separator());
    }
    if (from._has_bit(2)) {
      mutable_display()->::rec::gui::time::Text_Display::MergeFrom(from.display());
    }
    if (from._has_bit(3)) {
      set_margin(from.margin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  
  return true;
}

void Text::Swap(Text* other) {
  if (other != this) {
    std::swap(font_, other->font_);
    std::swap(separator_, other->separator_);
    std::swap(display_, other->display_);
    std::swap(margin_, other->margin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Dial_Style_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dial_Style_descriptor_;
}
bool Dial_Style_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Dial_Style Dial::DIAL;
const Dial_Style Dial::BAR;
const Dial_Style Dial::Style_MIN;
const Dial_Style Dial::Style_MAX;
const int Dial::Style_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Dial::kStyleFieldNumber;
const int Dial::kOutlineFieldNumber;
const int Dial::kDisplayLapCountFieldNumber;
const int Dial::kFontFieldNumber;
const int Dial::kMarginFieldNumber;
#endif  // !_MSC_VER

Dial::Dial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dial::InitAsDefaultInstance() {
  font_ = const_cast< ::rec::gui::FontDesc*>(&::rec::gui::FontDesc::default_instance());
}

Dial::Dial(const Dial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dial::SharedCtor() {
  _cached_size_ = 0;
  style_ = 1;
  outline_ = 0u;
  display_lap_count_ = false;
  font_ = NULL;
  margin_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dial::~Dial() {
  SharedDtor();
}

void Dial::SharedDtor() {
  if (this != default_instance_) {
    delete font_;
  }
}

void Dial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dial_descriptor_;
}

const Dial& Dial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fgui_2fTimeDisplay_2eproto();  return *default_instance_;
}

Dial* Dial::default_instance_ = NULL;

Dial* Dial::New() const {
  return new Dial;
}

void Dial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    style_ = 1;
    outline_ = 0u;
    display_lap_count_ = false;
    if (_has_bit(3)) {
      if (font_ != NULL) font_->::rec::gui::FontDesc::Clear();
    }
    margin_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.gui.time.Dial.Style style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rec::gui::time::Dial_Style_IsValid(value)) {
            set_style(static_cast< ::rec::gui::time::Dial_Style >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outline;
        break;
      }
      
      // optional uint32 outline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outline_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_display_lap_count;
        break;
      }
      
      // optional bool display_lap_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_lap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_lap_count_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_font;
        break;
      }
      
      // optional .rec.gui.FontDesc font = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_margin;
        break;
      }
      
      // optional uint32 margin = 6 [default = 2];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &margin_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.gui.time.Dial.Style style = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->style(), output);
  }
  
  // optional uint32 outline = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->outline(), output);
  }
  
  // optional bool display_lap_count = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->display_lap_count(), output);
  }
  
  // optional .rec.gui.FontDesc font = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->font(), output);
  }
  
  // optional uint32 margin = 6 [default = 2];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->margin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.gui.time.Dial.Style style = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->style(), target);
  }
  
  // optional uint32 outline = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->outline(), target);
  }
  
  // optional bool display_lap_count = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->display_lap_count(), target);
  }
  
  // optional .rec.gui.FontDesc font = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->font(), target);
  }
  
  // optional uint32 margin = 6 [default = 2];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->margin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.gui.time.Dial.Style style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
    }
    
    // optional uint32 outline = 2;
    if (has_outline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outline());
    }
    
    // optional bool display_lap_count = 4;
    if (has_display_lap_count()) {
      total_size += 1 + 1;
    }
    
    // optional .rec.gui.FontDesc font = 5;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font());
    }
    
    // optional uint32 margin = 6 [default = 2];
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->margin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dial::MergeFrom(const Dial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_style(from.style());
    }
    if (from._has_bit(1)) {
      set_outline(from.outline());
    }
    if (from._has_bit(2)) {
      set_display_lap_count(from.display_lap_count());
    }
    if (from._has_bit(3)) {
      mutable_font()->::rec::gui::FontDesc::MergeFrom(from.font());
    }
    if (from._has_bit(4)) {
      set_margin(from.margin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dial::CopyFrom(const Dial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dial::IsInitialized() const {
  
  return true;
}

void Dial::Swap(Dial* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(outline_, other->outline_);
    std::swap(display_lap_count_, other->display_lap_count_);
    std::swap(font_, other->font_);
    std::swap(margin_, other->margin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dial_descriptor_;
  metadata.reflection = Dial_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace time
}  // namespace gui
}  // namespace rec

// @@protoc_insertion_point(global_scope)
