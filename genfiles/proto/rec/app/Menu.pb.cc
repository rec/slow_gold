// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/app/Menu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/app/Menu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace app {

namespace {

const ::google::protobuf::Descriptor* MenuEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuBar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuBar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fapp_2fMenu_2eproto() {
  protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/app/Menu.proto");
  GOOGLE_CHECK(file != NULL);
  MenuEntry_descriptor_ = file->message_type(0);
  static const int MenuEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, submenu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, is_recent_files_menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, callout_function_),
  };
  MenuEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuEntry_descriptor_,
      MenuEntry::default_instance_,
      MenuEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuEntry));
  Menu_descriptor_ = file->message_type(1);
  static const int Menu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, extends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, entry_),
  };
  Menu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menu_descriptor_,
      Menu::default_instance_,
      Menu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menu));
  Menus_descriptor_ = file->message_type(2);
  static const int Menus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, menu_),
  };
  Menus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menus_descriptor_,
      Menus::default_instance_,
      Menus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menus));
  MenuBar_descriptor_ = file->message_type(3);
  static const int MenuBar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuBar, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuBar, menu_),
  };
  MenuBar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuBar_descriptor_,
      MenuBar::default_instance_,
      MenuBar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuBar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuBar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuBar));
  MenuCollection_descriptor_ = file->message_type(4);
  static const int MenuCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuCollection, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuCollection, menu_bar_),
  };
  MenuCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuCollection_descriptor_,
      MenuCollection::default_instance_,
      MenuCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fapp_2fMenu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuEntry_descriptor_, &MenuEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menu_descriptor_, &Menu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menus_descriptor_, &Menus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuBar_descriptor_, &MenuBar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuCollection_descriptor_, &MenuCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fapp_2fMenu_2eproto() {
  delete MenuEntry::default_instance_;
  delete MenuEntry_reflection_;
  delete Menu::default_instance_;
  delete Menu_reflection_;
  delete Menus::default_instance_;
  delete Menus_reflection_;
  delete MenuBar::default_instance_;
  delete MenuBar_reflection_;
  delete MenuCollection::default_instance_;
  delete MenuCollection_reflection_;
}

void protobuf_AddDesc_rec_2fapp_2fMenu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::command::protobuf_AddDesc_rec_2fcommand_2fCommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rec/app/Menu.proto\022\007rec.app\032\031rec/comma"
    "nd/Command.proto\"e\n\tMenuEntry\022\017\n\007command"
    "\030\001 \003(\r\022\017\n\007submenu\030\002 \001(\t\022\034\n\024is_recent_fil"
    "es_menu\030\003 \001(\010\022\030\n\020callout_function\030\004 \001(\t\""
    "i\n\004Menu\022-\n\013description\030\001 \001(\0132\030.rec.comma"
    "nd.Description\022\017\n\007extends\030\002 \001(\t\022!\n\005entry"
    "\030\003 \003(\0132\022.rec.app.MenuEntry\"$\n\005Menus\022\033\n\004m"
    "enu\030\001 \003(\0132\r.rec.app.Menu\"F\n\007MenuBar\022-\n\013d"
    "escription\030\001 \001(\0132\030.rec.command.Descripti"
    "on\022\014\n\004menu\030\002 \003(\t\"c\n\016MenuCollection\022-\n\013de"
    "scription\030\001 \001(\0132\030.rec.command.Descriptio"
    "n\022\"\n\010menu_bar\030\002 \003(\0132\020.rec.app.MenuBar", 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/app/Menu.proto", &protobuf_RegisterTypes);
  MenuEntry::default_instance_ = new MenuEntry();
  Menu::default_instance_ = new Menu();
  Menus::default_instance_ = new Menus();
  MenuBar::default_instance_ = new MenuBar();
  MenuCollection::default_instance_ = new MenuCollection();
  MenuEntry::default_instance_->InitAsDefaultInstance();
  Menu::default_instance_->InitAsDefaultInstance();
  Menus::default_instance_->InitAsDefaultInstance();
  MenuBar::default_instance_->InitAsDefaultInstance();
  MenuCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fapp_2fMenu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fapp_2fMenu_2eproto {
  StaticDescriptorInitializer_rec_2fapp_2fMenu_2eproto() {
    protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  }
} static_descriptor_initializer_rec_2fapp_2fMenu_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MenuEntry::kCommandFieldNumber;
const int MenuEntry::kSubmenuFieldNumber;
const int MenuEntry::kIsRecentFilesMenuFieldNumber;
const int MenuEntry::kCalloutFunctionFieldNumber;
#endif  // !_MSC_VER

MenuEntry::MenuEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuEntry::InitAsDefaultInstance() {
}

MenuEntry::MenuEntry(const MenuEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuEntry::SharedCtor() {
  _cached_size_ = 0;
  submenu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_recent_files_menu_ = false;
  callout_function_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuEntry::~MenuEntry() {
  SharedDtor();
}

void MenuEntry::SharedDtor() {
  if (submenu_ != &::google::protobuf::internal::kEmptyString) {
    delete submenu_;
  }
  if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
    delete callout_function_;
  }
  if (this != default_instance_) {
  }
}

void MenuEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuEntry_descriptor_;
}

const MenuEntry& MenuEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  return *default_instance_;
}

MenuEntry* MenuEntry::default_instance_ = NULL;

MenuEntry* MenuEntry::New() const {
  return new MenuEntry;
}

void MenuEntry::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_submenu()) {
      if (submenu_ != &::google::protobuf::internal::kEmptyString) {
        submenu_->clear();
      }
    }
    is_recent_files_menu_ = false;
    if (has_callout_function()) {
      if (callout_function_ != &::google::protobuf::internal::kEmptyString) {
        callout_function_->clear();
      }
    }
  }
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_command())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_command())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_command;
        if (input->ExpectTag(18)) goto parse_submenu;
        break;
      }

      // optional string submenu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submenu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submenu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->submenu().data(), this->submenu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_recent_files_menu;
        break;
      }

      // optional bool is_recent_files_menu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_recent_files_menu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recent_files_menu_)));
          set_has_is_recent_files_menu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_callout_function;
        break;
      }

      // optional string callout_function = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callout_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callout_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->callout_function().data(), this->callout_function().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->command(i), output);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->submenu(), output);
  }

  // optional bool is_recent_files_menu = 3;
  if (has_is_recent_files_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_recent_files_menu(), output);
  }

  // optional string callout_function = 4;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->callout_function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->command(i), target);
  }

  // optional string submenu = 2;
  if (has_submenu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submenu().data(), this->submenu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->submenu(), target);
  }

  // optional bool is_recent_files_menu = 3;
  if (has_is_recent_files_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_recent_files_menu(), target);
  }

  // optional string callout_function = 4;
  if (has_callout_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->callout_function().data(), this->callout_function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->callout_function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string submenu = 2;
    if (has_submenu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->submenu());
    }

    // optional bool is_recent_files_menu = 3;
    if (has_is_recent_files_menu()) {
      total_size += 1 + 1;
    }

    // optional string callout_function = 4;
    if (has_callout_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callout_function());
    }

  }
  // repeated uint32 command = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->command_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->command(i));
    }
    total_size += 1 * this->command_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuEntry::MergeFrom(const MenuEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_submenu()) {
      set_submenu(from.submenu());
    }
    if (from.has_is_recent_files_menu()) {
      set_is_recent_files_menu(from.is_recent_files_menu());
    }
    if (from.has_callout_function()) {
      set_callout_function(from.callout_function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuEntry::CopyFrom(const MenuEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuEntry::IsInitialized() const {

  return true;
}

void MenuEntry::Swap(MenuEntry* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(submenu_, other->submenu_);
    std::swap(is_recent_files_menu_, other->is_recent_files_menu_);
    std::swap(callout_function_, other->callout_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuEntry_descriptor_;
  metadata.reflection = MenuEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menu::kDescriptionFieldNumber;
const int Menu::kExtendsFieldNumber;
const int Menu::kEntryFieldNumber;
#endif  // !_MSC_VER

Menu::Menu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Menu::InitAsDefaultInstance() {
  description_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
}

Menu::Menu(const Menu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Menu::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  extends_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menu::~Menu() {
  SharedDtor();
}

void Menu::SharedDtor() {
  if (extends_ != &::google::protobuf::internal::kEmptyString) {
    delete extends_;
  }
  if (this != default_instance_) {
    delete description_;
  }
}

void Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menu_descriptor_;
}

const Menu& Menu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  return *default_instance_;
}

Menu* Menu::default_instance_ = NULL;

Menu* Menu::New() const {
  return new Menu;
}

void Menu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::rec::command::Description::Clear();
    }
    if (has_extends()) {
      if (extends_ != &::google::protobuf::internal::kEmptyString) {
        extends_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extends;
        break;
      }

      // optional string extends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extends()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extends().data(), this->extends().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        break;
      }

      // repeated .rec.app.MenuEntry entry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extends(), output);
  }

  // repeated .rec.app.MenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Menu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }

  // optional string extends = 2;
  if (has_extends()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extends(), target);
  }

  // repeated .rec.app.MenuEntry entry = 3;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Menu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

    // optional string extends = 2;
    if (has_extends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extends());
    }

  }
  // repeated .rec.app.MenuEntry entry = 3;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menu::MergeFrom(const Menu& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::rec::command::Description::MergeFrom(from.description());
    }
    if (from.has_extends()) {
      set_extends(from.extends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menu::CopyFrom(const Menu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menu::IsInitialized() const {

  return true;
}

void Menu::Swap(Menu* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(extends_, other->extends_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menu_descriptor_;
  metadata.reflection = Menu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menus::kMenuFieldNumber;
#endif  // !_MSC_VER

Menus::Menus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Menus::InitAsDefaultInstance() {
}

Menus::Menus(const Menus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Menus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menus::~Menus() {
  SharedDtor();
}

void Menus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Menus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menus_descriptor_;
}

const Menus& Menus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  return *default_instance_;
}

Menus* Menus::default_instance_ = NULL;

Menus* Menus::New() const {
  return new Menus;
}

void Menus::Clear() {
  menu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.app.Menu menu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_menu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_menu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Menus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.app.Menu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->menu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Menus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.app.Menu menu = 1;
  for (int i = 0; i < this->menu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->menu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Menus::ByteSize() const {
  int total_size = 0;

  // repeated .rec.app.Menu menu = 1;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->menu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menus::MergeFrom(const Menus& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menus::CopyFrom(const Menus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menus::IsInitialized() const {

  return true;
}

void Menus::Swap(Menus* other) {
  if (other != this) {
    menu_.Swap(&other->menu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menus_descriptor_;
  metadata.reflection = Menus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuBar::kDescriptionFieldNumber;
const int MenuBar::kMenuFieldNumber;
#endif  // !_MSC_VER

MenuBar::MenuBar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuBar::InitAsDefaultInstance() {
  description_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
}

MenuBar::MenuBar(const MenuBar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuBar::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuBar::~MenuBar() {
  SharedDtor();
}

void MenuBar::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

void MenuBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuBar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuBar_descriptor_;
}

const MenuBar& MenuBar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  return *default_instance_;
}

MenuBar* MenuBar::default_instance_ = NULL;

MenuBar* MenuBar::New() const {
  return new MenuBar;
}

void MenuBar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::rec::command::Description::Clear();
    }
  }
  menu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_menu;
        break;
      }

      // repeated string menu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_menu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menu(this->menu_size() - 1).data(),
            this->menu(this->menu_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_menu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }

  // repeated string menu = 2;
  for (int i = 0; i < this->menu_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->menu(i).data(), this->menu(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->menu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuBar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }

  // repeated string menu = 2;
  for (int i = 0; i < this->menu_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menu(i).data(), this->menu(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->menu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuBar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

  }
  // repeated string menu = 2;
  total_size += 1 * this->menu_size();
  for (int i = 0; i < this->menu_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->menu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuBar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuBar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuBar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuBar::MergeFrom(const MenuBar& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_.MergeFrom(from.menu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::rec::command::Description::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuBar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuBar::CopyFrom(const MenuBar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuBar::IsInitialized() const {

  return true;
}

void MenuBar::Swap(MenuBar* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    menu_.Swap(&other->menu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuBar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuBar_descriptor_;
  metadata.reflection = MenuBar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuCollection::kDescriptionFieldNumber;
const int MenuCollection::kMenuBarFieldNumber;
#endif  // !_MSC_VER

MenuCollection::MenuCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MenuCollection::InitAsDefaultInstance() {
  description_ = const_cast< ::rec::command::Description*>(&::rec::command::Description::default_instance());
}

MenuCollection::MenuCollection(const MenuCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MenuCollection::SharedCtor() {
  _cached_size_ = 0;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuCollection::~MenuCollection() {
  SharedDtor();
}

void MenuCollection::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
  }
}

void MenuCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuCollection_descriptor_;
}

const MenuCollection& MenuCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fapp_2fMenu_2eproto();
  return *default_instance_;
}

MenuCollection* MenuCollection::default_instance_ = NULL;

MenuCollection* MenuCollection::New() const {
  return new MenuCollection;
}

void MenuCollection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != NULL) description_->::rec::command::Description::Clear();
    }
  }
  menu_bar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.command.Description description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_menu_bar;
        break;
      }

      // repeated .rec.app.MenuBar menu_bar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menu_bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_menu_bar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_menu_bar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MenuCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(), output);
  }

  // repeated .rec.app.MenuBar menu_bar = 2;
  for (int i = 0; i < this->menu_bar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->menu_bar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MenuCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.command.Description description = 1;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(), target);
  }

  // repeated .rec.app.MenuBar menu_bar = 2;
  for (int i = 0; i < this->menu_bar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->menu_bar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MenuCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.command.Description description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

  }
  // repeated .rec.app.MenuBar menu_bar = 2;
  total_size += 1 * this->menu_bar_size();
  for (int i = 0; i < this->menu_bar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->menu_bar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuCollection::MergeFrom(const MenuCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  menu_bar_.MergeFrom(from.menu_bar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      mutable_description()->::rec::command::Description::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuCollection::CopyFrom(const MenuCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuCollection::IsInitialized() const {

  return true;
}

void MenuCollection::Swap(MenuCollection* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    menu_bar_.Swap(&other->menu_bar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuCollection_descriptor_;
  metadata.reflection = MenuCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace rec

// @@protoc_insertion_point(global_scope)
