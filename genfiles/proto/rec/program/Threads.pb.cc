// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/program/Threads.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/program/Threads.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace program {

namespace {

const ::google::protobuf::Descriptor* ThreadProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThreadProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThreadProtos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fprogram_2fThreads_2eproto() {
  protobuf_AddDesc_rec_2fprogram_2fThreads_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/program/Threads.proto");
  GOOGLE_CHECK(file != NULL);
  ThreadProto_descriptor_ = file->message_type(0);
  static const int ThreadProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProto, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProto, period_),
  };
  ThreadProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadProto_descriptor_,
      ThreadProto::default_instance_,
      ThreadProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadProto));
  ThreadProtos_descriptor_ = file->message_type(1);
  static const int ThreadProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProtos, thread_),
  };
  ThreadProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThreadProtos_descriptor_,
      ThreadProtos::default_instance_,
      ThreadProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreadProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThreadProtos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fprogram_2fThreads_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadProto_descriptor_, &ThreadProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThreadProtos_descriptor_, &ThreadProtos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fprogram_2fThreads_2eproto() {
  delete ThreadProto::default_instance_;
  delete ThreadProto_reflection_;
  delete ThreadProtos::default_instance_;
  delete ThreadProtos_reflection_;
}

void protobuf_AddDesc_rec_2fprogram_2fThreads_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rec/program/Threads.proto\022\013rec.program"
    "\"@\n\013ThreadProto\022\014\n\004name\030\001 \001(\t\022\023\n\010priorit"
    "y\030\002 \001(\r:\0015\022\016\n\006period\030\003 \001(\r\"8\n\014ThreadProt"
    "os\022(\n\006thread\030\001 \003(\0132\030.rec.program.ThreadP"
    "roto", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/program/Threads.proto", &protobuf_RegisterTypes);
  ThreadProto::default_instance_ = new ThreadProto();
  ThreadProtos::default_instance_ = new ThreadProtos();
  ThreadProto::default_instance_->InitAsDefaultInstance();
  ThreadProtos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fprogram_2fThreads_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fprogram_2fThreads_2eproto {
  StaticDescriptorInitializer_rec_2fprogram_2fThreads_2eproto() {
    protobuf_AddDesc_rec_2fprogram_2fThreads_2eproto();
  }
} static_descriptor_initializer_rec_2fprogram_2fThreads_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ThreadProto::kNameFieldNumber;
const int ThreadProto::kPriorityFieldNumber;
const int ThreadProto::kPeriodFieldNumber;
#endif  // !_MSC_VER

ThreadProto::ThreadProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadProto::InitAsDefaultInstance() {
}

ThreadProto::ThreadProto(const ThreadProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 5u;
  period_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadProto::~ThreadProto() {
  SharedDtor();
}

void ThreadProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ThreadProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadProto_descriptor_;
}

const ThreadProto& ThreadProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fprogram_2fThreads_2eproto();
  return *default_instance_;
}

ThreadProto* ThreadProto::default_instance_ = NULL;

ThreadProto* ThreadProto::New() const {
  return new ThreadProto;
}

void ThreadProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    priority_ = 5u;
    period_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 2 [default = 5];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional uint32 period = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThreadProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 priority = 2 [default = 5];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  // optional uint32 period = 3;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->period(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 priority = 2 [default = 5];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->priority(), target);
  }

  // optional uint32 period = 3;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->period(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 priority = 2 [default = 5];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

    // optional uint32 period = 3;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadProto::MergeFrom(const ThreadProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadProto::CopyFrom(const ThreadProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadProto::IsInitialized() const {

  return true;
}

void ThreadProto::Swap(ThreadProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(priority_, other->priority_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadProto_descriptor_;
  metadata.reflection = ThreadProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThreadProtos::kThreadFieldNumber;
#endif  // !_MSC_VER

ThreadProtos::ThreadProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThreadProtos::InitAsDefaultInstance() {
}

ThreadProtos::ThreadProtos(const ThreadProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThreadProtos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThreadProtos::~ThreadProtos() {
  SharedDtor();
}

void ThreadProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThreadProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThreadProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreadProtos_descriptor_;
}

const ThreadProtos& ThreadProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fprogram_2fThreads_2eproto();
  return *default_instance_;
}

ThreadProtos* ThreadProtos::default_instance_ = NULL;

ThreadProtos* ThreadProtos::New() const {
  return new ThreadProtos;
}

void ThreadProtos::Clear() {
  thread_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThreadProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rec.program.ThreadProto thread = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thread()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_thread;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThreadProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rec.program.ThreadProto thread = 1;
  for (int i = 0; i < this->thread_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thread(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThreadProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rec.program.ThreadProto thread = 1;
  for (int i = 0; i < this->thread_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->thread(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThreadProtos::ByteSize() const {
  int total_size = 0;

  // repeated .rec.program.ThreadProto thread = 1;
  total_size += 1 * this->thread_size();
  for (int i = 0; i < this->thread_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thread(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThreadProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThreadProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThreadProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThreadProtos::MergeFrom(const ThreadProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  thread_.MergeFrom(from.thread_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThreadProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadProtos::CopyFrom(const ThreadProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadProtos::IsInitialized() const {

  return true;
}

void ThreadProtos::Swap(ThreadProtos* other) {
  if (other != this) {
    thread_.Swap(&other->thread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThreadProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThreadProtos_descriptor_;
  metadata.reflection = ThreadProtos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace program
}  // namespace rec

// @@protoc_insertion_point(global_scope)
