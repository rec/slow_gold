// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rec/slow/Preferences.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

namespace {

const ::google::protobuf::Descriptor* Preferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preferences_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rec_2fslow_2fPreferences_2eproto() {
  protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rec/slow/Preferences.proto");
  GOOGLE_CHECK(file != NULL);
  Preferences_descriptor_ = file->message_type(0);
  static const int Preferences_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, recent_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, max_recent_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, reload_most_recent_file_),
  };
  Preferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Preferences_descriptor_,
      Preferences::default_instance_,
      Preferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Preferences));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rec_2fslow_2fPreferences_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Preferences_descriptor_, &Preferences::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rec_2fslow_2fPreferences_2eproto() {
  delete Preferences::default_instance_;
  delete Preferences_reflection_;
}

void protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rec::audio::timescaler::protobuf_AddDesc_rec_2faudio_2fstretch_2fTimeStretch_2eproto();
  ::rec::gui::protobuf_AddDesc_rec_2fcomponents_2fThumbnailDescription_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rec/slow/Preferences.proto\022\010rec.slow\032#"
    "rec/audio/stretch/TimeStretch.proto\032)rec"
    "/components/ThumbnailDescription.proto\"\320"
    "\001\n\013Preferences\0224\n\ttimescale\030\001 \001(\0132!.rec."
    "audio.timescaler.Description\0220\n\tthumbnai"
    "l\030\002 \001(\0132\035.rec.gui.ThumbnailDescription\022\024"
    "\n\014recent_files\030\003 \003(\t\022\034\n\020max_recent_files"
    "\030\004 \001(\r:\00216\022%\n\027reload_most_recent_file\030\005 "
    "\001(\010:\004true", 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rec/slow/Preferences.proto", &protobuf_RegisterTypes);
  Preferences::default_instance_ = new Preferences();
  Preferences::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rec_2fslow_2fPreferences_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rec_2fslow_2fPreferences_2eproto {
  StaticDescriptorInitializer_rec_2fslow_2fPreferences_2eproto() {
    protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto();
  }
} static_descriptor_initializer_rec_2fslow_2fPreferences_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Preferences::kTimescaleFieldNumber;
const int Preferences::kThumbnailFieldNumber;
const int Preferences::kRecentFilesFieldNumber;
const int Preferences::kMaxRecentFilesFieldNumber;
const int Preferences::kReloadMostRecentFileFieldNumber;
#endif  // !_MSC_VER

Preferences::Preferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Preferences::InitAsDefaultInstance() {
  timescale_ = const_cast< ::rec::audio::timescaler::Description*>(&::rec::audio::timescaler::Description::default_instance());
  thumbnail_ = const_cast< ::rec::gui::ThumbnailDescription*>(&::rec::gui::ThumbnailDescription::default_instance());
}

Preferences::Preferences(const Preferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Preferences::SharedCtor() {
  _cached_size_ = 0;
  timescale_ = NULL;
  thumbnail_ = NULL;
  max_recent_files_ = 16u;
  reload_most_recent_file_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preferences::~Preferences() {
  SharedDtor();
}

void Preferences::SharedDtor() {
  if (this != default_instance_) {
    delete timescale_;
    delete thumbnail_;
  }
}

void Preferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preferences_descriptor_;
}

const Preferences& Preferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto();  return *default_instance_;
}

Preferences* Preferences::default_instance_ = NULL;

Preferences* Preferences::New() const {
  return new Preferences;
}

void Preferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (timescale_ != NULL) timescale_->::rec::audio::timescaler::Description::Clear();
    }
    if (_has_bit(1)) {
      if (thumbnail_ != NULL) thumbnail_->::rec::gui::ThumbnailDescription::Clear();
    }
    max_recent_files_ = 16u;
    reload_most_recent_file_ = true;
  }
  recent_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Preferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rec.audio.timescaler.Description timescale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timescale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thumbnail;
        break;
      }
      
      // optional .rec.gui.ThumbnailDescription thumbnail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recent_files;
        break;
      }
      
      // repeated string recent_files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recent_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recent_files(0).data(), this->recent_files(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recent_files;
        if (input->ExpectTag(32)) goto parse_max_recent_files;
        break;
      }
      
      // optional uint32 max_recent_files = 4 [default = 16];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_recent_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_recent_files_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reload_most_recent_file;
        break;
      }
      
      // optional bool reload_most_recent_file = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reload_most_recent_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reload_most_recent_file_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Preferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rec.audio.timescaler.Description timescale = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timescale(), output);
  }
  
  // optional .rec.gui.ThumbnailDescription thumbnail = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->thumbnail(), output);
  }
  
  // repeated string recent_files = 3;
  for (int i = 0; i < this->recent_files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recent_files(i).data(), this->recent_files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->recent_files(i), output);
  }
  
  // optional uint32 max_recent_files = 4 [default = 16];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_recent_files(), output);
  }
  
  // optional bool reload_most_recent_file = 5 [default = true];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reload_most_recent_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Preferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rec.audio.timescaler.Description timescale = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timescale(), target);
  }
  
  // optional .rec.gui.ThumbnailDescription thumbnail = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->thumbnail(), target);
  }
  
  // repeated string recent_files = 3;
  for (int i = 0; i < this->recent_files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recent_files(i).data(), this->recent_files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->recent_files(i), target);
  }
  
  // optional uint32 max_recent_files = 4 [default = 16];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_recent_files(), target);
  }
  
  // optional bool reload_most_recent_file = 5 [default = true];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reload_most_recent_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Preferences::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rec.audio.timescaler.Description timescale = 1;
    if (has_timescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timescale());
    }
    
    // optional .rec.gui.ThumbnailDescription thumbnail = 2;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbnail());
    }
    
    // optional uint32 max_recent_files = 4 [default = 16];
    if (has_max_recent_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_recent_files());
    }
    
    // optional bool reload_most_recent_file = 5 [default = true];
    if (has_reload_most_recent_file()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string recent_files = 3;
  total_size += 1 * this->recent_files_size();
  for (int i = 0; i < this->recent_files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recent_files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Preferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Preferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Preferences::MergeFrom(const Preferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  recent_files_.MergeFrom(from.recent_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_timescale()->::rec::audio::timescaler::Description::MergeFrom(from.timescale());
    }
    if (from._has_bit(1)) {
      mutable_thumbnail()->::rec::gui::ThumbnailDescription::MergeFrom(from.thumbnail());
    }
    if (from._has_bit(3)) {
      set_max_recent_files(from.max_recent_files());
    }
    if (from._has_bit(4)) {
      set_reload_most_recent_file(from.reload_most_recent_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Preferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preferences::CopyFrom(const Preferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preferences::IsInitialized() const {
  
  return true;
}

void Preferences::Swap(Preferences* other) {
  if (other != this) {
    std::swap(timescale_, other->timescale_);
    std::swap(thumbnail_, other->thumbnail_);
    recent_files_.Swap(&other->recent_files_);
    std::swap(max_recent_files_, other->max_recent_files_);
    std::swap(reload_most_recent_file_, other->reload_most_recent_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Preferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preferences_descriptor_;
  metadata.reflection = Preferences_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

// @@protoc_insertion_point(global_scope)
