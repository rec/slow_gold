// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rec/slow/Preferences.proto

#ifndef PROTOBUF_rec_2fslow_2fPreferences_2eproto__INCLUDED
#define PROTOBUF_rec_2fslow_2fPreferences_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rec/audio/stretch/TimeStretch.pb.h"
#include "rec/components/ThumbnailDescription.pb.h"
// @@protoc_insertion_point(includes)

namespace rec {
namespace slow {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto();
void protobuf_AssignDesc_rec_2fslow_2fPreferences_2eproto();
void protobuf_ShutdownFile_rec_2fslow_2fPreferences_2eproto();

class Preferences;

// ===================================================================

class Preferences : public ::google::protobuf::Message {
 public:
  Preferences();
  virtual ~Preferences();
  
  Preferences(const Preferences& from);
  
  inline Preferences& operator=(const Preferences& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Preferences& default_instance();
  
  void Swap(Preferences* other);
  
  // implements Message ----------------------------------------------
  
  Preferences* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Preferences& from);
  void MergeFrom(const Preferences& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rec.audio.timescaler.Description timescale = 1;
  inline bool has_timescale() const;
  inline void clear_timescale();
  static const int kTimescaleFieldNumber = 1;
  inline const ::rec::audio::timescaler::Description& timescale() const;
  inline ::rec::audio::timescaler::Description* mutable_timescale();
  
  // optional .rec.gui.ThumbnailDescription thumbnail = 2;
  inline bool has_thumbnail() const;
  inline void clear_thumbnail();
  static const int kThumbnailFieldNumber = 2;
  inline const ::rec::gui::ThumbnailDescription& thumbnail() const;
  inline ::rec::gui::ThumbnailDescription* mutable_thumbnail();
  
  // repeated string recent_files = 3;
  inline int recent_files_size() const;
  inline void clear_recent_files();
  static const int kRecentFilesFieldNumber = 3;
  inline const ::std::string& recent_files(int index) const;
  inline ::std::string* mutable_recent_files(int index);
  inline void set_recent_files(int index, const ::std::string& value);
  inline void set_recent_files(int index, const char* value);
  inline void set_recent_files(int index, const char* value, size_t size);
  inline ::std::string* add_recent_files();
  inline void add_recent_files(const ::std::string& value);
  inline void add_recent_files(const char* value);
  inline void add_recent_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recent_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recent_files();
  
  // optional uint32 max_recent_files = 4 [default = 16];
  inline bool has_max_recent_files() const;
  inline void clear_max_recent_files();
  static const int kMaxRecentFilesFieldNumber = 4;
  inline ::google::protobuf::uint32 max_recent_files() const;
  inline void set_max_recent_files(::google::protobuf::uint32 value);
  
  // optional bool reload_most_recent_file = 5 [default = true];
  inline bool has_reload_most_recent_file() const;
  inline void clear_reload_most_recent_file();
  static const int kReloadMostRecentFileFieldNumber = 5;
  inline bool reload_most_recent_file() const;
  inline void set_reload_most_recent_file(bool value);
  
  // @@protoc_insertion_point(class_scope:rec.slow.Preferences)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::rec::audio::timescaler::Description* timescale_;
  ::rec::gui::ThumbnailDescription* thumbnail_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recent_files_;
  ::google::protobuf::uint32 max_recent_files_;
  bool reload_most_recent_file_;
  friend void  protobuf_AddDesc_rec_2fslow_2fPreferences_2eproto();
  friend void protobuf_AssignDesc_rec_2fslow_2fPreferences_2eproto();
  friend void protobuf_ShutdownFile_rec_2fslow_2fPreferences_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Preferences* default_instance_;
};
// ===================================================================


// ===================================================================

// Preferences

// optional .rec.audio.timescaler.Description timescale = 1;
inline bool Preferences::has_timescale() const {
  return _has_bit(0);
}
inline void Preferences::clear_timescale() {
  if (timescale_ != NULL) timescale_->::rec::audio::timescaler::Description::Clear();
  _clear_bit(0);
}
inline const ::rec::audio::timescaler::Description& Preferences::timescale() const {
  return timescale_ != NULL ? *timescale_ : *default_instance_->timescale_;
}
inline ::rec::audio::timescaler::Description* Preferences::mutable_timescale() {
  _set_bit(0);
  if (timescale_ == NULL) timescale_ = new ::rec::audio::timescaler::Description;
  return timescale_;
}

// optional .rec.gui.ThumbnailDescription thumbnail = 2;
inline bool Preferences::has_thumbnail() const {
  return _has_bit(1);
}
inline void Preferences::clear_thumbnail() {
  if (thumbnail_ != NULL) thumbnail_->::rec::gui::ThumbnailDescription::Clear();
  _clear_bit(1);
}
inline const ::rec::gui::ThumbnailDescription& Preferences::thumbnail() const {
  return thumbnail_ != NULL ? *thumbnail_ : *default_instance_->thumbnail_;
}
inline ::rec::gui::ThumbnailDescription* Preferences::mutable_thumbnail() {
  _set_bit(1);
  if (thumbnail_ == NULL) thumbnail_ = new ::rec::gui::ThumbnailDescription;
  return thumbnail_;
}

// repeated string recent_files = 3;
inline int Preferences::recent_files_size() const {
  return recent_files_.size();
}
inline void Preferences::clear_recent_files() {
  recent_files_.Clear();
}
inline const ::std::string& Preferences::recent_files(int index) const {
  return recent_files_.Get(index);
}
inline ::std::string* Preferences::mutable_recent_files(int index) {
  return recent_files_.Mutable(index);
}
inline void Preferences::set_recent_files(int index, const ::std::string& value) {
  recent_files_.Mutable(index)->assign(value);
}
inline void Preferences::set_recent_files(int index, const char* value) {
  recent_files_.Mutable(index)->assign(value);
}
inline void Preferences::set_recent_files(int index, const char* value, size_t size) {
  recent_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Preferences::add_recent_files() {
  return recent_files_.Add();
}
inline void Preferences::add_recent_files(const ::std::string& value) {
  recent_files_.Add()->assign(value);
}
inline void Preferences::add_recent_files(const char* value) {
  recent_files_.Add()->assign(value);
}
inline void Preferences::add_recent_files(const char* value, size_t size) {
  recent_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Preferences::recent_files() const {
  return recent_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Preferences::mutable_recent_files() {
  return &recent_files_;
}

// optional uint32 max_recent_files = 4 [default = 16];
inline bool Preferences::has_max_recent_files() const {
  return _has_bit(3);
}
inline void Preferences::clear_max_recent_files() {
  max_recent_files_ = 16u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Preferences::max_recent_files() const {
  return max_recent_files_;
}
inline void Preferences::set_max_recent_files(::google::protobuf::uint32 value) {
  _set_bit(3);
  max_recent_files_ = value;
}

// optional bool reload_most_recent_file = 5 [default = true];
inline bool Preferences::has_reload_most_recent_file() const {
  return _has_bit(4);
}
inline void Preferences::clear_reload_most_recent_file() {
  reload_most_recent_file_ = true;
  _clear_bit(4);
}
inline bool Preferences::reload_most_recent_file() const {
  return reload_most_recent_file_;
}
inline void Preferences::set_reload_most_recent_file(bool value) {
  _set_bit(4);
  reload_most_recent_file_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slow
}  // namespace rec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rec_2fslow_2fPreferences_2eproto__INCLUDED
